{
  "name": "SemanticModel",
  "compatibilityLevel": 1500,
  "model": {
    "culture": "en-US",
    "discourageImplicitMeasures": true,
    "dataSources": [
      {
        "type": "structured",
        "name": "SynapseDW",
        "connectionDetails": {
          "protocol": "tds",
          "address": {
            "server": "hbi-dv01-analytics-dwsrv.database.windows.net",
            "database": "hbidv01dw"
          },
          "authentication": null,
          "query": null
        },
        "options": {
          "commandTimeout": "P7200D"
        },
        "credential": {
          "AuthenticationKind": "UsernamePassword",
          "kind": "SQL",
          "path": "hbi-dv01-analytics-dwsrv.database.windows.net;hbidv01dw",
          "Username": "AASReader",
          "EncryptConnection": true
        }
      }
    ],
    "tables": [
      {
        "name": "Comparison",
        "calculationGroup": {
          "calculationItems": [
            {
              "name": "Current",
              "expression": "CALCULATE(SELECTEDMEASURE())"
            },
            {
              "name": "LWE",
              "expression": [
                "CALCULATE(",
                "    SELECTEDMEASURE(),",
                "    FILTER(all('Calendar')",
                "        , value('Calendar'[CalendarDateKey]) = value([LWE])",
                "    )",
                ")",
                "",
                ""
              ]
            },
            {
              "name": "LY",
              "expression": [
                "CALCULATE(",
                "SELECTEDMEASURE(),",
                "FILTER(",
                "all('Calendar'), ",
                "AND('Calendar'[BusinessYear] = max('Calendar'[BusinessYear])-1 ,",
                "'Calendar'[BusinessWeekOfYear] = max('Calendar'[BusinessWeekOfYear]) )))"
              ]
            },
            {
              "name": "LPE",
              "expression": [
                "CALCULATE(SELECTEDMEASURE(),",
                "FILTER(all('Calendar')",
                "        , value('Calendar'[CalendarDateKey]) = value([LPE])",
                "))",
                "    "
              ]
            },
            {
              "name": "LQ",
              "expression": [
                "CALCULATE(",
                "SELECTEDMEASURE(),",
                "FILTER(",
                "all('Calendar'), 'Calendar'[BusinessQuarter] = max('Calendar'[BusinessQuarter])-1 ))"
              ]
            },
            {
              "name": "CompareStart",
              "expression": [
                "CALCULATE(",
                "    selectedmeasure(),",
                "    FILTER(",
                "          all('Calendar')",
                "        , value('Calendar'[CalendarDateKey]) = value(max('DimComparisons'[StartCalendarDateKey]))",
                "    )",
                ")"
              ]
            },
            {
              "name": "CompareEnd",
              "expression": [
                "CALCULATE(",
                "    selectedmeasure(),",
                "    FILTER(",
                "          all('Calendar')",
                "        , value('Calendar'[CalendarDateKey]) = value(max('DimComparisons'[EndCalendarDateKey]))",
                "    )",
                ")"
              ]
            },
            {
              "name": "NY",
              "expression": [
                "CALCULATE(",
                "SELECTEDMEASURE(),",
                "FILTER(",
                "all('Calendar'), 'Calendar'[BusinessYear] = max('Calendar'[BusinessYear])+1 ))",
                ""
              ]
            },
            {
              "name": "NNY",
              "expression": [
                "CALCULATE(",
                "SELECTEDMEASURE(),",
                "FILTER(",
                "all('Calendar'), 'Calendar'[BusinessYear] = max('Calendar'[BusinessYear])+2 ))"
              ]
            },
            {
              "name": "LYE",
              "expression": [
                "var a = calculate(max('Calendar'[CalendarDateKey]), ",
                "FILTER(ALL('Calendar'),",
                "AND('Calendar'[BusinessYear]=MAX('Calendar'[BusinessYear])-1,",
                "    'Calendar'[FlagBusinessWeekEnd]=1",
                "    )))",
                "",
                "return CALCULATE(SELECTEDMEASURE(),",
                "FILTER(all('Calendar')",
                "        , 'Calendar'[CalendarDateKey] = a)",
                "    )",
                ""
              ]
            },
            {
              "name": "vs LY %",
              "expression": "divide(CALCULATE(SELECTEDMEASURE()-CALCULATE(SELECTEDMEASURE(),Comparison[Param] = \"LY\")), CALCULATE(SELECTEDMEASURE(),Comparison[Param] = \"LY\"),0)",
              "formatStringDefinition": {
                "expression": "\"0.0%\""
              }
            },
            {
              "name": "vs LY",
              "expression": "CALCULATE(SELECTEDMEASURE()) - CALCULATE(SELECTEDMEASURE(),Comparison[Param] = \"LY\")"
            },
            {
              "name": "vs LYE %",
              "expression": "divide(CALCULATE(SELECTEDMEASURE()-CALCULATE(SELECTEDMEASURE(),Comparison[Param] = \"LYE\")), CALCULATE(SELECTEDMEASURE(),Comparison[Param] = \"LYE\"),0)",
              "formatStringDefinition": {
                "expression": "\"0.0%\""
              }
            },
            {
              "name": "vs LYE",
              "expression": "CALCULATE(SELECTEDMEASURE()) - CALCULATE(SELECTEDMEASURE(),Comparison[Param] = \"LYE\")"
            },
            {
              "name": "vs LP %",
              "expression": "divide(CALCULATE(SELECTEDMEASURE()-CALCULATE(SELECTEDMEASURE(),Comparison[Param] = \"LP\")), CALCULATE(SELECTEDMEASURE(),Comparison[Param] = \"LP\"),0)",
              "formatStringDefinition": {
                "expression": "\"0.0%\""
              }
            },
            {
              "name": "vs LP",
              "expression": "CALCULATE(SELECTEDMEASURE()) - CALCULATE(SELECTEDMEASURE(),Comparison[Param] = \"LP\")"
            },
            {
              "name": "vs LPE %",
              "expression": "divide(CALCULATE(SELECTEDMEASURE()-CALCULATE(SELECTEDMEASURE(),Comparison[Param] = \"LPE\")), CALCULATE(SELECTEDMEASURE(),Comparison[Param] = \"LPE\"),0)",
              "formatStringDefinition": {
                "expression": "\"0.0%\""
              }
            },
            {
              "name": "vs LPE",
              "expression": [
                "CALCULATE(SELECTEDMEASURE()) - CALCULATE(SELECTEDMEASURE(),Comparison[Param] = \"LPE\")",
                ""
              ]
            },
            {
              "name": "LP",
              "expression": [
                "CALCULATE(",
                "SELECTEDMEASURE(),",
                "FILTER(",
                "all('Calendar'), 'Calendar'[BusinessYear] = max('Calendar'[BusinessYear])-1 ))"
              ]
            },
            {
              "name": "LQE",
              "expression": [
                "CALCULATE(",
                "    SELECTEDMEASURE(),",
                "    FILTER(all('Calendar')",
                "        , value('Calendar'[CalendarDateKey]) = value([LQE])",
                "    ))"
              ]
            },
            {
              "name": "vs LWE",
              "expression": "CALCULATE(SELECTEDMEASURE()) - CALCULATE(SELECTEDMEASURE(),Comparison[Param] = \"LWE\")"
            },
            {
              "name": "vs LWE %",
              "expression": "divide(CALCULATE(SELECTEDMEASURE()-CALCULATE(SELECTEDMEASURE(),Comparison[Param] = \"LWE\")), CALCULATE(SELECTEDMEASURE(),Comparison[Param] = \"LWE\"),0)",
              "formatStringDefinition": {
                "expression": "\"0.0%\""
              }
            },
            {
              "name": "YE",
              "expression": [
                "CALCULATE(SELECTEDMEASURE(),",
                "FILTER(all('Calendar')",
                "        , value('Calendar'[CalendarDateKey]) = value([YE])",
                "))",
                "    "
              ]
            },
            {
              "name": "Plan",
              "expression": [
                "SWITCH ",
                "(",
                "\tSELECTEDMEASURENAME(),",
                "\t\"SKU Count\", [2023 SKU Count Target],",
                "    \"Global SKU Count\", [2023 SKU Count Target],",
                "    \"Finished Good Dollars Turns (2pt)\", [2024 Turns Target],",
                "\t\"Finished Good Dollars\", [Finished Good Dollars Plan],",
                "\t\"Finished Good Units\", [Finished Good Units Plan],",
                "\t\"Finished Good Packages\", [Finished Good Packages Plan],",
                "    \"Finished Good Dollars (Millions)\", [Finished Good Dollars Plan (Millions)],",
                "    \"Finished Good Packages (Millions)\", [Finished Good Packages Plan (Millions)],",
                "    \"Finished Good Units (Millions)\", [Finished Good Units Plan (Millions)] ,",
                "\tBLANK()",
                ")"
              ]
            },
            {
              "name": "vs Plan",
              "expression": [
                "IF ",
                "(",
                "    SELECTEDMEASURE() = BLANK() || ",
                "    CALCULATE(SELECTEDMEASURE(),Comparison[Param] = \"Plan\") = BLANK(),",
                "        BLANK(),",
                "    SELECTEDMEASURE() - CALCULATE(SELECTEDMEASURE(),Comparison[Param] = \"Plan\")",
                ")"
              ]
            },
            {
              "name": "vs Plan %",
              "expression": [
                "var plan = CALCULATE(SELECTEDMEASURE(),Comparison[Param] = \"Plan\")",
                "var vsplan = CALCULATE(SELECTEDMEASURE(),Comparison[Param] = \"vs Plan\")",
                "return DIVIDE((vsplan- plan),plan,0)"
              ],
              "formatStringDefinition": {
                "expression": "\"0.0%\""
              }
            }
          ]
        },
        "columns": [
          {
            "name": "Param",
            "dataType": "string",
            "sourceColumn": "Name"
          }
        ],
        "partitions": [
          {
            "name": "CalculationGroup 1",
            "mode": "import",
            "source": {
              "type": "calculationGroup"
            }
          }
        ]
      },
      {
        "name": "Calendar",
        "dataCategory": "Time",
        "columns": [
          {
            "name": "CalendarDateKey",
            "dataType": "int64",
            "sourceColumn": "CalendarDateKey",
            "encodingHint": "value"
          },
          {
            "name": "CalendarDate",
            "dataType": "dateTime",
            "isKey": true,
            "sourceColumn": "CalendarDate",
            "formatString": "Short Date",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"DateTimeShortDatePattern\" />"
              }
            ]
          },
          {
            "name": "CalendarDateTime",
            "dataType": "dateTime",
            "sourceColumn": "CalendarDateTime"
          },
          {
            "name": "BusinessPeriod",
            "dataType": "int64",
            "sourceColumn": "BusinessPeriod"
          },
          {
            "name": "BusinessPeriodStartDateKey",
            "dataType": "int64",
            "sourceColumn": "BusinessPeriodStartDateKey"
          },
          {
            "name": "BusinessPeriodEndDateKey",
            "dataType": "int64",
            "sourceColumn": "BusinessPeriodEndDateKey"
          },
          {
            "name": "BusinessWeekOfYear",
            "dataType": "int64",
            "sourceColumn": "BusinessWeekOfYear"
          },
          {
            "name": "BusinessPeriodName",
            "dataType": "string",
            "sourceColumn": "BusinessPeriodName",
            "sortByColumn": "BusinessPeriod"
          },
          {
            "name": "BusinessQuarter",
            "dataType": "int64",
            "sourceColumn": "BusinessQuarter"
          },
          {
            "name": "BusinessYear",
            "dataType": "int64",
            "sourceColumn": "BusinessYear"
          },
          {
            "name": "BusinessQuarterStartDateKey",
            "dataType": "int64",
            "sourceColumn": "BusinessQuarterStartDateKey"
          },
          {
            "name": "BusinessQuarterEndDateKey",
            "dataType": "int64",
            "sourceColumn": "BusinessQuarterEndDateKey"
          },
          {
            "name": "BusinessYearStartDateKey",
            "dataType": "int64",
            "sourceColumn": "BusinessYearStartDateKey"
          },
          {
            "name": "BusinessYearEndDateKey",
            "dataType": "int64",
            "sourceColumn": "BusinessYearEndDateKey"
          },
          {
            "name": "FlagBusinessWeekStart",
            "dataType": "int64",
            "sourceColumn": "FlagBusinessWeekStart"
          },
          {
            "name": "FlagBusinessWeekEnd",
            "dataType": "int64",
            "sourceColumn": "FlagBusinessWeekEnd"
          },
          {
            "name": "FlagBusinessIsWeekend",
            "dataType": "int64",
            "sourceColumn": "FlagBusinessIsWeekend"
          },
          {
            "name": "SequenceDate",
            "dataType": "int64",
            "sourceColumn": "SequenceDate"
          },
          {
            "name": "SequenceWeek",
            "dataType": "int64",
            "sourceColumn": "SequenceWeek"
          },
          {
            "name": "SequenceBusinessPeriod",
            "dataType": "int64",
            "sourceColumn": "SequenceBusinessPeriod"
          },
          {
            "name": "BusinessWeekStartDateKey",
            "dataType": "int64",
            "sourceColumn": "BusinessWeekStartDateKey"
          },
          {
            "name": "SequenceBusinessQuarter",
            "dataType": "int64",
            "sourceColumn": "SequenceBusinessQuarter"
          },
          {
            "name": "BusinessWeekEndDateKey",
            "dataType": "int64",
            "sourceColumn": "BusinessWeekEndDateKey"
          },
          {
            "name": "BusinessDayInYear",
            "dataType": "int64",
            "sourceColumn": "BusinessDayInYear"
          },
          {
            "type": "calculated",
            "name": "LY Day Date",
            "dataType": "dateTime",
            "isDataTypeInferred": true,
            "expression": [
              " ",
              "VAR fiscaldayinyear = 'Calendar'[BusinessDayInYear]",
              "VAR LYfiscalyear = VALUE('Calendar'[BusinessYear]) - 1",
              "VAR tbl_lydaydate = FILTER(ALL('Calendar'), Calendar[BusinessYear] = LYfiscalyear && Calendar[BusinessDayInYear] = fiscaldayinyear)",
              "VAR lydaydate = IF(COUNTROWS(tbl_lydaydate) = 1, MAXX(tbl_lydaydate, [CalendarDate]), DATE(2099,12,31)) ",
              "--in order to make LY calculations work, need 53rd week to be a date with zero sales, can't be blank date, otherwise it will return total sales with no date",
              "",
              "RETURN",
              "lydaydate"
            ],
            "formatString": "Short Date",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"DateTimeShortDatePattern\" />"
              }
            ]
          },
          {
            "type": "calculated",
            "name": "LYDayDateKey",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE('Calendar'[CalendarDateKey],'Calendar'[CalendarDate],'Calendar'[LY Day Date])"
          },
          {
            "type": "calculated",
            "name": "BusinessPeriodEndDate",
            "dataType": "dateTime",
            "isDataTypeInferred": true,
            "expression": [
              "var Yr = LEFT('Calendar'[BusinessPeriodEndDateKey],4)",
              "var dt = RIGHT('Calendar'[BusinessPeriodEndDateKey],2)",
              "var mnth = LEFT(",
              "    RIGHT(",
              "        'Calendar'[BusinessPeriodEndDateKey],",
              "        LEN('Calendar'[BusinessPeriodEndDateKey])-4",
              "        ),",
              "        2)",
              "return  DATE(Yr,mnth,dt)"
            ],
            "formatString": "Short Date",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"DateTimeShortDatePattern\" />"
              }
            ]
          },
          {
            "type": "calculated",
            "name": "BusinessPeriodEndDayIndicator",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "IF('Calendar'[CalendarDate]=='Calendar'[BusinessPeriodEndDate],\"Y\",\"N\")"
          },
          {
            "type": "calculated",
            "name": "BusinessPeriodStartDate",
            "dataType": "dateTime",
            "isDataTypeInferred": true,
            "expression": [
              "var Yr = LEFT('Calendar'[BusinessPeriodStartDateKey],4)",
              "var dt = RIGHT('Calendar'[BusinessPeriodStartDateKey],2)",
              "var mnth = LEFT(",
              "    RIGHT(",
              "        'Calendar'[BusinessPeriodStartDateKey],",
              "        LEN('Calendar'[BusinessPeriodStartDateKey])-4",
              "        ),",
              "        2)",
              "return  DATE(Yr,mnth,dt)"
            ],
            "formatString": "Short Date",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"DateTimeShortDatePattern\" />"
              }
            ]
          },
          {
            "type": "calculated",
            "name": "LastWeekIndicator",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              " var PrevWeek = LOOKUPVALUE('Calendar'[SequenceDate],'Calendar'[CalendarDate],TODAY())-7",
              "var PrevBusinessWeekStartDateKey = LOOKUPVALUE('Calendar'[BusinessWeekStartDateKey],'Calendar'[SequenceDate],PrevWeek)",
              "var PrevBusinessWeekStartDaySeqNum = LOOKUPVALUE('Calendar'[SequenceDate],'Calendar'[CalendarDateKey],PrevBusinessWeekStartDateKey)",
              "var a = IF(AND('Calendar'[SequenceDate]>=PrevBusinessWeekStartDaySeqNum,'Calendar'[SequenceDate]<PrevBusinessWeekStartDaySeqNum+7),\"Y\",\"N\")",
              "return a"
            ]
          },
          {
            "type": "calculated",
            "name": "LLY Day Date",
            "dataType": "dateTime",
            "isDataTypeInferred": true,
            "expression": [
              " ",
              "VAR fiscaldayinyear = 'Calendar'[BusinessDayInYear]",
              "VAR LYfiscalyear = VALUE('Calendar'[BusinessYear]) - 2",
              "VAR tbl_lydaydate = FILTER(ALL('Calendar'), Calendar[BusinessYear] = LYfiscalyear && Calendar[BusinessDayInYear] = fiscaldayinyear)",
              "VAR lydaydate = IF(COUNTROWS(tbl_lydaydate) = 1, MAXX(tbl_lydaydate, [CalendarDate]), DATE(2099,12,31)) ",
              "--in order to make LY calculations work, need 53rd week to be a date with zero sales, can't be blank date, otherwise it will return total sales with no date",
              "",
              "RETURN",
              "lydaydate"
            ]
          },
          {
            "type": "calculated",
            "name": "LLYDayDateKey",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE('Calendar'[CalendarDateKey],'Calendar'[CalendarDate],'Calendar'[LLY Day Date])"
          },
          {
            "type": "calculated",
            "name": "BusinessWeekEndDayIndicator",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "IF('Calendar'[CalendarDateKey]='Calendar'[BusinessWeekEndDateKey],\"Y\",\"N\")"
          },
          {
            "type": "calculated",
            "name": "BusinessWeekEndDate",
            "dataType": "dateTime",
            "isDataTypeInferred": true,
            "expression": [
              "var Yr = LEFT('Calendar'[BusinessWeekEndDateKey],4)",
              "var dt = RIGHT('Calendar'[BusinessWeekEndDateKey],2)",
              "var mnth = LEFT(",
              "    RIGHT(",
              "        'Calendar'[BusinessWeekEndDateKey],",
              "        LEN('Calendar'[BusinessWeekEndDateKey])-4",
              "        ),",
              "        2)",
              "return  DATE(Yr,mnth,dt)"
            ]
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = SynapseDW,",
                "    Inventory_vwDimCalendar = Source{[Schema=\"Inventory\",Item=\"vwDimCalendar\"]}[Data]",
                "in",
                "    Inventory_vwDimCalendar"
              ]
            }
          }
        ],
        "measures": [
          {
            "name": "SelectedDate",
            "expression": [
              "",
              " ",
              "    var _defaultValue   = CALCULATE(max('Calendar'[CalendarDate]), ALLSELECTED('Calendar'))",
              " ",
              "    var _returnValue    = SELECTEDVALUE('Calendar'[CalendarDate], _defaultValue)",
              " ",
              "    return",
              "         _returnValue"
            ]
          },
          {
            "name": "SelectedDateKey",
            "expression": [
              "",
              " ",
              "    var _defaultValue   = CALCULATE(max('Calendar'[CalendarDateKey]), ALLSELECTED('Calendar'))",
              " ",
              "    var _returnValue    = SELECTEDVALUE('Calendar'[CalendarDateKey], _defaultValue)",
              " ",
              "    return",
              "        value(_returnValue)"
            ]
          },
          {
            "name": "_BusinessPeriod",
            "expression": " max('Calendar'[BusinessPeriod])",
            "formatString": "#,0"
          },
          {
            "name": "_BusinessPeriodEndDateKey",
            "expression": " max('Calendar'[BusinessPeriodEndDateKey])"
          },
          {
            "name": "_BusinessWeekStartDateKey",
            "expression": " min('Calendar'[BusinessWeekStartDateKey])"
          },
          {
            "name": "_SequenceBusinessPeriod",
            "expression": " max('Calendar'[SequenceBusinessPeriod])",
            "formatString": "#,0"
          },
          {
            "name": "SelectedSequenceBusinessPeriod",
            "expression": " [_SequenceBusinessPeriod]"
          },
          {
            "name": "_SequenceBusinessQuarter",
            "expression": [
              " max('Calendar'[SequenceBusinessQuarter])",
              ""
            ],
            "formatString": "#,0"
          },
          {
            "name": "SelectedSequenceBusinessQuarter",
            "expression": " [_SequenceBusinessQuarter]",
            "formatString": "#,0"
          },
          {
            "name": "_SequenceWeek",
            "expression": [
              " max('Calendar'[SequenceWeek])",
              ""
            ],
            "formatString": "#,0"
          },
          {
            "name": "SelectedSequenceWeek",
            "expression": " [_SequenceWeek]",
            "formatString": "#,0"
          },
          {
            "name": "SelectedBusinessWeekStartDateKey",
            "expression": " [_BusinessWeekStartDateKey]"
          },
          {
            "name": "SelectedBusinessPeriod",
            "expression": " [_BusinessPeriod]"
          },
          {
            "name": "SelectedBusinessPeriodStartDateKey",
            "expression": " [WP Disposed SKU Count]"
          },
          {
            "name": "SelectedBusinessPeriodEndDateKey",
            "expression": " [_BusinessPeriodEndDateKey]"
          },
          {
            "name": "_BusinessWeekOfYear",
            "expression": "max('Calendar'[BusinessWeekOfYear])",
            "formatString": "#,0"
          },
          {
            "name": "SelectedBusinessWeekOfYear",
            "expression": "[_BusinessWeekOfYear]",
            "formatString": "0"
          },
          {
            "name": "LPE",
            "expression": [
              "",
              "var LBP_sequence = ([SelectedSequenceBusinessPeriod] - 1)",
              "",
              "return",
              "CALCULATE(",
              "\tmax('Calendar'[BusinessPeriodEndDateKey])",
              "    , FILTER(ALL('Calendar'), 'Calendar'[SequenceBusinessPeriod] = LBP_sequence)",
              ")"
            ]
          },
          {
            "name": "LYE",
            "expression": [
              "",
              "var LYE_sequence = ([SelectedSequenceBusinessYear] - 1)",
              "",
              "return",
              "CALCULATE(",
              "\tmax('Calendar'[CalendarDateKey])",
              "    , FILTER(ALL('Calendar'), 'Calendar'[SelectedSequenceBusinessYear] = LYE_sequence",
              "                                && 'Calendar'[FlagBusinessWeekEnd] = 1",
              "    )",
              ")"
            ]
          },
          {
            "name": "LY",
            "expression": [
              " ([SelectedSequenceBusinessYear] - 1)",
              "",
              "/*var W_sequence = ([SelectedSequenceWeek] - 1)",
              "",
              "return",
              "CALCULATE(",
              "\tmax('Calendar'[CalendarDateKey])",
              "    , FILTER(ALL('Calendar'),       'Calendar'[SelectedSequenceBusinessYear]    = LY_sequence",
              "                                &&  'Calendar'[SelectedSequenceWeek]            = W_sequence",
              "                                &&  'Calendar'[FlagBusinessWeekEnd]             = 1",
              "    )",
              ")*/"
            ],
            "formatString": "0"
          },
          {
            "name": "LQ",
            "expression": [
              "",
              "",
              "var LQ_sequence = [SelectedSequenceBusinessQuarter] - 1",
              "var BP_sequence = [SelectedSequenceBusinessPeriod]",
              "",
              "return",
              "CALCULATE(",
              "\tmax('Calendar'[CalendarDateKey])",
              "   \t , FILTER(ALL('Calendar'),       'Calendar'[SelectedSequenceBusinessQuarter]    =   LQ_sequence",
              "                                \t\t&&  'Calendar'[SelectedSequenceBusinessPeriod]  =   BP_sequence",
              "                                \t\t&&  'Calendar'[FlagBusinessWeekEnd]     =   1",
              "    )",
              ")"
            ],
            "formatString": "0"
          },
          {
            "name": "YE",
            "expression": [
              "",
              "",
              "var YE_sequence = [SelectedSequenceBusinessYear]",
              "",
              "return",
              "CALCULATE(",
              "\tmax('Calendar'[CalendarDateKey])",
              "    , FILTER(ALL('Calendar'),       'Calendar'[SelectedSequenceBusinessYear]    = YE_sequence",
              "                                &&  'Calendar'[FlagBusinessWeekEnd]             = 1",
              "    )",
              ")"
            ]
          },
          {
            "name": "NY",
            "expression": [
              "",
              "",
              "var NY_sequence = [SelectedSequenceBusinessYear] + 1",
              "var BP_sequence = [SelectedSequenceBusinessPeriod]",
              "",
              "return",
              "CALCULATE(",
              "\tmax('Calendar'[CalendarDateKey])",
              "    , FILTER(ALL('Calendar'),       'Calendar'[SelectedSequenceBusinessYear]    =   NY_sequence",
              "                                &&  'Calendar'[SelectedSequenceBusinessPeriod]  =   BP_sequence",
              "                                &&  'Calendar'[FlagBusinessWeekEnd]     =   1",
              "    )",
              ")"
            ],
            "formatString": "#,0"
          },
          {
            "name": "NNY",
            "expression": [
              "",
              "",
              "var NNY_sequence = [SelectedSequenceBusinessYear] + 2",
              "var BP_sequence = [SelectedSequenceBusinessPeriod]",
              "",
              "return",
              "CALCULATE(",
              "\tmax('Calendar'[CalendarDateKey])",
              "    , FILTER(ALL('Calendar'),       'Calendar'[SelectedSequenceBusinessYear]    =   NNY_sequence",
              "                                &&  'Calendar'[SelectedSequenceBusinessPeriod]  =   BP_sequence",
              "                                &&  'Calendar'[FlagBusinessWeekEnd]     =   1",
              "    )",
              ")"
            ],
            "formatString": "#,0"
          },
          {
            "name": "NYE",
            "expression": [
              "",
              "",
              "var NYE_sequence = [SelectedSequenceBusinessYear] + 1",
              "",
              "return",
              "CALCULATE(",
              "\tmax('Calendar'[CalendarDateKey])",
              "    , FILTER(ALL('Calendar'),       'Calendar'[SelectedSequenceBusinessYear]  =   NYE_sequence",
              "                                &&  'Calendar'[FlagBusinessWeekEnd]     =   1",
              "    )",
              ")"
            ],
            "formatString": "#,0"
          },
          {
            "name": "NNYE",
            "expression": [
              "",
              "",
              "var NNYE_sequence = [SelectedSequenceBusinessYear] + 2",
              "",
              "return",
              "CALCULATE(",
              "\tmax('Calendar'[CalendarDateKey])",
              "    , FILTER(ALL('Calendar'),       'Calendar'[SelectedSequenceBusinessYear]  =   NNYE_sequence",
              "                                &&  'Calendar'[FlagBusinessWeekEnd]     =   1",
              "    )",
              ")"
            ],
            "formatString": "#,0"
          },
          {
            "name": "LWE",
            "expression": [
              "",
              "var LW_sequence = ([SelectedSequenceWeek] - 1)",
              "",
              "return",
              "CALCULATE(",
              "\tmax('Calendar'[BusinessPeriodEndDateKey])",
              "    , FILTER(ALL('Calendar'), 'Calendar'[SequenceBusinessPeriod] = LW_sequence",
              "                                && 'Calendar'[FlagBusinessWeekEnd] = 1",
              "    )",
              ")"
            ]
          },
          {
            "name": "LP",
            "expression": [
              "",
              "var BP_sequence = [SelectedSequenceBusinessPeriod] - 1",
              "",
              "return",
              "CALCULATE(",
              "\tmax('Calendar'[CalendarDateKey])",
              "    , FILTER(ALL('Calendar'),       'Calendar'[SelectedSequenceBusinessPeriod]  =   BP_sequence",
              "                                &&  'Calendar'[FlagBusinessWeekEnd]     =   1",
              "    )",
              ")"
            ],
            "formatString": "0"
          },
          {
            "name": "LQE",
            "expression": [
              "",
              "var LQ_sequence = ([SelectedSequenceBusinessQuarter] - 1)",
              "",
              "return",
              "CALCULATE(",
              "\tmax('Calendar'[CalendarDateKey])",
              "    , FILTER(ALL('Calendar'), 'Calendar'[SelectedSequenceBusinessQuarter] = LQ_sequence",
              "                                && 'Calendar'[FlagBusinessWeekEnd] = 1",
              "    )",
              ")"
            ]
          },
          {
            "name": "SelectedSequenceBusinessYear",
            "expression": "max('Calendar'[BusinessYear])",
            "formatString": "#,0"
          },
          {
            "name": "LastDateWithData",
            "expression": [
              "",
              "CALCULATE(",
              "MAX(",
              "MAX(FactSales[AsOfDateKey]),",
              "MAX(FactFinishedGoodsInventory[AsOfDateKey])",
              "),",
              "REMOVEFILTERS('DimItem'),",
              "REMOVEFILTERS(DimFacility),",
              "REMOVEFILTERS(DimBusiness)",
              ")"
            ],
            "isHidden": true
          },
          {
            "name": "MaxSequentialNumber",
            "expression": [
              "",
              "LOOKUPVALUE('Calendar'[SequenceDate], 'Calendar'[CalendarDateKey], [LastDateWithData])"
            ],
            "isHidden": true
          },
          {
            "name": "ShowValueForDates",
            "expression": [
              "",
              "VAR LastDateWIthData = ",
              "CALCULATE(MAX(FactSales[AsOfDateKey]),",
              "REMOVEFILTERS()",
              ")",
              "VAR FirstDateVisible = ",
              "MIN('Calendar'[CalendarDateKey])",
              "VAR RESULT =",
              "FirstDateVisible <= LastDateWIthData",
              "RETURN",
              "RESULT"
            ],
            "isHidden": true
          },
          {
            "name": "LY_old",
            "expression": [
              "",
              "var LY_sequence = ([SelectedSequenceBusinessYear] - 1)",
              "",
              "var W_sequence = ([SelectedSequenceWeek] - 1)",
              "",
              "return",
              "CALCULATE(",
              "\tmax('Calendar'[CalendarDateKey])",
              "    , FILTER(ALL('Calendar'),       'Calendar'[SelectedSequenceBusinessYear]    = LY_sequence",
              "                                &&  'Calendar'[SelectedSequenceWeek]            = W_sequence",
              "                                &&  'Calendar'[FlagBusinessWeekEnd]             = 1",
              "    )",
              ")"
            ]
          }
        ],
        "hierarchies": [
          {
            "name": "Fiscal Calendar",
            "levels": [
              {
                "name": "BusinessYear",
                "ordinal": 0,
                "column": "BusinessYear"
              },
              {
                "name": "BusinessQuarter",
                "ordinal": 1,
                "column": "BusinessQuarter"
              },
              {
                "name": "BusinessPeriodName",
                "ordinal": 2,
                "column": "BusinessPeriodName"
              },
              {
                "name": "CalendarDate",
                "ordinal": 4,
                "column": "CalendarDate"
              },
              {
                "name": "BusinessWeekEndDate",
                "ordinal": 3,
                "column": "BusinessWeekEndDate"
              }
            ]
          }
        ]
      },
      {
        "name": "DimComparisons",
        "columns": [
          {
            "name": "ComparisonKey",
            "dataType": "string",
            "isHidden": true,
            "sourceColumn": "ComparisonKey",
            "isAvailableInMdx": false
          },
          {
            "name": "ComparisonName",
            "dataType": "string",
            "sourceColumn": "ComparisonName"
          },
          {
            "name": "StartCalendarDateKey",
            "dataType": "int64",
            "sourceColumn": "StartCalendarDateKey"
          },
          {
            "name": "EndCalendarDateKey",
            "dataType": "int64",
            "sourceColumn": "EndCalendarDateKey"
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = #\"SynapseDW\",",
                "    Inventory_vwDimInventoryInitiative = Source{[Schema=\"Inventory\",Item=\"vwDimInventoryInitiative\"]}[Data]",
                "in",
                "    Inventory_vwDimInventoryInitiative"
              ]
            }
          }
        ],
        "measures": [
          {
            "name": "ComparisonStartDateKey",
            "expression": [
              "",
              " ",
              "    var _returnValue    = SELECTEDVALUE('DimComparisons'[StartCalendarDateKey], BLANK())",
              " ",
              "    return",
              "        value(_returnValue)"
            ]
          },
          {
            "name": "ComparisonEndDateKey",
            "expression": [
              "",
              " ",
              "    var _returnValue    = SELECTEDVALUE('DimComparisons'[EndCalendarDateKey], Blank())",
              " ",
              "    return",
              "        value(_returnValue)"
            ]
          }
        ]
      },
      {
        "name": "DimAgingBuckets",
        "columns": [
          {
            "name": "AgingBucketKey",
            "dataType": "int64",
            "sourceColumn": "AgingBucketKey",
            "isAvailableInMdx": false
          },
          {
            "name": "AgingBucketName",
            "dataType": "string",
            "sourceColumn": "AgingBucketName"
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = #\"SynapseDW\",",
                "    Inventory_vwDimAgingBuckets = Source{[Schema=\"Inventory\",Item=\"vwDimAgingBuckets\"]}[Data]",
                "in",
                "    Inventory_vwDimAgingBuckets "
              ]
            }
          }
        ]
      },
      {
        "name": "DimBusiness",
        "columns": [
          {
            "name": "BusinessUnitKey",
            "dataType": "string",
            "isUnique": true,
            "sourceColumn": "BusinessUnitKey",
            "isAvailableInMdx": false
          },
          {
            "name": "BusinessSegHierarchyId",
            "dataType": "int64",
            "sourceColumn": "BusinessSegHierarchyId",
            "isAvailableInMdx": false
          },
          {
            "name": "BusinessGroup",
            "dataType": "string",
            "sourceColumn": "BusinessGroup"
          },
          {
            "name": "DivisionGroup",
            "dataType": "string",
            "sourceColumn": "DivisionGroup"
          },
          {
            "name": "Division",
            "dataType": "string",
            "sourceColumn": "Division"
          },
          {
            "name": "BusinessUnitDesc",
            "dataType": "string",
            "sourceColumn": "BusinessUnitDesc"
          },
          {
            "name": "BusinessSegDesc",
            "dataType": "string",
            "sourceColumn": "BusinessSegDesc"
          },
          {
            "name": "SBUAltBusGroupingDesc",
            "dataType": "string",
            "sourceColumn": "SBUAltBusGroupingDesc"
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = #\"SynapseDW\",",
                "    Inventory_vwDimBusiness = Source{[Schema=\"Inventory\",Item=\"vwDimBusiness\"]}[Data],",
                "    #\"Removed Columns\" = Table.RemoveColumns(Inventory_vwDimBusiness,{\"ReportingSortOrder\", \"BusinessSegOrder\", \"SBUDivisionGroupSort\", \"SBUDivisionSubGroupSort\", \"BusinessSegGroupSort\", \"SBUAltBusGroupingSort\", \"Currency\", \"Operator\"}),",
                "    #\"Removed Duplicates\" = Table.Distinct(#\"Removed Columns\")",
                "in",
                "    #\"Removed Duplicates\""
              ]
            }
          }
        ],
        "hierarchies": [
          {
            "name": "Business Group Hierarchy",
            "levels": [
              {
                "name": "BusinessGroup",
                "ordinal": 0,
                "column": "BusinessGroup"
              },
              {
                "name": "DivisionGroup",
                "ordinal": 1,
                "column": "DivisionGroup"
              },
              {
                "name": "Division",
                "ordinal": 2,
                "column": "Division"
              }
            ]
          }
        ]
      },
      {
        "name": "DimCustomer",
        "columns": [
          {
            "name": "CustomerAccountKey",
            "dataType": "string",
            "sourceColumn": "CustomerAccountKey",
            "isAvailableInMdx": false
          },
          {
            "name": "ChannelGroup",
            "dataType": "string",
            "sourceColumn": "ChannelGroup"
          },
          {
            "name": "ChannelOfTrade",
            "dataType": "string",
            "sourceColumn": "ChannelOfTrade"
          },
          {
            "name": "PlanningCustomerGroup",
            "dataType": "string",
            "sourceColumn": "PlanningCustomerGroup"
          },
          {
            "name": "TsDivCde",
            "dataType": "string",
            "sourceColumn": "TsDivCde"
          },
          {
            "name": "SoldTo",
            "dataType": "string",
            "sourceColumn": "SoldTo"
          },
          {
            "name": "ChainAccount",
            "dataType": "string",
            "sourceColumn": "ChainAccount"
          },
          {
            "name": "CustomerAccount",
            "dataType": "string",
            "sourceColumn": "CustomerAccount"
          },
          {
            "name": "XrfAccount",
            "dataType": "string",
            "sourceColumn": "XrfAccount"
          },
          {
            "name": "CustSeqNbr",
            "dataType": "double",
            "sourceColumn": "CustSeqNbr",
            "isAvailableInMdx": false
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = SynapseDW,",
                "    Inventory_vwDimCustomer = Source{[Schema=\"Inventory\",Item=\"vwDimCustomer\"]}[Data]",
                "in",
                "    Inventory_vwDimCustomer"
              ]
            }
          }
        ]
      },
      {
        "name": "DimFacility",
        "columns": [
          {
            "name": "FacilityKey",
            "dataType": "string",
            "sourceColumn": "FacilityKey",
            "isAvailableInMdx": false
          },
          {
            "name": "FacilityName",
            "dataType": "string",
            "sourceColumn": "FacilityName"
          },
          {
            "name": "FacilityId",
            "dataType": "double",
            "sourceColumn": "FacilityId",
            "isAvailableInMdx": false
          },
          {
            "name": "FacilityType",
            "dataType": "string",
            "sourceColumn": "FacilityType"
          },
          {
            "name": "FacilityCode",
            "dataType": "string",
            "sourceColumn": "FacilityCode"
          },
          {
            "name": "FacilityCity",
            "dataType": "string",
            "sourceColumn": "FacilityCity"
          },
          {
            "name": "FacilityCountryId",
            "dataType": "double",
            "sourceColumn": "FacilityCountryId"
          },
          {
            "name": "RegionId",
            "dataType": "double",
            "sourceColumn": "RegionId"
          },
          {
            "name": "RegionName",
            "dataType": "string",
            "sourceColumn": "RegionName"
          },
          {
            "name": "SAPPlantCode",
            "dataType": "string",
            "sourceColumn": "SAPPlantCode"
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = #\"SynapseDW\",",
                "    Inventory_vwDimFacility = Source{[Schema=\"Inventory\",Item=\"vwDimFacility\"]}[Data]",
                "in",
                "    Inventory_vwDimFacility"
              ]
            }
          }
        ],
        "hierarchies": [
          {
            "name": "Facility",
            "levels": [
              {
                "name": "FacilityType",
                "ordinal": 0,
                "column": "FacilityType"
              },
              {
                "name": "FacilityName",
                "ordinal": 1,
                "column": "FacilityName"
              }
            ]
          }
        ]
      },
      {
        "name": "DimFinancialMeasure",
        "columns": [
          {
            "name": "FinancialMeasureKey",
            "dataType": "string",
            "sourceColumn": "FinancialMeasureKey",
            "isAvailableInMdx": false
          },
          {
            "name": "FinancialAccountKey",
            "dataType": "string",
            "sourceColumn": "FinancialAccountKey",
            "isAvailableInMdx": false
          },
          {
            "name": "FinancialParentAccountKey",
            "dataType": "double",
            "sourceColumn": "FinancialParentAccountKey",
            "isAvailableInMdx": false
          },
          {
            "name": "ApplicationName",
            "dataType": "string",
            "sourceColumn": "ApplicationName"
          },
          {
            "name": "DimensionName",
            "dataType": "string",
            "sourceColumn": "DimensionName"
          },
          {
            "name": "MeasureNameID",
            "dataType": "double",
            "sourceColumn": "MeasureNameID"
          },
          {
            "name": "MeasureReference",
            "dataType": "string",
            "sourceColumn": "MeasureReference"
          },
          {
            "name": "AccountDescription",
            "dataType": "string",
            "sourceColumn": "AccountDescription"
          },
          {
            "name": "AccountDescriptionShort",
            "dataType": "string",
            "sourceColumn": "AccountDescriptionShort"
          },
          {
            "name": "AccountType",
            "dataType": "string",
            "sourceColumn": "AccountType"
          },
          {
            "name": "ReportOrder",
            "dataType": "double",
            "sourceColumn": "ReportOrder"
          },
          {
            "type": "calculated",
            "name": "IsGrossSales",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "var a = CALCULATETABLE(SELECTCOLUMNS(DimSalesAccount,\"A\",DimSalesAccount[AccountKey]),DimSalesAccount[GrossSalesInd]=\"1\")",
              "return if(DimFinancialMeasure[FinancialAccountKey] IN  a,1,0)",
              "",
              "/*if(DimFinancialMeasure[FinancialAccountKey] IN {22,2210,2220,2230,2240,2250},1,0)*/"
            ]
          },
          {
            "type": "calculated",
            "name": "IsAdjToGrossSales",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "var a = CALCULATETABLE(SELECTCOLUMNS(DimSalesAccount,\"A\",DimSalesAccount[AccountKey]),DimSalesAccount[AdjToGrossSalesInd]=\"1\")",
              "return if(DimFinancialMeasure[FinancialAccountKey] IN  a,1,0)",
              "",
              "/*if(DimFinancialMeasure[FinancialAccountKey] IN {23,24,25,26,2310},1,0)*/"
            ]
          },
          {
            "type": "calculated",
            "name": "IsIntercompanyNetSales",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "var a = CALCULATETABLE(SELECTCOLUMNS(DimSalesAccount,\"A\",DimSalesAccount[AccountKey]),",
              "DimSalesAccount[IntercompanyNetSalesInd]=\"1\")",
              "return if(DimFinancialMeasure[FinancialAccountKey] IN  a,1,0)",
              "",
              "/*if(DimFinancialMeasure[FinancialAccountKey] IN {35},1,0)*/"
            ]
          },
          {
            "type": "calculated",
            "name": "IsPreincentiveSales",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "var a = CALCULATETABLE(SELECTCOLUMNS(DimSalesAccount,\"A\",DimSalesAccount[AccountKey]),",
              "DimSalesAccount[PreIncentiveSalesInd]=\"1\")",
              "return if(DimFinancialMeasure[FinancialAccountKey] IN  a,1,0)",
              "",
              "/*if(DimFinancialMeasure[FinancialAccountKey] IN {12130,20,12220,23,24,25,26,2310,22,2210,2220,2230,2240,2250},1,0)*/"
            ]
          },
          {
            "type": "calculated",
            "name": "IsPreIncentiveCOGS",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "var a = CALCULATETABLE(SELECTCOLUMNS(DimSalesAccount,\"A\",DimSalesAccount[AccountKey]),DimSalesAccount[PreIncentiveCOGSInd]=\"1\")",
              "return if(DimFinancialMeasure[FinancialAccountKey] IN  a,1,0)",
              "",
              "/*if(DimFinancialMeasure[FinancialAccountKey] IN {12080,38,12140,40,41,43,44,47},1,0)*/"
            ]
          },
          {
            "type": "calculated",
            "name": "IsSalesIncentiveCost",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "var a = CALCULATETABLE(SELECTCOLUMNS(DimSalesAccount,\"A\",DimSalesAccount[AccountKey]),DimSalesAccount[SalesIncentiveCostInd]=\"1\")",
              "return if(DimFinancialMeasure[FinancialAccountKey] IN  a,1,0)",
              "",
              "/*if(DimFinancialMeasure[FinancialAccountKey] IN {45},1,0)*/"
            ]
          },
          {
            "type": "calculated",
            "name": "IsIntercompanySCOGS",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "var a = CALCULATETABLE(SELECTCOLUMNS(DimSalesAccount,\"A\",DimSalesAccount[AccountKey]),DimSalesAccount[IntercompanySCOGSInd]=\"1\")",
              "return if(DimFinancialMeasure[FinancialAccountKey] IN  a,1,0)",
              "/*if(DimFinancialMeasure[FinancialAccountKey] IN {39},1,0)*/"
            ]
          },
          {
            "type": "calculated",
            "name": "IsSalesIncentive",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "var a = CALCULATETABLE(SELECTCOLUMNS(DimSalesAccount,\"A\",DimSalesAccount[AccountKey]),",
              "DimSalesAccount[SalesIncentivesInd]=\"1\")",
              "return if(DimFinancialMeasure[FinancialAccountKey] IN  a,1,0)",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "IsRoyalityIncome",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "var a = CALCULATETABLE(SELECTCOLUMNS(DimSalesAccount,\"A\",DimSalesAccount[AccountKey]),",
              "DimSalesAccount[RoyaltyIncomdeInd]=\"1\")",
              "return if(DimFinancialMeasure[FinancialAccountKey] IN  a,1,0)",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "IsNetSales",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "var a = CALCULATETABLE(SELECTCOLUMNS(DimSalesAccount,\"A\",DimSalesAccount[AccountKey]),",
              "DimSalesAccount[NetSalesInd]=\"1\")",
              "return if(DimFinancialMeasure[FinancialAccountKey] IN  a,1,0)",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "IsNetOSCOGS",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "var a = CALCULATETABLE(SELECTCOLUMNS(DimSalesAccount,\"A\",DimSalesAccount[AccountKey]),",
              "DimSalesAccount[NetOSCOGSInd]=\"1\")",
              "return if(DimFinancialMeasure[FinancialAccountKey] IN  a,1,0)",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "IsSCOGS",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "var a = CALCULATETABLE(SELECTCOLUMNS(DimSalesAccount,\"A\",DimSalesAccount[AccountKey]),DimSalesAccount[SCOGSInd]=\"1\")",
              "return if(DimFinancialMeasure[FinancialAccountKey] IN  a,1,0)",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "IsStandardGM_Add",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "var a = CALCULATETABLE(SELECTCOLUMNS(DimSalesAccount,\"A\",DimSalesAccount[AccountKey]),DimSalesAccount[StandardGMInd]=\"1\")",
              "return if(DimFinancialMeasure[FinancialAccountKey] IN  a,1,0)",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "IsStandardGM_Subtract",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "var a = CALCULATETABLE(SELECTCOLUMNS(DimSalesAccount,\"A\",DimSalesAccount[AccountKey]),DimSalesAccount[StandardGMInd]=\"-1\")",
              "return if(DimFinancialMeasure[FinancialAccountKey] IN  a,1,0)",
              ""
            ]
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = #\"SynapseDW\",",
                "    Inventory_vwDimFinancialMeasure = Source{[Schema=\"Inventory\",Item=\"vwDimFinancialMeasure\"]}[Data]",
                "in",
                "    Inventory_vwDimFinancialMeasure"
              ]
            }
          }
        ]
      },
      {
        "name": "DimFinancialPlanType",
        "columns": [
          {
            "name": "FinancialPlanTypeKey",
            "dataType": "string",
            "sourceColumn": "FinancialPlanTypeKey",
            "isAvailableInMdx": false
          },
          {
            "name": "FinancialPlanTypeId",
            "dataType": "int64",
            "sourceColumn": "FinancialPlanTypeId",
            "isAvailableInMdx": false
          },
          {
            "name": "PlanType",
            "dataType": "string",
            "sourceColumn": "PlanType"
          },
          {
            "name": "CurrentPlanIndicator",
            "dataType": "string",
            "sourceColumn": "CurrentPlanIndicator"
          },
          {
            "name": "DraftPlanIndicator",
            "dataType": "string",
            "sourceColumn": "DraftPlanIndicator"
          },
          {
            "name": "PriorPlanIndicator",
            "dataType": "string",
            "sourceColumn": "PriorPlanIndicator"
          },
          {
            "name": "PlanTypeDescription",
            "dataType": "string",
            "sourceColumn": "PlanTypeDescription"
          },
          {
            "name": "ParentPlanTypeDescription",
            "dataType": "string",
            "sourceColumn": "ParentPlanTypeDescription"
          },
          {
            "name": "PlanTypeSortOrder",
            "dataType": "int64",
            "sourceColumn": "PlanTypeSortOrder"
          },
          {
            "name": "ParentPlanTypeSortOrder",
            "dataType": "int64",
            "sourceColumn": "ParentPlanTypeSortOrder"
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = #\"SynapseDW\",",
                "    Inventory_vwDimFinancialPlanType = Source{[Schema=\"Inventory\",Item=\"vwDimFinancialPlanType\"]}[Data]",
                "in",
                "    Inventory_vwDimFinancialPlanType"
              ]
            }
          }
        ]
      },
      {
        "name": "DimShipperFlag",
        "columns": [
          {
            "name": "ShipperFlagKey",
            "dataType": "string",
            "isHidden": true,
            "sourceColumn": "ShipperFlagKey",
            "isAvailableInMdx": false
          },
          {
            "name": "ShipperFlag",
            "dataType": "string",
            "sourceColumn": "ShipperFlag"
          },
          {
            "name": "Description",
            "dataType": "string",
            "sourceColumn": "Description"
          },
          {
            "name": "Comments",
            "dataType": "string",
            "sourceColumn": "Comments"
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = #\"SynapseDW\",",
                "    Inventory_vwDimShipperFlag = Source{[Schema=\"Inventory\",Item=\"vwDimShipperFlag\"]}[Data]",
                "in",
                "    Inventory_vwDimShipperFlag"
              ]
            }
          }
        ]
      },
      {
        "name": "FactGoalsSkuCount",
        "columns": [
          {
            "name": "GoalDateKey",
            "dataType": "int64",
            "sourceColumn": "GoalDateKey",
            "isAvailableInMdx": false
          },
          {
            "name": "SkuCountTarget",
            "dataType": "int64",
            "isHidden": true,
            "sourceColumn": "SkuCountTarget",
            "encodingHint": "value"
          },
          {
            "name": "InventoryTurnsTarget",
            "dataType": "double",
            "isHidden": true,
            "sourceColumn": "InventoryTurnsTarget",
            "encodingHint": "value"
          },
          {
            "name": "BusinessUnitKey",
            "dataType": "string",
            "isHidden": true,
            "sourceColumn": "BusinessUnitKey",
            "isAvailableInMdx": false
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = #\"SynapseDW\",",
                "    Inventory_vwDimSKUCountGoals = Source{[Schema=\"Inventory\",Item=\"vwDimSKUCountGoals\"]}[Data]",
                "in",
                "    Inventory_vwDimSKUCountGoals"
              ]
            }
          }
        ],
        "measures": [
          {
            "name": "_Sku_Count_Target",
            "expression": [
              " sum(FactGoalsSkuCount[SkuCountTarget])",
              "",
              ""
            ],
            "formatString": "#,0",
            "isHidden": true
          },
          {
            "name": "_Average_Inventory_Turns_Target",
            "expression": " AVERAGE(FactGoalsSkuCount[InventoryTurnsTarget])",
            "formatString": "#,0.00",
            "isHidden": true
          },
          {
            "name": "SKU Count Target",
            "expression": [
              "",
              "CALCULATE(",
              "    [_Sku_Count_Target]",
              "    , 'Comparison'[Param] = \"Current\"",
              ")"
            ],
            "formatString": "#,0"
          },
          {
            "name": "Inventory Turns Target",
            "expression": [
              "",
              "CALCULATE(",
              "    [_Average_Inventory_Turns_Target]",
              "    , 'Comparison'[Param] = \"Current\"",
              ")"
            ],
            "formatString": "0.00"
          },
          {
            "name": "SKU Count Target YE",
            "expression": [
              "",
              "CALCULATE(",
              "    [_Sku_Count_Target]",
              "    , 'Comparison'[Param] = \"YE\"",
              ")"
            ],
            "formatString": "#,0"
          },
          {
            "name": "SKU Count Target NY",
            "expression": [
              "",
              "CALCULATE(",
              "    [_Sku_Count_Target]",
              "    , 'Comparison'[Param] = \"NY\"",
              ")"
            ],
            "formatString": "#,0"
          },
          {
            "name": "Inventory Turns Target YE",
            "expression": [
              "",
              "CALCULATE(",
              "    [_Average_Inventory_Turns_Target]",
              "    , 'Comparison'[Param] = \"YE\"",
              ")"
            ],
            "formatString": "#,0"
          },
          {
            "name": "Inventory Turns Target NY",
            "expression": [
              "",
              "CALCULATE(",
              "    [_Average_Inventory_Turns_Target]",
              "    , 'Comparison'[Param] = \"NY\"",
              ")"
            ],
            "formatString": "0.00"
          }
        ]
      },
      {
        "name": "FactSelfReportedKPI",
        "columns": [
          {
            "name": "AsofDateKey",
            "dataType": "double",
            "sourceColumn": "AsOfDateKey"
          },
          {
            "name": "ItemKey",
            "dataType": "string",
            "sourceColumn": "ItemKey",
            "isAvailableInMdx": false
          },
          {
            "name": "FacilityKey",
            "dataType": "string",
            "sourceColumn": "FacilityKey",
            "isAvailableInMdx": false
          },
          {
            "name": "BusinessUnitKey",
            "dataType": "string",
            "sourceColumn": "BusinessUnitKey",
            "isAvailableInMdx": false
          },
          {
            "name": "SKUCount",
            "dataType": "double",
            "sourceColumn": "SKUCount",
            "encodingHint": "value"
          },
          {
            "name": "BusinessYear",
            "dataType": "int64",
            "sourceColumn": "BusinessYear"
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = #\"SynapseDW\",",
                "    Inventory_vwDimInventorySelfReportedKPIs = Source{[Schema=\"Inventory\",Item=\"vwDimInventorySelfReportedKPIs\"]}[Data]",
                "in",
                "    Inventory_vwDimInventorySelfReportedKPIs"
              ]
            }
          }
        ],
        "measures": [
          {
            "name": "_SRE_SKU_Count",
            "expression": [
              " sum('FactSelfReportedKPI'[SKUCount])",
              ""
            ],
            "formatString": "#,0",
            "isHidden": true
          },
          {
            "name": "SRE SKU Count",
            "expression": [
              "",
              "CALCULATE(",
              "    [_SRE_SKU_Count]",
              "    , 'Comparison'[Param] = \"Current\"",
              ")"
            ],
            "formatString": "#,0",
            "displayFolder": "SelfReportedEntities\\SKUCount"
          },
          {
            "name": "SRE SKU Count LME",
            "expression": [
              "",
              "CALCULATE(",
              "    [_SRE_SKU_Count]",
              "    , 'Comparison'[Param] = \"LPE\"",
              ")  "
            ],
            "formatString": "#,0",
            "displayFolder": "SelfReportedEntities\\SKUCount"
          },
          {
            "name": "SRE SKU Count vs SRE SKU Count LME",
            "expression": [
              "",
              "[SRE SKU Count] - [SRE SKU Count LME]"
            ],
            "formatString": "#,0",
            "displayFolder": "SelfReportedEntities\\SKUCount"
          },
          {
            "name": "SRE SKU Count LYE",
            "expression": [
              "",
              "CALCULATE(",
              "    [_SRE_SKU_Count]",
              "    , 'Comparison'[Param] = \"LYE\"",
              ")  "
            ],
            "formatString": "#,0",
            "displayFolder": "SelfReportedEntities\\SKUCount"
          },
          {
            "name": "SRE_SKUCount LME vs LYE %",
            "expression": "Divide([SRE SKU Count LME],[SRE SKU Count LYE])-1",
            "formatString": "0%;-0%;0%",
            "displayFolder": "SelfReportedEntities\\SKUCount"
          },
          {
            "name": "SRE_SKUCount LPE",
            "expression": " CALCULATE(DISTINCTCOUNTNOBLANK(DimItem[SKUGlobal]),SAMEPERIODLASTYEAR('Calendar'[BusinessPeriodEndDate]))",
            "formatString": "#,0"
          },
          {
            "name": "SRE_SKUCount LME vs LYE",
            "expression": " [SRE SKU Count LME]-[SRE SKU Count LYE]",
            "formatString": "#,0"
          },
          {
            "name": "SRE SKU Count LYLME",
            "expression": [
              "",
              "CALCULATE(",
              "    [_SRE_SKU_Count]",
              "    ,SAMEPERIODLASTYEAR('Calendar'[BusinessPeriodEndDate])",
              ")  "
            ],
            "formatString": "#,0"
          },
          {
            "name": "SRE SKU Count 2021",
            "expression": [
              " var MaxDate2021 = CALCULATE(MAX(FactSelfReportedKPI[AsOfDateKey]),FILTER(ALL(FactSelfReportedKPI),FactSelfReportedKPI[BusinessYear]==2021))",
              "var SRESKUCount= CALCULATE(sum(FactSelfReportedKPI[SKUCount]),",
              "FactSelfReportedKPI[AsOfDateKey]=MaxDate2021,REMOVEFILTERS('Calendar'))",
              "return if(ISBLANK(SRESKUCount),0,SRESKUCount)",
              "/*var MaxDate2021 = CALCULATE(MAX(FactSelfReportedKPI[AsOfDateKey]),CROSSFILTER('Calendar'[CalendarDateKey],FactSelfReportedKPI[AsOfDateKey],Both),'Calendar'[BusinessYear]==2021)",
              "var SRESKUCount= CALCULATE(sum(FactSelfReportedKPI[SKUCount]),FILTER(FactSelfReportedKPI,",
              "FactSelfReportedKPI[AsOfDateKey]=MaxDate2021))",
              "return if(isblank(SRESKUCount),0,SRESKUCount)*/",
              "",
              "",
              ""
            ],
            "formatString": "0"
          },
          {
            "name": "SRE SKU Count 2020",
            "expression": [
              " var MaxDate2020 = CALCULATE(MAX(FactSelfReportedKPI[AsOfDateKey]),FILTER(ALL(FactSelfReportedKPI),FactSelfReportedKPI[BusinessYear]==2020))",
              "var SRESKUCount= CALCULATE(sum(FactSelfReportedKPI[SKUCount]),",
              "FactSelfReportedKPI[AsOfDateKey]=MaxDate2020,REMOVEFILTERS('Calendar'))",
              "return if(ISBLANK(SRESKUCount),0,SRESKUCount)",
              "/*var MaxDate2020 = CALCULATE(MAX(FactSelfReportedKPI[AsOfDateKey]),CROSSFILTER('Calendar'[CalendarDateKey],FactSelfReportedKPI[AsOfDateKey],Both),'Calendar'[BusinessYear]==2020)",
              "var SRESKUCount= CALCULATE(sum(FactSelfReportedKPI[SKUCount]),FILTER(FactSelfReportedKPI,",
              "FactSelfReportedKPI[AsOfDateKey]=MaxDate2020))",
              "return if(isblank(SRESKUCount),0,SRESKUCount)*/"
            ],
            "formatString": "0"
          },
          {
            "name": "SRE SKU Count 2019",
            "expression": [
              " var MaxDate2019 = CALCULATE(MAX(FactSelfReportedKPI[AsOfDateKey]),FILTER(ALL(FactSelfReportedKPI),FactSelfReportedKPI[BusinessYear]==2019))",
              "var SRESKUCount= CALCULATE(sum(FactSelfReportedKPI[SKUCount]),",
              "FactSelfReportedKPI[AsOfDateKey]=MaxDate2019,REMOVEFILTERS('Calendar'))",
              "return if(ISBLANK(SRESKUCount),0,SRESKUCount)",
              "/*var MaxDate2019 = CALCULATE(MAX(FactSelfReportedKPI[AsOfDateKey]),CROSSFILTER('Calendar'[CalendarDateKey],FactSelfReportedKPI[AsOfDateKey],Both),'Calendar'[BusinessYear]==2019)",
              "var SRESKUCount= CALCULATE(sum(FactSelfReportedKPI[SKUCount]),FILTER(FactSelfReportedKPI,",
              "FactSelfReportedKPI[AsOfDateKey]=MaxDate2019))",
              "return if(isblank(SRESKUCount),0,SRESKUCount)*/"
            ],
            "formatString": "0"
          },
          {
            "name": "SRE SKU Count 2022",
            "expression": [
              " /*var MaxDate2022 = CALCULATE(MAX(FactSelfReportedKPI[AsOfDateKey]),CROSSFILTER('Calendar'[CalendarDateKey],FactSelfReportedKPI[AsOfDateKey],Both),'Calendar'[BusinessYear]==2022)",
              "var SRESKUCount= CALCULATE(sum(FactSelfReportedKPI[SKUCount]),FILTER(FactSelfReportedKPI,",
              "FactSelfReportedKPI[AsOfDateKey]=MaxDate2022))",
              "return if(isblank(SRESKUCount),0,SRESKUCount)",
              "*/",
              "var MaxDate2022 = CALCULATE(MAX(FactSelfReportedKPI[AsOfDateKey]),FILTER(ALL(FactSelfReportedKPI),FactSelfReportedKPI[BusinessYear]==2022))",
              "var SRESKUCount= CALCULATE(sum(FactSelfReportedKPI[SKUCount]),",
              "FactSelfReportedKPI[AsOfDateKey]=MaxDate2022,REMOVEFILTERS('Calendar'))",
              "return if(ISBLANK(SRESKUCount),0,SRESKUCount)"
            ],
            "formatString": "0"
          }
        ]
      },
      {
        "name": "DimComparisonsItems",
        "columns": [
          {
            "name": "Test",
            "dataType": "string",
            "sourceColumn": "CalendarDateKey"
          },
          {
            "name": "ComparisonKey",
            "dataType": "string",
            "isHidden": true,
            "sourceColumn": "ComparisonKey",
            "isAvailableInMdx": false
          },
          {
            "name": "IsActive",
            "dataType": "string",
            "sourceColumn": "IsActive"
          },
          {
            "name": "PhaseOutDateKey",
            "dataType": "int64",
            "sourceColumn": "PhaseOutDateKey"
          },
          {
            "name": "MarketingComment",
            "dataType": "string",
            "sourceColumn": "MarketingComment"
          },
          {
            "name": "SkuKey",
            "dataType": "string",
            "sourceColumn": "SkuKey"
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = #\"SynapseDW\",",
                "    Inventory_vwDimInventoryInitiativeItems = Source{[Schema=\"Inventory\",Item=\"vwDimInventoryInitiativeItems\"]}[Data]",
                "in",
                "    Inventory_vwDimInventoryInitiativeItems"
              ]
            }
          }
        ]
      },
      {
        "name": "DimClassification",
        "columns": [
          {
            "name": "ClassificationKey",
            "dataType": "string",
            "sourceColumn": "ClassificationKey",
            "isAvailableInMdx": false
          },
          {
            "name": "ClassCodeLV1",
            "dataType": "int64",
            "sourceColumn": "ClassCodeLV1"
          },
          {
            "name": "ClassCodeLV1Desc",
            "dataType": "string",
            "sourceColumn": "ClassCodeLV1Desc"
          },
          {
            "name": "ClassCodeLV2",
            "dataType": "int64",
            "sourceColumn": "ClassCodeLV2"
          },
          {
            "name": "ClassCodeLV2Desc",
            "dataType": "string",
            "sourceColumn": "ClassCodeLV2Desc",
            "sortByColumn": "ClassCodeLV2"
          },
          {
            "name": "ClassCodeLV3",
            "dataType": "int64",
            "sourceColumn": "ClassCodeLV3"
          },
          {
            "name": "ClassCodeLV3Desc",
            "dataType": "string",
            "sourceColumn": "ClassCodeLV3Desc",
            "sortByColumn": "Priority"
          },
          {
            "name": "Priority",
            "dataType": "int64",
            "sourceColumn": "Priority"
          },
          {
            "name": "LCAValue",
            "dataType": "string",
            "sourceColumn": "LCAValue"
          },
          {
            "name": "AltClassCodeLV3Desc",
            "dataType": "string",
            "sourceColumn": "AltClassCodeLV3Desc"
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = SynapseDW,",
                "    Inventory_vwDimItem = Source{[Schema=\"Inventory\",Item=\"vwDimClassification\"]}[Data],",
                "    #\"Filtered Rows1\" = Table.SelectRows(Inventory_vwDimItem, each [LCAValue] <> null and [LCAValue] <> \"\")",
                "in",
                "    #\"Filtered Rows1\""
              ]
            }
          }
        ],
        "hierarchies": [
          {
            "name": "LCA Classification Hierarchy",
            "levels": [
              {
                "name": "ClassCodeLV1Desc",
                "ordinal": 0,
                "column": "ClassCodeLV1Desc"
              },
              {
                "name": "ClassCodeLV2Desc",
                "ordinal": 1,
                "column": "ClassCodeLV2Desc"
              },
              {
                "name": "ClassCodeLV3Desc",
                "ordinal": 2,
                "column": "ClassCodeLV3Desc"
              }
            ]
          }
        ]
      },
      {
        "name": "FactFinishedGoodsPlan",
        "columns": [
          {
            "name": "AsOfDateKey",
            "dataType": "int64",
            "isHidden": true,
            "sourceColumn": "AsOfDateKey"
          },
          {
            "name": "ItemKey",
            "dataType": "string",
            "isHidden": true,
            "sourceColumn": "ItemKey"
          },
          {
            "name": "ItemSCDKey",
            "dataType": "string",
            "sourceColumn": "ItemSCDKey"
          },
          {
            "name": "FacilityKey",
            "dataType": "string",
            "isHidden": true,
            "sourceColumn": "FacilityKey"
          },
          {
            "name": "Units",
            "dataType": "double",
            "sourceColumn": "Units",
            "encodingHint": "value"
          },
          {
            "name": "Packages",
            "dataType": "double",
            "sourceColumn": "Packages",
            "encodingHint": "value"
          },
          {
            "name": "FinancialPlanTypeKey",
            "dataType": "string",
            "isHidden": true,
            "sourceColumn": "FinancialPlanTypeKey"
          },
          {
            "name": "CurrencyKey",
            "dataType": "string",
            "sourceColumn": "CurrencyKey"
          },
          {
            "name": "BusinessKey",
            "dataType": "string",
            "isHidden": true,
            "sourceColumn": "BusinessKey"
          },
          {
            "name": "LocalCurrencyDollars",
            "dataType": "double",
            "sourceColumn": "LocalCurrencyDollars"
          },
          {
            "name": "cb",
            "dataType": "int64",
            "sourceColumn": "cb"
          },
          {
            "type": "calculated",
            "name": "USDollars",
            "dataType": "decimal",
            "isDataTypeInferred": false,
            "expression": [
              "var a =  LOOKUPVALUE(DimCurrency[PegRate],DimCurrency[CurrencyKey],FactFinishedGoodsPlan[CurrencyKey])",
              "var b = IF(ISBLANK(a),1,a)",
              "return FactFinishedGoodsPlan[LocalCurrencyDollars]*b"
            ],
            "formatString": "\\$#,0.00;(\\$#,0.00);\\$#,0.00",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\" Accuracy=\"2\" ThousandSeparator=\"True\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          }
        ],
        "partitions": [
          {
            "name": "FactFinishedGoodsPlanTemplate",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = #\"SynapseDW\",",
                "    Inventory_mvwFactInventoryPlan = Source{[Schema=\"Inventory\",Item=\"mvwFactInventoryPlan\"]}[Data],",
                "    #\"Filtered Rows\" = Table.SelectRows(Inventory_mvwFactInventoryPlan  , each [AsOfDateKey] < 19000101)",
                "in",
                "    #\"Filtered Rows\""
              ]
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>let",
                  "    Source = #\"SynapseDW\",",
                  "    Inventory_mvwFactInventoryPlan = Source{[Schema=\"Inventory\",Item=\"mvwFactInventoryPlan\"]}[Data],",
                  "    #\"Filtered Rows\" = Table.SelectRows(Inventory_mvwFactInventoryPlan  , each [AsOfDateKey] < 19000101)",
                  "in",
                  "    #\"Filtered Rows\"</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "measures": [
          {
            "name": "_FinishedGoodsPlan",
            "expression": "sum(FactFinishedGoodsPlan[USDollars])",
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "isHidden": true,
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "_FinishedGoodsUnits",
            "expression": "sum(FactFinishedGoodsPlan[Units])",
            "formatString": "#,0",
            "isHidden": true
          },
          {
            "name": "_FinishedGoodsPackages",
            "expression": "sum(FactFinishedGoodsPlan[Packages])",
            "formatString": "#,0",
            "isHidden": true
          },
          {
            "name": "Finished Good Units Plan",
            "expression": [
              "",
              "CALCULATE(",
              "    [_FinishedGoodsUnits]",
              "    , 'Comparison'[Param] = \"Current\"",
              "",
              ")"
            ],
            "formatString": "#,0",
            "displayFolder": "Inventory/Plan"
          },
          {
            "name": "Finished Good Dollars Actuals vs Plan %",
            "expression": [
              "",
              "Divide([Finished Good Dollars],[Finished Good Dollars Plan])"
            ],
            "formatString": "0%;-0%;0%",
            "displayFolder": "Inventory/Plan"
          },
          {
            "name": "Finished Good Dollars Actuals vs Plan $",
            "expression": [
              "",
              "[Finished Good Dollars]-[Finished Good Dollars Plan]"
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "displayFolder": "Inventory/Plan",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "Finished Good Dollars Plan",
            "expression": [
              "",
              "CALCULATE(",
              "    [_FinishedGoodsPlan]",
              "    , 'Comparison'[Param] = \"Current\"",
              ")"
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "displayFolder": "Inventory/Plan",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "Finished Good Packages Plan",
            "expression": [
              "",
              "CALCULATE(",
              "    [_FinishedGoodsPackages]",
              "    , 'Comparison'[Param] = \"Current\"",
              ")",
              "",
              ""
            ],
            "formatString": "#,0",
            "displayFolder": "Inventory/Plan"
          },
          {
            "name": "Finished Good Dollars Plan (Millions)",
            "expression": "DIVIDE([Finished Good Dollars], 1000000)",
            "formatString": "\\$#,0.0;(\\$#,0.0);\\$#,0.0",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\" Accuracy=\"1\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "Finished Good Packages Plan (Millions)",
            "expression": "DIVIDE([Finished Good Packages Plan], 1000000)",
            "formatString": "#,0"
          },
          {
            "name": "Finished Good Units Plan (Millions)",
            "expression": " DIVIDE([Finished Good Units Plan],1000000)"
          },
          {
            "name": "Finished Good Dollars vs Plan",
            "expression": " [Finished Good Dollars] - [Finished Good Dollars Plan]"
          },
          {
            "name": "Finished Good Dollars vs Plan %",
            "expression": " ([Finished Good Dollars] - [Finished Good Dollars Plan])/[Finished Good Dollars Plan]"
          },
          {
            "name": "Finished Good Dollars Plan YE",
            "expression": [
              "",
              "CALCULATE(",
              "    [_FinishedGoodsPlan]",
              "     ,'Comparison'[Param] = \"YE\"",
              ")"
            ]
          }
        ]
      },
      {
        "name": "DimSalesOrg",
        "columns": [
          {
            "name": "SalesOrgId",
            "dataType": "int64",
            "isKey": true,
            "sourceColumn": "SalesOrgId",
            "isAvailableInMdx": false
          },
          {
            "name": "SalesOrgDesc",
            "dataType": "string",
            "sourceColumn": "SalesOrgDesc"
          },
          {
            "name": "ReportOrder",
            "dataType": "int64",
            "sourceColumn": "ReportOrder"
          },
          {
            "name": "SalesOrgDescAlt",
            "dataType": "string",
            "sourceColumn": "SalesOrgDescAlt"
          },
          {
            "name": "DomInt",
            "dataType": "string",
            "sourceColumn": "DomInt"
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = #\"SynapseDW\",",
                "    Inventory_vwDimSalesOrg = Source{[Schema=\"Inventory\",Item=\"vwDimSalesOrg\"]}[Data]",
                "in",
                "    Inventory_vwDimSalesOrg"
              ]
            }
          }
        ]
      },
      {
        "name": "DimMarketingResponsibilityHierarchy",
        "columns": [
          {
            "name": "MarketingRespHierarchyKey",
            "dataType": "string",
            "sourceColumn": "MarketingRespHierarchyKey",
            "isAvailableInMdx": false
          },
          {
            "name": "MarketingResp0",
            "dataType": "string",
            "sourceColumn": "MarketingResp0"
          },
          {
            "name": "MarketingResp1",
            "dataType": "string",
            "sourceColumn": "MarketingResp1"
          },
          {
            "name": "MarketingResp2",
            "dataType": "string",
            "sourceColumn": "MarketingResp2"
          },
          {
            "name": "MarketingResp3",
            "dataType": "string",
            "sourceColumn": "MarketingResp3"
          },
          {
            "name": "MarketingResp4",
            "dataType": "string",
            "sourceColumn": "MarketingResp4"
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = #\"SynapseDW\",",
                "    Inventory_vwDimMarketingResponsibilityHierarchy = Source{[Schema=\"Inventory\",Item=\"vwDimMarketingResponsibilityHierarchy\"]}[Data]",
                "in",
                "    Inventory_vwDimMarketingResponsibilityHierarchy"
              ]
            }
          }
        ],
        "measures": [
          {
            "name": "Marketing Resp 4 Summarized",
            "expression": [
              "",
              "SELECTEDVALUE(",
              "    'DimMarketingResponsibilityHierarchy'[MarketingResp3],",
              "    CONCATENATEX(SUMMARIZE('DimMarketingResponsibilityHierarchy', 'DimMarketingResponsibilityHierarchy'[MarketingResp3]),  'DimMarketingResponsibilityHierarchy'[MarketingResp3], \", \", 'DimMarketingResponsibilityHierarchy'[MarketingResp3],ASC",
              ")",
              ")"
            ],
            "displayFolder": "SummarizedFields"
          }
        ],
        "hierarchies": [
          {
            "name": "Marketting Resp Hierarchy",
            "levels": [
              {
                "name": "MarketingResp0",
                "ordinal": 0,
                "column": "MarketingResp0"
              },
              {
                "name": "MarketingResp1",
                "ordinal": 1,
                "column": "MarketingResp1"
              },
              {
                "name": "MarketingResp2",
                "ordinal": 2,
                "column": "MarketingResp2"
              },
              {
                "name": "MarketingResp3",
                "ordinal": 3,
                "column": "MarketingResp3"
              },
              {
                "name": "MarketingResp4",
                "ordinal": 4,
                "column": "MarketingResp4"
              }
            ]
          }
        ]
      },
      {
        "name": "FactSales",
        "columns": [
          {
            "name": "LocalCurrencyDollars",
            "dataType": "double",
            "sourceColumn": "LocalCurrencyDollars",
            "encodingHint": "value"
          },
          {
            "name": "Units",
            "dataType": "double",
            "sourceColumn": "Units",
            "encodingHint": "value"
          },
          {
            "name": "Packages",
            "dataType": "double",
            "sourceColumn": "Packages",
            "encodingHint": "value"
          },
          {
            "name": "FinancialMeasureKey",
            "dataType": "string",
            "isHidden": true,
            "sourceColumn": "FinancialMeasureKey"
          },
          {
            "name": "CurrencyKey",
            "dataType": "string",
            "sourceColumn": "CurrencyKey"
          },
          {
            "name": "FacilityKey",
            "dataType": "string",
            "isHidden": true,
            "sourceColumn": "FacilityKey"
          },
          {
            "name": "CustomerAccountKey",
            "dataType": "string",
            "isHidden": true,
            "sourceColumn": "CustomerAccountKey"
          },
          {
            "name": "BusinessKey",
            "dataType": "string",
            "isHidden": true,
            "sourceColumn": "BusinessKey"
          },
          {
            "name": "StyleKey",
            "dataType": "string",
            "sourceColumn": "StyleKey"
          },
          {
            "name": "ItemKey",
            "dataType": "string",
            "isHidden": true,
            "sourceColumn": "ItemKey"
          },
          {
            "name": "MarketingResponsibilityKey",
            "dataType": "string",
            "isHidden": true,
            "sourceColumn": "MarketingResponsibilityKey"
          },
          {
            "name": "FinancialPlanTypeKey",
            "dataType": "string",
            "isHidden": true,
            "sourceColumn": "FinancialPlanTypeKey"
          },
          {
            "name": "SalesOrg",
            "dataType": "string",
            "sourceColumn": "SalesOrg"
          },
          {
            "name": "AsOfDateKey",
            "dataType": "int64",
            "sourceColumn": "AsOfDateKey",
            "formatString": "0",
            "encodingHint": "value"
          },
          {
            "type": "calculated",
            "name": "USDollars",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "var a = LOOKUPVALUE(DimCurrency[PegRate],DimCurrency[CurrencyKey],FactSales[CurrencyKey])",
              "var b = IF(ISBLANK(a),1,a)",
              "return FactSales[LocalCurrencyDollars]*b",
              "",
              "",
              ""
            ]
          },
          {
            "name": "SCAGlobal",
            "dataType": "string",
            "sourceColumn": "SCAGlobal"
          },
          {
            "name": "SKUGlobal",
            "dataType": "string",
            "sourceColumn": "SKUGlobal"
          },
          {
            "name": "ShipperFlagKey",
            "dataType": "string",
            "sourceColumn": "ShipperFlagKey"
          },
          {
            "name": "cb",
            "dataType": "int64",
            "sourceColumn": "cb"
          }
        ],
        "partitions": [
          {
            "name": "FactSalesTemplate",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = #\"SynapseDW\",",
                "    Inventory_mvwFactSales = Source{[Schema=\"Inventory\",Item=\"mvwFactSales\"]}[Data],",
                "    #\"FilteredRows\" = Table.SelectRows(Inventory_mvwFactSales  , each [AsOfDateKey] < 19000101)",
                "in",
                "    #\"FilteredRows\""
              ]
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>let",
                  "    Source = #\"SynapseDW\",",
                  "    Inventory_mvwFactSales = Source{[Schema=\"Inventory\",Item=\"mvwFactSales\"]}[Data],",
                  "    #\"FilteredRows\" = Table.SelectRows(Inventory_mvwFactSales  , each [AsOfDateKey] < 19000101)",
                  "in",
                  "    #\"FilteredRows\"</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "measures": [
          {
            "name": "Pre-incentive Sales $",
            "expression": [
              "  CALCULATE(",
              "           [_USCurrencyDollars],",
              "           DimFinancialMeasure[IsPreincentiveSales] = 1",
              "        )",
              "/*",
              "VAR MaxWeekEnd = MAX('FactSales'[AsOfDateKey])",
              "VAR SalesIsFiltered = ISFILTERED('calendar')",
              "VAR Result = ",
              "    IF(SalesIsFiltered, ",
              "        CALCULATE(",
              "           [_LocalCurrencyDollars$],",
              "           DimFinancialMeasure[IsPreincentiveSales] = 1",
              "        )",
              ",",
              "        CALCULATE(",
              "           [_LocalCurrencyDollars$],",
              "           DimFinancialMeasure[IsPreincentiveSales] = 1,",
              "            'Calendar'[CalendarDateKey] = MaxWeekEnd",
              "        )",
              "    )",
              "RETURN",
              "Result*/"
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "displayFolder": "Sales",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "Pre-incentive COGS $",
            "expression": [
              "CALCULATE(",
              "           [_USCurrencyDollars],",
              "           DimFinancialMeasure[IsPreIncentiveCOGS] = 1",
              "        )",
              "/*",
              "VAR MaxWeekEnd = MAX('FactSales'[AsOfDateKey])",
              "VAR SalesIsFiltered = ISFILTERED('calendar')",
              "VAR Result = ",
              "    IF(SalesIsFiltered, ",
              "        CALCULATE(",
              "           [_LocalCurrencyDollars$],",
              "           DimFinancialMeasure[IsPreIncentiveCOGS] = 1",
              "        )",
              ",",
              "        CALCULATE(",
              "           [_LocalCurrencyDollars$],",
              "           DimFinancialMeasure[IsPreIncentiveCOGS] = 1,",
              "            'Calendar'[CalendarDateKey] = MaxWeekEnd",
              "        )",
              "    )",
              "RETURN",
              "Result*/"
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "displayFolder": "COGS",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "Gross Sales $",
            "expression": [
              "CALCULATE(",
              "           [_USCurrencyDollars],",
              "           DimFinancialMeasure[IsGrossSales] = 1",
              "        )",
              "/*",
              "VAR MaxWeekEnd = MAX('FactSales'[AsOfDateKey])",
              "VAR SalesIsFiltered = ISFILTERED('calendar')",
              "VAR Result = ",
              "    IF(SalesIsFiltered, ",
              "        CALCULATE(",
              "           [_LocalCurrencyDollars$],",
              "           DimFinancialMeasure[IsGrossSales] = 1",
              "        )",
              ",",
              "        CALCULATE(",
              "           [_LocalCurrencyDollars$],",
              "           DimFinancialMeasure[IsGrossSales] = 1,",
              "            'Calendar'[CalendarDateKey] = MaxWeekEnd",
              "        )",
              "    )",
              "RETURN",
              "Result*/"
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "displayFolder": "Sales",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "Adj to Gross Sales $",
            "expression": [
              "",
              "VAR MaxWeekEnd = MAX('FactSales'[AsOfDateKey])",
              "VAR SalesIsFiltered = ISFILTERED('calendar')",
              "VAR Result = ",
              "    IF(SalesIsFiltered, ",
              "        CALCULATE(",
              "           [_USCurrencyDollars],",
              "           DimFinancialMeasure[IsAdjToGrossSales] = 1",
              "        )",
              ",",
              "        CALCULATE(",
              "           [_USCurrencyDollars],",
              "           DimFinancialMeasure[IsAdjToGrossSales] = 1,",
              "            'Calendar'[CalendarDateKey] = MaxWeekEnd",
              "        )",
              "    )",
              "RETURN",
              "Result"
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "displayFolder": "Sales",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "Intercompany Net Sales $",
            "expression": [
              " CALCULATE(",
              "           [_USCurrencyDollars],",
              "           DimFinancialMeasure[IsIntercompanyNetSales] = 1",
              "        )",
              "",
              "/*",
              "VAR MaxWeekEnd = MAX('FactSales'[AsOfDateKey])",
              "VAR SalesIsFiltered = ISFILTERED('calendar')",
              "VAR Result = ",
              "    IF(SalesIsFiltered, ",
              "        CALCULATE(",
              "           [_LocalCurrencyDollars$],",
              "           DimFinancialMeasure[IsIntercompanyNetSales] = 1",
              "        )",
              ",",
              "        CALCULATE(",
              "           [_LocalCurrencyDollars$],",
              "           DimFinancialMeasure[IsIntercompanyNetSales] = 1,",
              "            'Calendar'[CalendarDateKey] = MaxWeekEnd",
              "        )",
              "    )",
              "RETURN",
              "Result*/"
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "displayFolder": "Sales",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "Sales Incentive Cost $",
            "expression": [
              "CALCULATE(",
              "           [_USCurrencyDollars],",
              "           DimFinancialMeasure[IsSalesIncentiveCost] = 1",
              "        )",
              "/*",
              "VAR MaxWeekEnd = MAX('FactSales'[AsOfDateKey])",
              "VAR SalesIsFiltered = ISFILTERED('calendar')",
              "VAR Result = ",
              "    IF(SalesIsFiltered, ",
              "        CALCULATE(",
              "           [_LocalCurrencyDollars$],",
              "           DimFinancialMeasure[IsSalesIncentiveCost] = 1",
              "        )",
              ",",
              "        CALCULATE(",
              "           [_LocalCurrencyDollars$],",
              "           DimFinancialMeasure[IsSalesIncentiveCost] = 1,",
              "            'Calendar'[CalendarDateKey] = MaxWeekEnd",
              "        )",
              "    )",
              "RETURN",
              "Result*/"
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "displayFolder": "COGS",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "Intercompany SCOGS $",
            "expression": [
              " CALCULATE(",
              "           [_USCurrencyDollars],",
              "           DimFinancialMeasure[IsIntercompanySCOGS] = 1",
              "        )",
              "",
              "/*",
              "VAR MaxWeekEnd = MAX('FactSales'[AsOfDateKey])",
              "VAR SalesIsFiltered = ISFILTERED('calendar')",
              "VAR Result = ",
              "    IF(SalesIsFiltered, ",
              "        CALCULATE(",
              "           [_LocalCurrencyDollars$],",
              "           DimFinancialMeasure[IsIntercompanySCOGS] = 1",
              "        )",
              ",",
              "        CALCULATE(",
              "           [_LocalCurrencyDollars$],",
              "           DimFinancialMeasure[IsIntercompanySCOGS] = 1,",
              "            'Calendar'[CalendarDateKey] = MaxWeekEnd",
              "        )",
              "    )",
              "RETURN",
              "Result*/"
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "displayFolder": "COGS",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "Pre-incentive Gross Margin $",
            "expression": [
              " [Gross Sales $] + [Adj to Gross Sales $] - [Pre-incentive COGS $]",
              ""
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "displayFolder": "Gross Margin",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "Pre-incentive Gross Margin %",
            "expression": " DIVIDE([Pre-incentive Gross Margin $],[Pre-incentive Sales $])",
            "formatString": "0%;-0%;0%",
            "displayFolder": "Gross Margin"
          },
          {
            "name": "Adj to Gross Sales $ (L12M)",
            "expression": [
              "",
              "IF (",
              "    [ShowValueForDates],",
              "    VAR NumOfDays = 362",
              "    VAR LastDay = [MaxSequentialNumber]",
              "    VAR FirstDay = LastDay- NumOfDays",
              "    VAR Result =",
              "        CALCULATE (",
              "            [_USCurrencyDollars],",
              "            REMOVEFILTERS('Calendar'),",
              "           DimFinancialMeasure[IsAdjToGrossSales] = 1,",
              "            'Calendar'[SequenceDate] >=FirstDay",
              "                && 'Calendar'[SequenceDate] <= LastDay",
              "        )",
              "",
              "    RETURN",
              "    Result",
              "",
              ")"
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "displayFolder": "Sales\\L12M",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "Gross Sales $ (L12M)",
            "expression": [
              "",
              "IF (",
              "    [ShowValueForDates],",
              "    VAR NumOfDays = 362",
              "    VAR LastDay = [MaxSequentialNumber]",
              "    VAR FirstDay = LastDay- NumOfDays",
              "    VAR Result =",
              "        CALCULATE (",
              "            [_USCurrencyDollars],",
              "            REMOVEFILTERS('Calendar'),",
              "           DimFinancialMeasure[IsGrossSales] = 1,",
              "            'Calendar'[SequenceDate] >=FirstDay",
              "                && 'Calendar'[SequenceDate] <= LastDay",
              "        )",
              "",
              "    RETURN",
              "    Result",
              "",
              ")"
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "displayFolder": "Sales\\L12M",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "Intercompany Net Sales $ (L12M)",
            "expression": [
              "",
              "IF (",
              "    [ShowValueForDates],",
              "    VAR NumOfDays = 362",
              "    VAR LastDay = [MaxSequentialNumber]",
              "    VAR FirstDay = LastDay- NumOfDays",
              "    VAR Result =",
              "        CALCULATE (",
              "            [_USCurrencyDollars],",
              "            REMOVEFILTERS('Calendar'),",
              "           DimFinancialMeasure[IsIntercompanyNetSales] = 1,",
              "            'Calendar'[SequenceDate] >=FirstDay",
              "                && 'Calendar'[SequenceDate] <= LastDay",
              "        )",
              "",
              "    RETURN",
              "    Result",
              "",
              ")"
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "displayFolder": "Sales\\L12M",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "Intercompany SCOGS $ (L12M)",
            "expression": [
              "",
              "IF (",
              "    [ShowValueForDates],",
              "    VAR NumOfDays = 362",
              "    VAR LastDay = [MaxSequentialNumber]",
              "    VAR FirstDay = LastDay- NumOfDays",
              "    VAR Result =",
              "        CALCULATE (",
              "            [_USCurrencyDollars],",
              "            REMOVEFILTERS('Calendar'),",
              "           DimFinancialMeasure[IsIntercompanySCOGS] = 1,",
              "            'Calendar'[SequenceDate] >=FirstDay",
              "                && 'Calendar'[SequenceDate] <= LastDay",
              "        )",
              "",
              "    RETURN",
              "    Result",
              "",
              ")"
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "displayFolder": "COGS\\L12M",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "Pre-incentive COGS $ (L12M)",
            "expression": [
              "",
              "IF (",
              "    [ShowValueForDates],",
              "    VAR NumOfDays = 362",
              "    VAR LastDay = [MaxSequentialNumber]",
              "    VAR FirstDay = LastDay- NumOfDays",
              "    VAR Result =",
              "        CALCULATE (",
              "            [_USCurrencyDollars],",
              "            REMOVEFILTERS('Calendar'),",
              "           DimFinancialMeasure[IsPreIncentiveCOGS] = 1,",
              "            'Calendar'[SequenceDate] >=FirstDay",
              "                && 'Calendar'[SequenceDate] <= LastDay",
              "        )",
              "",
              "    RETURN",
              "    Result",
              "",
              ")"
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "displayFolder": "COGS\\L12M",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "Pre-incentive Sales $ (L12M)",
            "expression": [
              "",
              "IF (",
              "    [ShowValueForDates],",
              "    VAR NumOfDays = 362",
              "    VAR LastDay = [MaxSequentialNumber]",
              "    VAR FirstDay = LastDay- NumOfDays",
              "    VAR Result =",
              "        CALCULATE (",
              "            [_USCurrencyDollars],",
              "            REMOVEFILTERS('Calendar'),",
              "           DimFinancialMeasure[IsPreincentiveSales] = 1,",
              "            'Calendar'[SequenceDate] >=FirstDay",
              "                && 'Calendar'[SequenceDate] <= LastDay",
              "        )",
              "",
              "    RETURN",
              "    Result",
              "",
              ")"
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "displayFolder": "Sales\\L12M",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "Sales Incentive Cost $ (L12M)",
            "expression": [
              "",
              "IF (",
              "    [ShowValueForDates],",
              "    VAR NumOfDays = 362",
              "    VAR LastDay = [MaxSequentialNumber]",
              "    VAR FirstDay = LastDay- NumOfDays",
              "    VAR Result =",
              "        CALCULATE (",
              "            [_USCurrencyDollars],",
              "            REMOVEFILTERS('Calendar'),",
              "           DimFinancialMeasure[IsSalesIncentiveCost] = 1,",
              "            'Calendar'[SequenceDate] >=FirstDay",
              "                && 'Calendar'[SequenceDate] <= LastDay",
              "        )",
              "",
              "    RETURN",
              "    Result",
              "",
              ")"
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "displayFolder": "COGS\\L12M",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "Pre-incentive Gross Margin Dollars per SCA",
            "expression": [
              " VAR CalendarIsFiltered =",
              "    ISFILTERED ( 'calendar' )",
              "VAR MaxDate =    LOOKUPVALUE (        'Calendar'[LY Day Date],        'Calendar'[SequenceDate], [LastDateWithData]    )",
              "VAR TwelveMonthsSales = ",
              "\tIF  ([ShowValueForDates],",
              "\t\t\tVAR NumOfDays = 362",
              "\t\t\tVAR LastDay = [MaxSequentialNumber]",
              "\t\t\tVAR FirstDay = LastDay- NumOfDays",
              "\t\t\tVAR Result =",
              "\t\t\t\tCALCULATE ",
              "\t\t\t\t\t\t(",
              "\t\t\t\t\t\t\t[Pre-incentive Gross Margin $],",
              "\t\t\t\t\t\t\tREMOVEFILTERS('Calendar'),",
              "\t\t\t\t\t\t\t'Calendar'[SequenceDate] >=FirstDay",
              "\t\t\t\t\t\t\t\t&& 'Calendar'[SequenceDate] <= LastDay",
              "\t\t\t\t\t\t)",
              "\t\t\tRETURN",
              "\t\t\tResult",
              "\t\t)",
              "\t\t",
              "VAR CurrentMonthSCACount = [SCA Count]",
              "",
              "VAR LastYearSCACount = ",
              "   IF (",
              "        CalendarIsFiltered && [ShowValueForDates],",
              "        CALCULATE (",
              "            [SCA Count],",
              "            FILTER (",
              "                ALL ( 'Calendar' ),",
              "                CONTAINS (",
              "                    VALUES ( 'Calendar'[LY Day Date] ),",
              "                    'Calendar'[LY Day Date], 'Calendar'[SequenceDate]",
              "                )",
              "            )",
              "        ),",
              "        CALCULATE ( [SCA Count] , 'Calendar'[SequenceDate] = MaxDate )",
              "    )",
              "",
              "VAR AvgSKUCount = (CurrentMonthSCACount + LastYearSCACount) / 2\t\t",
              "",
              "VAR Result = DIVIDE(TwelveMonthsSales, AvgSKUCount)",
              "",
              "RETURN",
              "Result"
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "displayFolder": "Gross Margin\\L12M",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "Pre-incentive Sales Dollars per SCA",
            "expression": [
              " VAR CalendarIsFiltered =",
              "    ISFILTERED ( 'calendar' )",
              "VAR MaxDate =",
              "    LOOKUPVALUE (",
              "        'Calendar'[LY Day Date],",
              "        'Calendar'[CalendarDateKey], [LastDateWithData]",
              "    )",
              "VAR TwelveMonthsSales = ",
              "\tIF  (",
              "\t\t\t[ShowValueForDates],",
              "\t\t\tVAR NumOfDays = 362",
              "\t\t\tVAR LastDay = [MaxSequentialNumber]",
              "\t\t\tVAR FirstDay = LastDay- NumOfDays",
              "\t\t\tVAR Result =",
              "\t\t\t\tCALCULATE ",
              "\t\t\t\t\t\t(",
              "\t\t\t\t\t\t\t[Pre-incentive Sales $],",
              "\t\t\t\t\t\t\tREMOVEFILTERS('Calendar'),",
              "\t\t\t\t\t\t\t'Calendar'[SequenceDate] >=FirstDay",
              "\t\t\t\t\t\t\t\t&& 'Calendar'[SequenceDate] <= LastDay",
              "\t\t\t\t\t\t)",
              "\t\t\tRETURN",
              "\t\t\tResult",
              "\t\t)",
              "\t\t",
              "VAR CurrentMonthSCACount = [SCA Count]",
              "",
              "VAR LastYearSCACount = ",
              "   IF (",
              "        CalendarIsFiltered && [ShowValueForDates],",
              "        CALCULATE (",
              "            [SCA Count],",
              "            FILTER (",
              "                ALL ( 'Calendar' ),",
              "                CONTAINS (",
              "                    VALUES ( 'Calendar'[LY Day Date] ),",
              "                    'Calendar'[LY Day Date], 'Calendar'[CalendarDate]",
              "                )",
              "            )",
              "        ),",
              "        CALCULATE ( [SCA Count] , 'Calendar'[CalendarDate] = MaxDate )",
              "    )",
              "",
              "VAR AvgSKUCount = (CurrentMonthSCACount + LastYearSCACount) / 2\t\t",
              "",
              "VAR Result = DIVIDE(TwelveMonthsSales, AvgSKUCount)",
              "",
              "RETURN",
              "Result"
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "Pre-Incentive Gross Margin (L12M) $",
            "expression": "   [Gross Sales $ (L12M)]+  [Adj to Gross Sales $ (L12M)] - [Pre-incentive COGS $ (L12M)]"
          },
          {
            "name": "Pre-Incentive Gross Margin (L12M) %",
            "expression": " DIVIDE([Pre-Incentive Gross Margin (L12M) $],[Pre-incentive Sales $ (L12M)])",
            "formatString": "0.00%;-0.00%;0.00%"
          },
          {
            "name": "_USCurrencyDollars",
            "expression": "SUM(FactSales[USDollars])",
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "_LocalCurrencyDollars",
            "expression": "SUM(FactSales[LocalCurrencyDollars])"
          },
          {
            "name": "Sales Incentives $",
            "expression": [
              "CALCULATE(",
              "           [_USCurrencyDollars],",
              "           DimFinancialMeasure[IsSalesIncentive] = 1",
              "        )"
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "Royality Income $",
            "expression": [
              "CALCULATE(",
              "           [_USCurrencyDollars],",
              "           DimFinancialMeasure[IsRoyalityIncome] = 1",
              "        )"
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "Net Sales $",
            "expression": [
              "CALCULATE(",
              "           [_USCurrencyDollars],",
              "           DimFinancialMeasure[IsNetSales] = 1",
              "        )"
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "Net OS COGS  $",
            "expression": [
              "CALCULATE(",
              "           [_USCurrencyDollars],",
              "           DimFinancialMeasure[IsNetOSCOGS] = 1",
              "        )"
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "SCOGS $",
            "expression": [
              "CALCULATE(",
              "           [_USCurrencyDollars],",
              "           DimFinancialMeasure[IsSCOGS] = 1",
              "        )"
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "Standard GM $",
            "expression": [
              "",
              "var a = CALCULATE(",
              "           [_USCurrencyDollars],",
              "           DimFinancialMeasure[IsStandardGM_Add] = 1",
              "        )",
              "var b =CALCULATE(",
              "           [_USCurrencyDollars],",
              "           DimFinancialMeasure[IsStandardGM_Subtract] = 1",
              "        )",
              "return a-b"
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "Net Sales $ (L12M)",
            "expression": [
              " ",
              "IF (",
              "    [ShowValueForDates],",
              "    VAR NumOfDays = 362",
              "    VAR LastDay = [MaxSequentialNumber]",
              "    VAR FirstDay = LastDay- NumOfDays",
              "    VAR Result =",
              "        CALCULATE (",
              "            [_USCurrencyDollars],",
              "            REMOVEFILTERS('Calendar'),",
              "           DimFinancialMeasure[IsNetSales] = 1,",
              "            'Calendar'[SequenceDate] >=FirstDay",
              "                && 'Calendar'[SequenceDate] <= LastDay",
              "        )",
              "",
              "    RETURN",
              "    Result",
              "",
              ")"
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          }
        ]
      },
      {
        "name": "ReserveRates",
        "calculationGroup": {
          "precedence": 1,
          "calculationItems": [
            {
              "name": "BaseLogic"
            }
          ]
        },
        "columns": [
          {
            "name": "Param",
            "dataType": "string",
            "sourceColumn": "Name"
          }
        ],
        "partitions": [
          {
            "name": "CalculationGroup 1",
            "mode": "import",
            "source": {
              "type": "calculationGroup"
            }
          }
        ]
      },
      {
        "name": "FactFinishedGoodsInventory",
        "columns": [
          {
            "name": "AsOfDateKey",
            "dataType": "int64",
            "sourceColumn": "AsOfDateKey"
          },
          {
            "name": "BusinessKey",
            "dataType": "string",
            "sourceColumn": "BusinessKey"
          },
          {
            "name": "FacilityKey",
            "dataType": "string",
            "isHidden": true,
            "sourceColumn": "FacilityKey"
          },
          {
            "name": "ItemKey",
            "dataType": "string",
            "isHidden": true,
            "sourceColumn": "ItemKey"
          },
          {
            "name": "FinancialPlanTypeKey",
            "dataType": "string",
            "isHidden": true,
            "sourceColumn": "FinancialPlanTypeKey"
          },
          {
            "name": "FinancialMeasureKey",
            "dataType": "string",
            "isHidden": true,
            "sourceColumn": "FinancialMeasureKey"
          },
          {
            "name": "StockCategoryKey",
            "dataType": "string",
            "sourceColumn": "StockCategoryKey"
          },
          {
            "name": "AdjustmentTypeKey",
            "dataType": "string",
            "sourceColumn": "AdjustmentTypeKey"
          },
          {
            "name": "ShipperFlagKey",
            "dataType": "string",
            "isHidden": true,
            "sourceColumn": "ShipperFlagKey"
          },
          {
            "name": "Packages",
            "dataType": "int64",
            "sourceColumn": "Packages",
            "encodingHint": "value"
          },
          {
            "name": "Units",
            "dataType": "int64",
            "sourceColumn": "Units",
            "encodingHint": "value"
          },
          {
            "name": "LocalCurrencyDollars",
            "dataType": "decimal",
            "sourceColumn": "LocalCurrencyDollars",
            "formatString": "\\$#,0.00;(\\$#,0.00);\\$#,0.00",
            "encodingHint": "value",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\" Accuracy=\"2\" ThousandSeparator=\"True\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "ReserveDollars",
            "dataType": "int64",
            "sourceColumn": "ReserveDollars",
            "formatString": "\\$#,0.00;(\\$#,0.00);\\$#,0.00",
            "encodingHint": "value",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\" Accuracy=\"2\" ThousandSeparator=\"True\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "ReserveUnits",
            "dataType": "double",
            "sourceColumn": "ReserveUnits",
            "encodingHint": "value"
          },
          {
            "name": "ReservePackages",
            "dataType": "double",
            "sourceColumn": "ReservePackages",
            "encodingHint": "value"
          },
          {
            "name": "CurrencyKey",
            "dataType": "string",
            "sourceColumn": "CurrencyKey"
          },
          {
            "name": "cb",
            "dataType": "int64",
            "sourceColumn": "cb"
          },
          {
            "type": "calculated",
            "name": "USDollars",
            "dataType": "decimal",
            "isDataTypeInferred": true,
            "expression": [
              "var a =  LOOKUPVALUE(DimCurrency[PegRate],DimCurrency[CurrencyKey],FactFinishedGoodsInventory[CurrencyKey])",
              "var b = IF(ISBLANK(a),1,a)",
              "return FactFinishedGoodsInventory[LocalCurrencyDollars]*b"
            ],
            "formatString": "\\$#,0.00;(\\$#,0.00);\\$#,0.00",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\" Accuracy=\"2\" ThousandSeparator=\"True\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "type": "calculated",
            "name": "SKULCAKey",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "var startDate = CALCULATE(MIN(DimSKULifeCycle[StartDateKey]),FILTER(DimSKULifeCycle,DimSKULifeCycle[ItemKey]=FactFinishedGoodsInventory[ItemKey] && DimSKULifeCycle[StartDateKey]<=FactFinishedGoodsInventory[AsOfDateKey] && DimSKULifeCycle[EndDateKey]>=FactFinishedGoodsInventory[AsOfDateKey]))",
              "var endDate = CALCULATE(MIN(DimSKULifeCycle[EndDateKey]),FILTER(DimSKULifeCycle,DimSKULifeCycle[ItemKey]=FactFinishedGoodsInventory[ItemKey] && DimSKULifeCycle[StartDateKey]<=FactFinishedGoodsInventory[AsOfDateKey] && DimSKULifeCycle[EndDateKey]>=FactFinishedGoodsInventory[AsOfDateKey]))",
              "var sDate = IF(ISBLANK(startDate),0,startDate)",
              "var edDate = IF(ISBLANK(endDate),0,endDate)",
              "return CONCATENATE(FactFinishedGoodsInventory[ItemKey],CONCATENATE(VALUE(sDate),value(edDate)))"
            ]
          }
        ],
        "partitions": [
          {
            "name": "FactFinishedGoodsInventoryTemplate",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = #\"SynapseDW\",",
                "    Inventory_mvwFactInventory = Source{[Schema=\"Inventory\",Item=\"mvwFactInventory\"]}[Data],",
                "    #\"Filtered Rows\" = Table.SelectRows(Inventory_mvwFactInventory , each [AsOfDateKey] < 19000101)",
                "in",
                "    #\"Filtered Rows\""
              ]
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>let",
                  "    Source = #\"SynapseDW\",",
                  "    Inventory_mvwFactInventory = Source{[Schema=\"Inventory\",Item=\"mvwFactInventory\"]}[Data],",
                  "    #\"Filtered Rows\" = Table.SelectRows(Inventory_mvwFactInventory , each [AsOfDateKey] < 19000101)",
                  "in",
                  "    #\"Filtered Rows\"</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "measures": [
          {
            "name": "Finished Good Dollars",
            "expression": [
              "",
              "CALCULATE(",
              "    [_Finished Good_USDollars]",
              "    , 'Comparison'[Param] = \"Current\"",
              ")"
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "displayFolder": "Finished Goods\\Total",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "_Reserve_Dollars",
            "expression": [
              "sum(FactFinishedGoodsReserves[ReserveUSDollars])",
              "",
              "",
              ""
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "isHidden": true,
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "Finished Good Dollars LW",
            "expression": [
              "",
              "CALCULATE(",
              "    [_Finished Good_USDollars]",
              "    , 'Comparison'[Param] = \"LWE\"",
              ")"
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "Finished Good Dollars LM",
            "expression": [
              "",
              "CALCULATE(",
              "    [_Finished Good_USDollars]",
              "    , 'Comparison'[Param] = \"LP\"",
              ")"
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "Finished Good Dollars LQ",
            "expression": [
              "",
              "CALCULATE(",
              "    [_Finished Good_USDollars]",
              "    , 'Comparison'[Param] = \"LQE\"",
              ")"
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "Finished Good Dollars LY",
            "expression": [
              "",
              "CALCULATE(",
              "    [_Finished Good_USDollars]",
              "    , 'Comparison'[Param] = \"LY\"",
              ")"
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "displayFolder": "Finished Goods\\LY",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "Finished Good Dollars vs Finished Good Dollars LM",
            "expression": [
              "",
              "[Finished Good Dollars] - [Finished Good Dollars LM]"
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "Finished Good Dollars vs Finished Good Dollars LQ",
            "expression": [
              "",
              "[Finished Good Dollars] - [Finished Good Dollars LQ]",
              ""
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "Finished Good Dollars vs Finished Good Dollars LW",
            "expression": [
              "",
              "[Finished Good Dollars] - [Finished Good Dollars LW]"
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "Finished Good Dollars vs Finished Good Dollars LY",
            "expression": [
              "",
              "[Finished Good Dollars] - [Finished Good Dollars LY]",
              ""
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "Finished Good Dollars vs LW %",
            "expression": [
              " Divide('FactFinishedGoodsInventory'[Finished Good Dollars vs Finished Good Dollars LW], 'FactFinishedGoodsInventory'[Finished Good Dollars LW],1)",
              "",
              "",
              ""
            ],
            "formatString": "0%;-0%;0%"
          },
          {
            "name": "Finished Good Dollars vs LM %",
            "expression": [
              " Divide('FactFinishedGoodsInventory'[Finished Good Dollars vs Finished Good Dollars LM], 'FactFinishedGoodsInventory'[Finished Good Dollars LM],1)",
              "",
              "",
              "",
              ""
            ],
            "formatString": "0%;-0%;0%"
          },
          {
            "name": "Finished Good Dollars vs LQ %",
            "expression": [
              " Divide('FactFinishedGoodsInventory'[Finished Good Dollars vs Finished Good Dollars LQ], 'FactFinishedGoodsInventory'[Finished Good Dollars LQ],1)",
              "",
              "",
              "",
              ""
            ],
            "formatString": "0%;-0%;0%"
          },
          {
            "name": "Finished Good Dollars vs LY %",
            "expression": [
              " Divide('FactFinishedGoodsInventory'[Finished Good Dollars vs Finished Good Dollars LY], 'FactFinishedGoodsInventory'[Finished Good Dollars LY],1)",
              "",
              "",
              ""
            ],
            "formatString": "0%;-0%;0%"
          },
          {
            "name": "Local Finished Good Dollars",
            "expression": [
              "",
              "CALCULATE(",
              "    [_Finished Good_LocalCurrencyDollars]",
              "    , 'Comparison'[Param] = \"Current\"",
              ")"
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\" ThousandSeparator=\"True\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "Local Finished Good Dollars LW",
            "expression": [
              "",
              "CALCULATE(",
              "    [_Finished Good_LocalCurrencyDollars]",
              "    , 'Comparison'[Param] = \"LWE\"",
              ")"
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\" ThousandSeparator=\"True\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "Local Finished Good Dollars LM",
            "expression": [
              "",
              "CALCULATE(",
              "    [_Finished Good_LocalCurrencyDollars]",
              "    , 'Comparison'[Param] = \"LP\"",
              ")"
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "Local Finished Good Dollars LQ",
            "expression": [
              "",
              "CALCULATE(",
              "    [_Finished Good_LocalCurrencyDollars]",
              "    , 'Comparison'[Param] = \"LQE\"",
              ")"
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\" ThousandSeparator=\"True\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "Local Finished Good Dollars LY",
            "expression": [
              "",
              "CALCULATE(",
              "    [_Finished Good_LocalCurrencyDollars]",
              "    , 'Comparison'[Param] = \"LY\"",
              ")"
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\" ThousandSeparator=\"True\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "Local Finished Good Dollars vs Local Finished Good Dollars LW",
            "expression": [
              "",
              "[Local Finished Good Dollars] - [Local Finished Good Dollars LW]"
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\" ThousandSeparator=\"True\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "Local Finished Good Dollars vs Local Finished Good Dollars LM",
            "expression": [
              "",
              "[Local Finished Good Dollars] - [Local Finished Good Dollars LM]"
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "Local Finished Good Dollars vs Local Finished Good Dollars LQ",
            "expression": [
              "",
              "[Local Finished Good Dollars] - [Local Finished Good Dollars LQ]"
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\" ThousandSeparator=\"True\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "Local Finished Good Dollars vs Local Finished Good Dollars LY",
            "expression": [
              "",
              "[Local Finished Good Dollars] - [Local Finished Good Dollars LY]"
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\" ThousandSeparator=\"True\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "Local Finished Good Dollars vs LW %",
            "expression": [
              " Divide('FactFinishedGoodsInventory'[Local Finished Good Dollars vs Local Finished Good Dollars LW], 'FactFinishedGoodsInventory'[Local Finished Good Dollars LW],1)",
              "",
              "",
              ""
            ],
            "formatString": "0%;-0%;0%"
          },
          {
            "name": "Local Finished Good Dollars vs LM %",
            "expression": [
              " Divide('FactFinishedGoodsInventory'[Local Finished Good Dollars vs Local Finished Good Dollars LM], 'FactFinishedGoodsInventory'[Local Finished Good Dollars LM],1)",
              "",
              "",
              ""
            ],
            "formatString": "0%;-0%;0%"
          },
          {
            "name": "Local Finished Good Dollars vs LQ %",
            "expression": [
              " Divide('FactFinishedGoodsInventory'[Local Finished Good Dollars vs Local Finished Good Dollars LQ], 'FactFinishedGoodsInventory'[Local Finished Good Dollars LQ],1)",
              "",
              "",
              ""
            ],
            "formatString": "0%;-0%;0%"
          },
          {
            "name": "Local Finished Good Dollars vs LY %",
            "expression": [
              " Divide('FactFinishedGoodsInventory'[Local Finished Good Dollars vs Local Finished Good Dollars LY], 'FactFinishedGoodsInventory'[Local Finished Good Dollars LY],1)",
              "",
              "",
              ""
            ],
            "formatString": "0%;-0%;0%"
          },
          {
            "name": "Reserve Dollars",
            "expression": [
              "",
              "CALCULATE(",
              "    [_Reserve_Dollars]",
              "    , 'Comparison'[Param] = \"Current\"",
              ")"
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\" ThousandSeparator=\"True\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "Reserve Dollars LW",
            "expression": [
              "",
              "CALCULATE(",
              "    [_Reserve_Dollars]",
              "    , 'Comparison'[Param] = \"LWE\"",
              ")"
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\" ThousandSeparator=\"True\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "Reserve Dollars LM",
            "expression": [
              "",
              "CALCULATE(",
              "    [_Reserve_Dollars]",
              "    , 'Comparison'[Param] = \"LP\"",
              ")"
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "Reserve Dollars LQ",
            "expression": [
              "",
              "CALCULATE(",
              "    [_Reserve_Dollars]",
              "    , 'Comparison'[Param] = \"LQE\"",
              ")"
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\" ThousandSeparator=\"True\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "Reserve Dollars LY",
            "expression": [
              "",
              "CALCULATE(",
              "    [_Reserve_Dollars]",
              "    , 'Comparison'[Param] = \"LY\"",
              ")"
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\" ThousandSeparator=\"True\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "Reserve Dollars vs Reserve Dollars LW",
            "expression": [
              "",
              "[Reserve Dollars] - [Reserve Dollars LW]"
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\" ThousandSeparator=\"True\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "Reserve Dollars vs Reserve Dollars LM",
            "expression": [
              "",
              "[Reserve Dollars] - [Reserve Dollars LM]"
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "Reserve Dollars vs Reserve Dollars LQ",
            "expression": [
              "",
              "[Reserve Dollars] - [Reserve Dollars LQ]"
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\" ThousandSeparator=\"True\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "Reserve Dollars vs Reserve Dollars LY",
            "expression": [
              "",
              "[Reserve Dollars] - [Reserve Dollars LY]"
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\" ThousandSeparator=\"True\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "Reserve Dollars vs LW %",
            "expression": [
              " Divide('FactFinishedGoodsInventory'[Reserve Dollars vs Reserve Dollars LW], 'FactFinishedGoodsInventory'[Reserve Dollars LW],1)",
              "",
              "",
              ""
            ],
            "formatString": "0%;-0%;0%"
          },
          {
            "name": "Reserve Dollars vs LM %",
            "expression": [
              " Divide('FactFinishedGoodsInventory'[Reserve Dollars vs Reserve Dollars LM], 'FactFinishedGoodsInventory'[Reserve Dollars LM],1)",
              "",
              "",
              ""
            ],
            "formatString": "0%;-0%;0%"
          },
          {
            "name": "Reserve Dollars vs LQ %",
            "expression": [
              " Divide('FactFinishedGoodsInventory'[Reserve Dollars vs Reserve Dollars LQ], 'FactFinishedGoodsInventory'[Reserve Dollars LQ],1)",
              "",
              "",
              ""
            ],
            "formatString": "0%;-0%;0%"
          },
          {
            "name": "Reserve Dollars vs LY %",
            "expression": [
              " Divide('FactFinishedGoodsInventory'[Reserve Dollars vs Reserve Dollars LY], 'FactFinishedGoodsInventory'[Reserve Dollars LY],1)",
              "",
              "",
              ""
            ],
            "formatString": "0%;-0%;0%"
          },
          {
            "name": "_Finished Good_Units",
            "expression": [
              "VAR MaxWeekEnd =",
              "        MAX ( FactFinishedGoodsInventory[AsOfDateKey])",
              "RETURN",
              "CALCULATE(",
              "    SUM(FactFinishedGoodsInventory[Units]), ",
              "    'Calendar'[CalendarDateKey] = MaxWeekEnd",
              ")",
              "/*sum(FactFinishedGoodsInventory[Units])*/",
              "",
              "",
              ""
            ],
            "formatString": "#,0",
            "isHidden": true
          },
          {
            "name": "Finished Good Units",
            "expression": [
              "",
              "CALCULATE(",
              "    [_Finished Good_Units]",
              "    , 'Comparison'[Param] = \"Current\"",
              ")"
            ],
            "formatString": "#,0",
            "displayFolder": "Finished Goods\\Total"
          },
          {
            "name": "Finished Good Dollars Compare Start",
            "expression": [
              "",
              "CALCULATE(",
              "    [_Finished Good_USDollars]",
              "    , 'Comparison'[Param] = \"CompareStart\"",
              ")"
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "Local Finished Good Dollars Compare Start",
            "expression": [
              "",
              "CALCULATE(",
              "    [_Finished Good_LocalCurrencyDollars]",
              "    , 'Comparison'[Param] = \"CompareStart\"",
              ")"
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "Reserve Dollars Compare Start",
            "expression": [
              "",
              "CALCULATE(",
              "    [_Reserve_Dollars]",
              "    , 'Comparison'[Param] = \"CompareStart\"",
              ")"
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "Local Finished Good Dollars vs Local Finished Good Dollars Compare Start",
            "expression": [
              "",
              "[Local Finished Good Dollars] - [Local Finished Good Dollars Compare Start]",
              ""
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "Reserve Dollars vs Reserve Dollars Compare Start",
            "expression": [
              "",
              "[Reserve Dollars] - [Reserve Dollars Compare Start]"
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "Local Finished Good Dollars vs Compare Start %",
            "expression": [
              " Divide('FactFinishedGoodsInventory'[Local Finished Good Dollars vs Local Finished Good Dollars Compare Start], 'FactFinishedGoodsInventory'[Local Finished Good Dollars Compare Start],1)",
              "",
              "",
              ""
            ],
            "formatString": "0%;-0%;0%"
          },
          {
            "name": "Reserve Inventory Dollars vs Compare Start %",
            "expression": [
              " Divide('FactFinishedGoodsInventory'[Reserve Dollars vs Reserve Dollars Compare Start], 'FactFinishedGoodsInventory'[Reserve Dollars Compare Start],1)",
              "",
              "",
              ""
            ],
            "formatString": "0%;-0%;0%"
          },
          {
            "name": "Finished Good Dollars Compare End",
            "expression": [
              "",
              "CALCULATE(",
              "    [_Finished Good_USDollars]",
              "    , 'Comparison'[Param] = \"CompareEnd\"",
              ")"
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "Local Finished Good Dollars Compare End",
            "expression": [
              "",
              "CALCULATE(",
              "    [_Finished Good_LocalCurrencyDollars]",
              "    , 'Comparison'[Param] = \"CompareEnd\"",
              ")"
            ],
            "formatString": "\\$#,0.00;(\\$#,0.00);\\$#,0.00",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\" Accuracy=\"2\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "Reserve Dollars Compare End",
            "expression": [
              "",
              "CALCULATE(",
              "    [_Reserve_Dollars]",
              "    , 'Comparison'[Param] = \"CompareEnd\"",
              ")"
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "Finished Good Dollars vs Finished Good Dollars Compare Start",
            "expression": [
              "",
              "[Finished Good Dollars] - [Finished Good Dollars Compare Start]",
              ""
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "Finished Good Dollars Compare End vs Compare Start",
            "expression": [
              "",
              "[Finished Good Dollars Compare End] - [Finished Good Dollars Compare Start]",
              ""
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "Local Finished Good Dollars Compare End vs Compare Start",
            "expression": [
              "",
              "[Local Finished Good Dollars Compare End] - [Local Finished Good Dollars Compare Start]",
              ""
            ],
            "formatString": "\\$#,0.00;(\\$#,0.00);\\$#,0.00",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\" Accuracy=\"2\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "Reserve Dollars Compare End vs Compare Start",
            "expression": [
              "",
              "[Reserve Dollars Compare End] - [Reserve Dollars Compare Start]",
              ""
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "Finished Good Dollars vs Compare Start %",
            "expression": [
              " Divide('FactFinishedGoodsInventory'[Finished Good Dollars vs Finished Good Dollars Compare Start], 'FactFinishedGoodsInventory'[Finished Good Dollars Compare Start],1)",
              "",
              "",
              ""
            ],
            "formatString": "0%;-0%;0%"
          },
          {
            "name": "Finished Good Dollars Compare End vs Compare Start %",
            "expression": [
              " Divide('FactFinishedGoodsInventory'[Finished Good Dollars Compare End vs Compare Start], 'FactFinishedGoodsInventory'[Finished Good Dollars Compare Start],1)",
              "",
              "",
              ""
            ],
            "formatString": "0%;-0%;0%"
          },
          {
            "name": "Local Finished Good Dollars Compare End vs Compare Start %",
            "expression": [
              " Divide('FactFinishedGoodsInventory'[Local Finished Good Dollars Compare End vs Compare Start], 'FactFinishedGoodsInventory'[Local Finished Good Dollars Compare Start],1)",
              "",
              "",
              ""
            ],
            "formatString": "0%;-0%;0%"
          },
          {
            "name": "Reserve Dollars Compare End vs Compare Start %",
            "expression": [
              " Divide('FactFinishedGoodsInventory'[Reserve Dollars Compare End vs Compare Start], 'FactFinishedGoodsInventory'[Reserve Dollars Compare Start],1)",
              "",
              "",
              ""
            ],
            "formatString": "#,0%;-#,0%;#,0%"
          },
          {
            "name": "Finished Good Units LW",
            "expression": [
              "",
              "CALCULATE(",
              "    [_Finished Good_Units]",
              "    , 'Comparison'[Param] = \"LWE\"",
              ")"
            ],
            "formatString": "#,0"
          },
          {
            "name": "Finished Good Units LM",
            "expression": [
              "",
              "CALCULATE(",
              "    [_Finished Good_Units]",
              "    , 'Comparison'[Param] = \"LP\"",
              ")"
            ],
            "formatString": "#,0"
          },
          {
            "name": "Finished Good Units LQ",
            "expression": [
              "",
              "CALCULATE(",
              "    [_Finished Good_Units]",
              "    , 'Comparison'[Param] = \"LQE\"",
              ")"
            ],
            "formatString": "#,0"
          },
          {
            "name": "Finished Good Units LY",
            "expression": [
              "",
              "CALCULATE(",
              "    [_Finished Good_Units]",
              "    , 'Comparison'[Param] = \"LY\"",
              ")"
            ],
            "formatString": "#,0",
            "displayFolder": "Finished Goods\\LY"
          },
          {
            "name": "Finished Good Units Compare Start",
            "expression": [
              "",
              "CALCULATE(",
              "    [_Finished Good_Units]",
              "    , 'Comparison'[Param] = \"CompareStart\"",
              ")"
            ],
            "formatString": "#,0"
          },
          {
            "name": "Finished Good Units Compare End",
            "expression": [
              "",
              "CALCULATE(",
              "    [_Finished Good_Units]",
              "    , 'Comparison'[Param] = \"CompareEnd\"",
              ")"
            ],
            "formatString": "#,0"
          },
          {
            "name": "Finished Good Units vs Finished Good Units LW",
            "expression": [
              "",
              "[Finished Good Units] - [Finished Good Units LW]"
            ],
            "formatString": "#,0"
          },
          {
            "name": "Finished Good Units vs Finished Good Units LM",
            "expression": [
              "",
              "[Finished Good Units] - [Finished Good Units LM]"
            ],
            "formatString": "#,0"
          },
          {
            "name": "Finished Good Units vs Finished Good Units LQ",
            "expression": [
              "",
              "[Finished Good Units] - [Finished Good Units LQ]"
            ],
            "formatString": "#,0"
          },
          {
            "name": "Finished Good Units vs Finished Good Units LY",
            "expression": [
              "",
              "[Finished Good Units] - [Finished Good Units LY]"
            ],
            "formatString": "#,0"
          },
          {
            "name": "Finished Good Units vs Finished Good Units Compare Start",
            "expression": [
              "",
              "[Finished Good Units] - [Finished Good Units Compare Start]"
            ],
            "formatString": "#,0"
          },
          {
            "name": "Finished Good Units Compare End vs Finished Good Units Compare Start",
            "expression": [
              "",
              "[Finished Good Units Compare End] - [Finished Good Units Compare Start]"
            ],
            "formatString": "#,0"
          },
          {
            "name": "Finished Good vs LW %",
            "expression": [
              " Divide('FactFinishedGoodsInventory'[Finished Good Units vs Finished Good Units LW], 'FactFinishedGoodsInventory'[Finished Good Units LW],1)",
              "",
              "",
              ""
            ],
            "formatString": "0%;-0%;0%"
          },
          {
            "name": "Finished Good Units vs LM %",
            "expression": [
              " Divide('FactFinishedGoodsInventory'[Finished Good Units vs Finished Good Units LM], 'FactFinishedGoodsInventory'[Finished Good Units LM],1)",
              "",
              "",
              ""
            ],
            "formatString": "0%;-0%;0%"
          },
          {
            "name": "Finished Good Units vs LQ %",
            "expression": [
              " Divide('FactFinishedGoodsInventory'[Finished Good Units vs Finished Good Units LQ], 'FactFinishedGoodsInventory'[Finished Good Units LQ],1)",
              "",
              "",
              ""
            ],
            "formatString": "0%;-0%;0%"
          },
          {
            "name": "Finished Good Units vs LY %",
            "expression": [
              " Divide('FactFinishedGoodsInventory'[Finished Good Units vs Finished Good Units LY], 'FactFinishedGoodsInventory'[Finished Good Units LY],1)",
              "",
              "",
              ""
            ],
            "formatString": "0%;-0%;0%"
          },
          {
            "name": "Finished Good Units vs Compare Start %",
            "expression": [
              " Divide('FactFinishedGoodsInventory'[Finished Good Units vs Finished Good Units Compare Start], 'FactFinishedGoodsInventory'[Finished Good Units Compare Start],1)",
              "",
              "",
              ""
            ],
            "formatString": "0%;-0%;0%"
          },
          {
            "name": "Finished Good Units Compare End vs Compare Start %",
            "expression": [
              " Divide('FactFinishedGoodsInventory'[Finished Good Units Compare End vs Finished Good Units Compare Start], 'FactFinishedGoodsInventory'[Finished Good Units Compare Start],1)",
              "",
              "",
              ""
            ],
            "formatString": "0%;-0%;0%"
          },
          {
            "name": "_Reserve_Units",
            "expression": [
              "sum(FactFinishedGoodsInventory[ReserveUnits])",
              "",
              "",
              ""
            ],
            "formatString": "#,0",
            "isHidden": true
          },
          {
            "name": "Reserve Units",
            "expression": [
              "",
              "CALCULATE(",
              "    [_Reserve_Units]",
              "    , 'Comparison'[Param] = \"Current\"",
              ")"
            ],
            "formatString": "#,0"
          },
          {
            "name": "Reserve Units LW",
            "expression": [
              "",
              "CALCULATE(",
              "    [_Finished Good_Units]",
              "    , 'Comparison'[Param] = \"LWE\"",
              ")"
            ],
            "formatString": "#,0"
          },
          {
            "name": "Reserve Units LM",
            "expression": [
              "",
              "CALCULATE(",
              "    [_Finished Good_Units]",
              "    , 'Comparison'[Param] = \"LP\"",
              ")"
            ],
            "formatString": "#,0"
          },
          {
            "name": "Reserve Units LQ",
            "expression": [
              "",
              "CALCULATE(",
              "    [_Finished Good_Units]",
              "    , 'Comparison'[Param] = \"LQE\"",
              ")"
            ],
            "formatString": "#,0"
          },
          {
            "name": "Reserve Units LY",
            "expression": [
              "",
              "CALCULATE(",
              "    [_Finished Good_Units]",
              "    , 'Comparison'[Param] = \"LY\"",
              ")"
            ],
            "formatString": "#,0"
          },
          {
            "name": "Reserve Units Compare Start",
            "expression": [
              "",
              "CALCULATE(",
              "    [_Finished Good_Units]",
              "    , 'Comparison'[Param] = \"CompareStart\"",
              ")"
            ],
            "formatString": "#,0"
          },
          {
            "name": "Reserve Units Compare End",
            "expression": [
              "",
              "CALCULATE(",
              "    [_Finished Good_Units]",
              "    , 'Comparison'[Param] = \"CompareEnd\"",
              ")"
            ],
            "formatString": "#,0"
          },
          {
            "name": "Reserve Units vs Reserve Units LW",
            "expression": [
              "",
              "[Reserve Units] - [Reserve Units LW]"
            ],
            "formatString": "#,0"
          },
          {
            "name": "Reserve Units vs Reserve Units LM",
            "expression": [
              "",
              "[Reserve Units] - [Reserve Units LM]"
            ],
            "formatString": "#,0"
          },
          {
            "name": "Reserve Units vs Reserve Units LQ",
            "expression": [
              "",
              "[Reserve Units] - [Reserve Units LQ]"
            ],
            "formatString": "#,0"
          },
          {
            "name": "Reserve Units vs Reserve Units LY",
            "expression": [
              "",
              "[Reserve Units] - [Reserve Units LY]"
            ],
            "formatString": "#,0"
          },
          {
            "name": "Reserve Units vs Reserve Units Compare Start",
            "expression": [
              "",
              "[Reserve Units] - [Reserve Units Compare Start]"
            ],
            "formatString": "#,0"
          },
          {
            "name": "Reserve Units Compare End vs Reserve Units Compare Start",
            "expression": [
              "",
              "[Reserve Units Compare End] - [Reserve Units Compare Start]"
            ],
            "formatString": "#,0"
          },
          {
            "name": "Reserve Units vs LW %",
            "expression": [
              " Divide('FactFinishedGoodsInventory'[Reserve Units vs Reserve Units LW], 'FactFinishedGoodsInventory'[Reserve Units LW],1)",
              "",
              "",
              ""
            ],
            "formatString": "0%;-0%;0%"
          },
          {
            "name": "Reserve Units vs LM %",
            "expression": [
              " Divide('FactFinishedGoodsInventory'[Reserve Units vs Reserve Units LM], 'FactFinishedGoodsInventory'[Reserve Units LM],1)",
              "",
              "",
              ""
            ],
            "formatString": "0%;-0%;0%"
          },
          {
            "name": "Reserve Units vs LQ %",
            "expression": [
              " Divide('FactFinishedGoodsInventory'[Reserve Units vs Reserve Units LQ], 'FactFinishedGoodsInventory'[Reserve Units LQ],1)",
              "",
              "",
              ""
            ],
            "formatString": "0%;-0%;0%"
          },
          {
            "name": "Reserve Units vs LY %",
            "expression": [
              " Divide('FactFinishedGoodsInventory'[Reserve Units vs Reserve Units LY], 'FactFinishedGoodsInventory'[Reserve Units LY],1)",
              "",
              "",
              ""
            ],
            "formatString": "0%;-0%;0%"
          },
          {
            "name": "Reserve Units vs Compare Start %",
            "expression": [
              " Divide('FactFinishedGoodsInventory'[Reserve Units vs Reserve Units Compare Start], 'FactFinishedGoodsInventory'[Reserve Units Compare Start],1)",
              "",
              "",
              ""
            ],
            "formatString": "0%;-0%;0%"
          },
          {
            "name": "Reserve Units Compare End vs Compare Start %",
            "expression": [
              " Divide('FactFinishedGoodsInventory'[Reserve Units Compare End vs Reserve Units Compare Start], 'FactFinishedGoodsInventory'[Reserve Units Compare Start],1)",
              "",
              "",
              ""
            ],
            "formatString": "#,0%;-#,0%;#,0%"
          },
          {
            "name": "_Finished Good_Packages",
            "expression": [
              "VAR MaxWeekEnd =",
              "        MAX ( FactFinishedGoodsInventory[AsOfDateKey])",
              "RETURN",
              "CALCULATE(",
              "    SUM(FactFinishedGoodsInventory[Packages]), ",
              "    'Calendar'[CalendarDateKey] = MaxWeekEnd",
              ")",
              "/*sum(FactFinishedGoodsInventory[Packages])*/",
              "",
              "",
              ""
            ],
            "formatString": "#,0",
            "isHidden": true
          },
          {
            "name": "Finished Good Packages",
            "expression": [
              "",
              "CALCULATE(",
              "    [_Finished Good_Packages]",
              "    , 'Comparison'[Param] = \"Current\"",
              ")"
            ],
            "formatString": "#,0",
            "displayFolder": "Finished Goods\\Total"
          },
          {
            "name": "Finished Good Packages LW",
            "expression": [
              "",
              "CALCULATE(",
              "    [_Finished Good_Packages]",
              "    , 'Comparison'[Param] = \"LWE\"",
              ")"
            ],
            "formatString": "#,0"
          },
          {
            "name": "Finished Good Packages LM",
            "expression": [
              "",
              "CALCULATE(",
              "    [_Finished Good_Packages]",
              "    , 'Comparison'[Param] = \"LP\"",
              ")"
            ],
            "formatString": "#,0"
          },
          {
            "name": "Finished Good Packages LQ",
            "expression": [
              "",
              "CALCULATE(",
              "    [_Finished Good_Packages]",
              "    , 'Comparison'[Param] = \"LQE\"",
              ")"
            ],
            "formatString": "#,0"
          },
          {
            "name": "Finished Good Packages LY",
            "expression": [
              "",
              "CALCULATE(",
              "    [_Finished Good_Packages]",
              "    , 'Comparison'[Param] = \"LY\"",
              ")"
            ],
            "formatString": "#,0",
            "displayFolder": "Finished Goods\\LY"
          },
          {
            "name": "Finished Good Packages Compare Start",
            "expression": [
              "",
              "CALCULATE(",
              "    [_Finished Good_Packages]",
              "    , 'Comparison'[Param] = \"CompareStart\"",
              ")"
            ],
            "formatString": "#,0"
          },
          {
            "name": "Finished Good Packages Compare End",
            "expression": [
              "",
              "CALCULATE(",
              "    [_Finished Good_Packages]",
              "    , 'Comparison'[Param] = \"CompareEnd\"",
              ")"
            ],
            "formatString": "#,0"
          },
          {
            "name": "Finished Good Packages vs Finished Good Packages LW",
            "expression": [
              "",
              "[Finished Good Packages] - [Finished Good Packages LW]"
            ],
            "formatString": "#,0"
          },
          {
            "name": "Finished Good Packages vs Finished Good Packages LM",
            "expression": [
              "",
              "[Finished Good Packages] - [Finished Good Packages LM]"
            ],
            "formatString": "#,0"
          },
          {
            "name": "Finished Good Packages vs Finished Good Packages LQ",
            "expression": [
              "",
              "[Finished Good Packages] - [Finished Good Packages LQ]"
            ],
            "formatString": "#,0"
          },
          {
            "name": "Finished Good Packages vs Finished Good Packages LY",
            "expression": [
              "",
              "[Finished Good Packages] - [Finished Good Packages LY]"
            ],
            "formatString": "#,0"
          },
          {
            "name": "Finished Good Packages vs Finished Good Packages Compare Start",
            "expression": [
              "",
              "[Finished Good Packages] - [Finished Good Packages Compare Start]"
            ],
            "formatString": "#,0"
          },
          {
            "name": "Finished Good Packages Compare End vs Finished Good Packages Compare Start",
            "expression": [
              "",
              "[Finished Good Packages Compare End] - [Finished Good Packages Compare Start]"
            ],
            "formatString": "#,0"
          },
          {
            "name": "Finished Good Packages vs LW %",
            "expression": [
              " Divide('FactFinishedGoodsInventory'[Finished Good Packages vs Finished Good Packages LW], 'FactFinishedGoodsInventory'[Finished Good Packages LW],1)",
              "",
              "",
              ""
            ],
            "formatString": "0%;-0%;0%"
          },
          {
            "name": "Finished Good Packages vs LM %",
            "expression": [
              " Divide('FactFinishedGoodsInventory'[Finished Good Packages vs Finished Good Packages LM], 'FactFinishedGoodsInventory'[Finished Good Packages LM],1)",
              "",
              "",
              ""
            ],
            "formatString": "0%;-0%;0%"
          },
          {
            "name": "Finished Good Packages vs LQ %",
            "expression": [
              " Divide('FactFinishedGoodsInventory'[Finished Good Packages vs Finished Good Packages LQ], 'FactFinishedGoodsInventory'[Finished Good Packages LQ],1)",
              "",
              "",
              ""
            ],
            "formatString": "0%;-0%;0%"
          },
          {
            "name": "Finished Good Packages vs LY %",
            "expression": [
              " Divide('FactFinishedGoodsInventory'[Finished Good Packages vs Finished Good Packages LY], 'FactFinishedGoodsInventory'[Finished Good Packages LY],1)",
              "",
              "",
              ""
            ],
            "formatString": "0%;-0%;0%"
          },
          {
            "name": "Finished Good Packages vs Compare Start %",
            "expression": [
              " Divide('FactFinishedGoodsInventory'[Finished Good Packages vs Finished Good Packages Compare Start], 'FactFinishedGoodsInventory'[Finished Good Packages Compare Start],1)",
              "",
              "",
              ""
            ],
            "formatString": "0%;-0%;0%"
          },
          {
            "name": "Finished Good Packages Compare End vs Compare Start %",
            "expression": [
              " Divide('FactFinishedGoodsInventory'[Finished Good Packages Compare End vs Finished Good Packages Compare Start], 'FactFinishedGoodsInventory'[Finished Good Packages Compare Start],1)",
              "",
              "",
              ""
            ],
            "formatString": "0%;-0%;0%"
          },
          {
            "name": "_Reserve_Packages",
            "expression": [
              "sum(FactFinishedGoodsInventory[ReservePackages])",
              "",
              "",
              ""
            ],
            "formatString": "#,0",
            "isHidden": true
          },
          {
            "name": "Reserve Packages",
            "expression": [
              "",
              "CALCULATE(",
              "    [_Reserve_Packages]",
              "    , 'Comparison'[Param] = \"Current\"",
              ")"
            ],
            "formatString": "#,0"
          },
          {
            "name": "Reserve Packages LW",
            "expression": [
              "",
              "CALCULATE(",
              "    [_Reserve_Packages]",
              "    , 'Comparison'[Param] = \"LWE\"",
              ")"
            ],
            "formatString": "#,0"
          },
          {
            "name": "Reserve Packages LM",
            "expression": [
              "",
              "CALCULATE(",
              "    [_Reserve_Packages]",
              "    , 'Comparison'[Param] = \"LP\"",
              ")"
            ],
            "formatString": "#,0"
          },
          {
            "name": "Reserve Packages LQ",
            "expression": [
              "",
              "CALCULATE(",
              "    [_Reserve_Packages]",
              "    , 'Comparison'[Param] = \"LQE\"",
              ")"
            ],
            "formatString": "#,0"
          },
          {
            "name": "Reserve Packages LY",
            "expression": [
              "",
              "CALCULATE(",
              "    [_Reserve_Packages]",
              "    , 'Comparison'[Param] = \"LY\"",
              ")"
            ],
            "formatString": "#,0"
          },
          {
            "name": "Reserve Packages Compare Start",
            "expression": [
              "",
              "CALCULATE(",
              "    [_Reserve_Packages]",
              "    , 'Comparison'[Param] = \"CompareStart\"",
              ")"
            ],
            "formatString": "#,0"
          },
          {
            "name": "Reserve Packages Compare End",
            "expression": [
              "",
              "CALCULATE(",
              "    [_Reserve_Packages]",
              "    , 'Comparison'[Param] = \"CompareEnd\"",
              ")"
            ],
            "formatString": "#,0"
          },
          {
            "name": "Reserve Packages vs Reserve Packages LW",
            "expression": [
              "",
              "[Reserve Packages] - [Reserve Packages LW]"
            ],
            "formatString": "#,0"
          },
          {
            "name": "Reserve Packages vs Reserve Packages LM",
            "expression": [
              "",
              "[Reserve Packages] - [Reserve Packages LM]"
            ],
            "formatString": "#,0"
          },
          {
            "name": "Reserve Packages vs Reserve Packages LQ",
            "expression": [
              "",
              "[Reserve Packages] - [Reserve Packages LQ]"
            ],
            "formatString": "#,0"
          },
          {
            "name": "Reserve Packages vs Reserve Packages LY",
            "expression": [
              "",
              "[Reserve Packages] - [Reserve Packages LY]"
            ],
            "formatString": "#,0"
          },
          {
            "name": "Reserve Packages vs Reserve Packages Compare Start",
            "expression": [
              "",
              "[Reserve Packages] - [Reserve Packages Compare Start]"
            ],
            "formatString": "#,0"
          },
          {
            "name": "Reserve Packages Compare End vs Reserve Packages Compare Start",
            "expression": [
              "",
              "[Reserve Packages Compare End] - [Reserve Packages Compare Start]"
            ],
            "formatString": "#,0"
          },
          {
            "name": "Reserve Packages vs LW %",
            "expression": [
              " Divide('FactFinishedGoodsInventory'[Reserve Packages vs Reserve Packages LW], 'FactFinishedGoodsInventory'[Reserve Packages LW],1)",
              "",
              "",
              ""
            ],
            "formatString": "0%;-0%;0%"
          },
          {
            "name": "Reserve Packages vs LM %",
            "expression": [
              " Divide('FactFinishedGoodsInventory'[Reserve Packages vs Reserve Packages LM], 'FactFinishedGoodsInventory'[Reserve Packages LM],1)",
              "",
              "",
              ""
            ],
            "formatString": "0%;-0%;0%"
          },
          {
            "name": "Reserve Packages vs LQ %",
            "expression": [
              " Divide('FactFinishedGoodsInventory'[Reserve Packages vs Reserve Packages LQ], 'FactFinishedGoodsInventory'[Reserve Packages LQ],1)",
              "",
              "",
              ""
            ],
            "formatString": "0%;-0%;0%"
          },
          {
            "name": "Reserve Packages vs LY %",
            "expression": [
              " Divide('FactFinishedGoodsInventory'[Reserve Packages vs Reserve Packages LY], 'FactFinishedGoodsInventory'[Reserve Packages LY],1)",
              "",
              "",
              ""
            ],
            "formatString": "0%;-0%;0%"
          },
          {
            "name": "Reserve Packages vs Compare Start %",
            "expression": [
              " Divide('FactFinishedGoodsInventory'[Reserve Packages vs Reserve Packages Compare Start], 'FactFinishedGoodsInventory'[Reserve Packages Compare Start],1)",
              "",
              "",
              ""
            ],
            "formatString": "0%;-0%;0%"
          },
          {
            "name": "Reserve Packages Compare End vs Compare Start %",
            "expression": [
              " Divide('FactFinishedGoodsInventory'[Reserve Packages Compare End vs Reserve Packages Compare Start], 'FactFinishedGoodsInventory'[Reserve Packages Compare Start],1)",
              "",
              "",
              ""
            ],
            "formatString": "0%;-0%;0%"
          },
          {
            "name": "Finished Good Packages OnHand",
            "expression": [
              " sumx(FILTER(FactFinishedGoodsInventory,RELATED(DimFinancialMeasure[FinancialAccountKey])=\"21100\"),FactFinishedGoodsInventory[Packages])",
              ""
            ],
            "formatString": "#,0"
          },
          {
            "name": "_Finished Good Units OnHand",
            "expression": [
              " sumx(FILTER(FactFinishedGoodsInventory,RELATED(DimFinancialMeasure[FinancialAccountKey])=\"21100\"),FactFinishedGoodsInventory[Units])",
              ""
            ],
            "formatString": "#,0"
          },
          {
            "name": "Local Finished Good Dollars OnHand",
            "expression": [
              " sumx(FILTER(FactFinishedGoodsInventory,RELATED(DimFinancialMeasure[FinancialAccountKey])=\"21100\"),FactFinishedGoodsInventory[LocalCurrencyDollars])",
              ""
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\" ThousandSeparator=\"True\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "Finished Good Dollars OnHand",
            "expression": [
              " sumx(FILTER(FactFinishedGoodsInventory,RELATED(DimFinancialMeasure[FinancialAccountKey])=\"21100\"),FactFinishedGoodsInventory[USDollars])",
              ""
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "Inventory Reserve Units OnHand",
            "expression": [
              " sumx(FILTER(FactFinishedGoodsInventory,RELATED(DimFinancialMeasure[FinancialAccountKey])=\"21100\"),FactFinishedGoodsInventory[ReserveUnits])",
              ""
            ],
            "formatString": "#,0"
          },
          {
            "name": "Inventory Reserve Packages OnHand",
            "expression": [
              " sumx(FILTER(FactFinishedGoodsInventory,RELATED(DimFinancialMeasure[FinancialAccountKey])=\"21100\"),FactFinishedGoodsInventory[ReservePackages])",
              ""
            ],
            "formatString": "#,0"
          },
          {
            "name": "Finished Good Packages Intransit",
            "expression": [
              " sumx(FILTER(FactFinishedGoodsInventory,RELATED(DimFinancialMeasure[FinancialAccountKey])=\"21200\"),FactFinishedGoodsInventory[Packages])",
              ""
            ],
            "formatString": "#,0"
          },
          {
            "name": "_Finished Good Units Intransit",
            "expression": [
              " sumx(FILTER(FactFinishedGoodsInventory,RELATED(DimFinancialMeasure[FinancialAccountKey])=\"21200\"),FactFinishedGoodsInventory[Units])",
              ""
            ],
            "formatString": "#,0"
          },
          {
            "name": "Local Finished Good Dollars Intransit",
            "expression": [
              " sumx(FILTER(FactFinishedGoodsInventory,RELATED(DimFinancialMeasure[FinancialAccountKey])=\"21200\"),FactFinishedGoodsInventory[LocalCurrencyDollars])",
              ""
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\" ThousandSeparator=\"True\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "Finished Good Dollars Intransit",
            "expression": [
              " sumx(FILTER(FactFinishedGoodsInventory,RELATED(DimFinancialMeasure[FinancialAccountKey])=\"21200\"),FactFinishedGoodsInventory[USDollars])",
              ""
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "Inventory Reserve Units Intransit",
            "expression": [
              " sumx(FILTER(FactFinishedGoodsInventory,RELATED(DimFinancialMeasure[FinancialAccountKey])=\"21200\"),FactFinishedGoodsInventory[ReserveUnits])",
              ""
            ],
            "formatString": "#,0"
          },
          {
            "name": "Inventory Reserve Packages Intransit",
            "expression": [
              " sumx(FILTER(FactFinishedGoodsInventory,RELATED(DimFinancialMeasure[FinancialAccountKey])=\"21200\"),FactFinishedGoodsInventory[ReservePackages])",
              ""
            ],
            "formatString": "#,0"
          },
          {
            "name": "_SKU_Count",
            "expression": [
              "/*DISTINCTCOUNTNOBLANK(FactFinishedGoodsInventory[SKU])*/",
              "CALCULATE(DISTINCTCOUNTNOBLANK(DimItem[SKUCount]),FILTER(DimItem,OR(DimItem[SKUCount] <>BLANK(),DimItem[SKUCount]<>\"SKIP\")))"
            ],
            "formatString": "#,0"
          },
          {
            "name": "Inventory SKU Count",
            "expression": [
              "",
              "CALCULATE(",
              "[_SKU_Count],CROSSFILTER(FactFinishedGoodsInventory[ItemKey],DimItem[ItemKey],Both),",
              " FactFinishedGoodsInventory[Units] > 0",
              " , 'Comparison'[Param] = \"Current\"",
              " )",
              " /* CALCULATE(",
              "[_SKU_Count],",
              " FactFinishedGoodsInventory[Units] > 0",
              " , 'Comparison'[Param] = \"Current\"",
              " )*/"
            ],
            "formatString": "#,0",
            "displayFolder": "SKUCount\\Total"
          },
          {
            "name": "Inventory SKU Count LYE",
            "expression": [
              "",
              "CALCULATE(",
              "[_SKU_Count],CROSSFILTER(FactFinishedGoodsInventory[ItemKey],DimItem[ItemKey],Both),",
              " FactFinishedGoodsInventory[Units] > 0",
              " , 'Comparison'[Param] = \"LYE\"",
              " )"
            ],
            "formatString": "#,0",
            "displayFolder": "SKUCount\\LYE"
          },
          {
            "name": "Inventory SKU Count Add vs LYE",
            "expression": [
              "",
              "VAR Prior_SKUs =",
              "    CALCULATETABLE (",
              "        DISTINCT ( 'DimItem'[SKUCount] ),",
              "        CROSSFILTER ( FactFinishedGoodsInventory[ItemKey], 'DimItem'[ItemKey], BOTH ),",
              "        'FactFinishedGoodsInventory'[units] > 0,",
              "        Comparison[Param]=\"LYE\"",
              "            ) ",
              "//Get List of SKUs for Selected week",
              "VAR Current_SKUs =",
              "    CALCULATETABLE (",
              "        DISTINCT ( 'DimItem'[SKUCount] ),",
              "        CROSSFILTER ( FactFinishedGoodsInventory[ItemKey], 'DimItem'[ItemKey], BOTH ),",
              "        'FactFinishedGoodsInventory'[units] > 0",
              "    ) ",
              "//Get the list of SKUs added in Current",
              "VAR except_skus =",
              "    EXCEPT ( Current_SKUs, Prior_SKUs )",
              "VAR except_skus_count =",
              "    COUNTROWS ( except_skus )",
              "RETURN",
              "    except_skus_count"
            ],
            "formatString": "#,0",
            "displayFolder": "SKUCount\\LYE"
          },
          {
            "name": "Inventory SKU Count Drops vs LYE",
            "expression": [
              "",
              "VAR Prior_SKUs =",
              "    CALCULATETABLE (",
              "        DISTINCT ( 'DimItem'[SKUCount] ),",
              "        CROSSFILTER ( FactFinishedGoodsInventory[ItemKey], 'DimItem'[ItemKey], BOTH ),",
              "        'FactFinishedGoodsInventory'[units] > 0,",
              "        Comparison[Param]=\"LYE\"",
              "            ) ",
              "//Get List of SKUs for Selected week",
              "VAR Current_SKUs =",
              "    CALCULATETABLE (",
              "        DISTINCT ( 'DimItem'[SKUCount] ),",
              "        CROSSFILTER ( FactFinishedGoodsInventory[ItemKey], 'DimItem'[ItemKey], BOTH ),",
              "        'FactFinishedGoodsInventory'[units] > 0",
              "    ) ",
              "//Get the list of SKUs added in Current",
              "VAR except_skus =",
              "    EXCEPT ( Prior_SKUs , Current_SKUs)",
              "VAR except_skus_count =",
              "    COUNTROWS ( except_skus )",
              "RETURN",
              "    except_skus_count"
            ],
            "formatString": "#,0",
            "displayFolder": "SKUCount\\LYE"
          },
          {
            "name": "Inventory SKU Count Change vs LYE",
            "expression": "[Inventory SKU Count Add vs LYE]-[Inventory SKU Count Drops vs LYE]",
            "formatString": "#,0",
            "displayFolder": "SKUCount\\LYE"
          },
          {
            "name": "Inventory SKU Count vs LYE %",
            "expression": [
              " if(Isblank([Inventory SKU Count]),blank(),Divide([Inventory SKU Count Change vs LYE], [Inventory SKU Count LYE],-1)",
              ")"
            ],
            "formatString": "0%;-0%;0%",
            "displayFolder": "SKUCount\\LYE"
          },
          {
            "name": "Inventory SKU Count Change vs LYE(ABS)",
            "expression": "ABS([Inventory SKU Count Add vs LYE]-[Inventory SKU Count Drops vs LYE])",
            "formatString": "#,0",
            "displayFolder": "SKUCount\\LYE"
          },
          {
            "name": "Inventory SKU Count Change vs LYE %(ABS)",
            "expression": [
              " if(Isblank([Inventory SKU Count]),blank(),Divide([Inventory SKU Count Change vs LYE(ABS)], [Inventory SKU Count LYE],-1)",
              ")"
            ],
            "formatString": "0%;-0%;0%",
            "displayFolder": "SKUCount\\LYE"
          },
          {
            "name": "Inventory SKU Count Drop vs LYE(neg)",
            "expression": "[Inventory SKU Count Drops vs LYE]*-1",
            "formatString": "#,0",
            "displayFolder": "SKUCount\\LYE"
          },
          {
            "name": "Inventory SKU Count LME",
            "expression": [
              "",
              "CALCULATE(",
              "[_SKU_Count],CROSSFILTER(FactFinishedGoodsInventory[ItemKey],DimItem[ItemKey],Both),",
              " FactFinishedGoodsInventory[Units] > 0",
              " , 'Comparison'[Param] = \"LPE\"",
              " )"
            ],
            "formatString": "#,0",
            "displayFolder": "SKUCount\\LME"
          },
          {
            "name": "Inventory SKU Count LY",
            "expression": [
              "",
              "CALCULATE(",
              "[_SKU_Count],CROSSFILTER(FactFinishedGoodsInventory[ItemKey],DimItem[ItemKey],Both),",
              " FactFinishedGoodsInventory[Units] > 0",
              " , 'Comparison'[Param] = \"LY\"",
              " )"
            ],
            "formatString": "#,0",
            "displayFolder": "SKUCount\\LY"
          },
          {
            "name": "Inventory SKU Count Add vs LME",
            "expression": [
              "",
              "VAR Prior_SKUs =",
              "    CALCULATETABLE (",
              "        DISTINCT ( 'DimItem'[SKUCount] ),",
              "        CROSSFILTER ( FactFinishedGoodsInventory[ItemKey], 'DimItem'[ItemKey], BOTH ),",
              "        'FactFinishedGoodsInventory'[units] > 0,",
              "        Comparison[Param]=\"LPE\"",
              "            ) ",
              "//Get List of SKUs for Selected week",
              "VAR Current_SKUs =",
              "    CALCULATETABLE (",
              "        DISTINCT ( 'DimItem'[SKUCount] ),",
              "        CROSSFILTER ( FactFinishedGoodsInventory[ItemKey], 'DimItem'[ItemKey], BOTH ),",
              "        'FactFinishedGoodsInventory'[units] > 0",
              "    ) ",
              "//Get the list of SKUs added in Current",
              "VAR except_skus =",
              "    EXCEPT ( Current_SKUs, Prior_SKUs )",
              "VAR except_skus_count =",
              "    COUNTROWS ( except_skus )",
              "RETURN",
              "    except_skus_count"
            ],
            "formatString": "#,0",
            "displayFolder": "SKUCount\\LME"
          },
          {
            "name": "Inventory SKU Count Add vs LY",
            "expression": [
              "",
              "VAR Prior_SKUs =",
              "    CALCULATETABLE (",
              "        DISTINCT ( 'DimItem'[SKUCount] ),",
              "        CROSSFILTER ( FactFinishedGoodsInventory[ItemKey], 'DimItem'[ItemKey], BOTH ),",
              "        'FactFinishedGoodsInventory'[units] > 0,",
              "        Comparison[Param]=\"LY\"",
              "            ) ",
              "//Get List of SKUs for Selected week",
              "VAR Current_SKUs =",
              "    CALCULATETABLE (",
              "        DISTINCT ( 'DimItem'[SKUCount] ),",
              "        CROSSFILTER ( FactFinishedGoodsInventory[ItemKey], 'DimItem'[ItemKey], BOTH ),",
              "        'FactFinishedGoodsInventory'[units] > 0",
              "    ) ",
              "//Get the list of SKUs added in Current",
              "VAR except_skus =",
              "    EXCEPT ( Current_SKUs, Prior_SKUs )",
              "VAR except_skus_count =",
              "    COUNTROWS ( except_skus )",
              "RETURN",
              "    except_skus_count"
            ],
            "formatString": "#,0",
            "displayFolder": "SKUCount\\LY"
          },
          {
            "name": "Inventory SKU Count Drops vs LME",
            "expression": [
              "",
              "VAR Prior_SKUs =",
              "    CALCULATETABLE (",
              "        DISTINCT ( 'DimItem'[SKUCount] ),",
              "        CROSSFILTER ( FactFinishedGoodsInventory[ItemKey], 'DimItem'[ItemKey], BOTH ),",
              "        'FactFinishedGoodsInventory'[units] > 0,",
              "        Comparison[Param]=\"LPE\"",
              "            ) ",
              "//Get List of SKUs for Selected week",
              "VAR Current_SKUs =",
              "    CALCULATETABLE (",
              "        DISTINCT ( 'DimItem'[SKUCount] ),",
              "        CROSSFILTER ( FactFinishedGoodsInventory[ItemKey], 'DimItem'[ItemKey], BOTH ),",
              "        'FactFinishedGoodsInventory'[units] > 0",
              "    ) ",
              "//Get the list of SKUs added in Current",
              "VAR except_skus =",
              "    EXCEPT ( Prior_SKUs , Current_SKUs)",
              "VAR except_skus_count =",
              "    COUNTROWS ( except_skus )",
              "RETURN",
              "    except_skus_count"
            ],
            "formatString": "#,0",
            "displayFolder": "SKUCount\\LME"
          },
          {
            "name": "Inventory SKU Count Drops vs LY",
            "expression": [
              "",
              "VAR Prior_SKUs =",
              "    CALCULATETABLE (",
              "        DISTINCT ( 'DimItem'[SKUCount] ),",
              "        CROSSFILTER ( FactFinishedGoodsInventory[ItemKey], 'DimItem'[ItemKey], BOTH ),",
              "        'FactFinishedGoodsInventory'[units] > 0,",
              "        Comparison[Param]=\"LY\"",
              "            ) ",
              "//Get List of SKUs for Selected week",
              "VAR Current_SKUs =",
              "    CALCULATETABLE (",
              "        DISTINCT ( 'DimItem'[SKUCount] ),",
              "        CROSSFILTER ( FactFinishedGoodsInventory[ItemKey], 'DimItem'[ItemKey], BOTH ),",
              "        'FactFinishedGoodsInventory'[units] > 0",
              "    ) ",
              "//Get the list of SKUs added in Current",
              "VAR except_skus =",
              "    EXCEPT ( Prior_SKUs , Current_SKUs)",
              "VAR except_skus_count =",
              "    COUNTROWS ( except_skus )",
              "RETURN",
              "    except_skus_count"
            ],
            "formatString": "#,0",
            "displayFolder": "SKUCount\\LY"
          },
          {
            "name": "Inventory SKU Count Change vs LME",
            "expression": "[Inventory SKU Count Add vs LME]-[Inventory SKU Count Drops vs LME]",
            "formatString": "#,0",
            "displayFolder": "SKUCount\\LME"
          },
          {
            "name": "Inventory SKU Count vs LY",
            "expression": " [Inventory SKU Count]-[Inventory SKU Count LY]",
            "formatString": "#,0",
            "displayFolder": "SKUCount\\LY"
          },
          {
            "name": "Inventory SKU Count vs LME %",
            "expression": [
              " if(Isblank([Inventory SKU Count]),blank(),Divide([Inventory SKU Count], [Inventory SKU Count LME],-1)",
              "",
              "",
              ")"
            ],
            "formatString": "0%;-0%;0%",
            "displayFolder": "SKUCount\\LME"
          },
          {
            "name": "Inventory SKU Count vs LY %",
            "expression": [
              " if(Isblank([Inventory SKU Count vs LY]),blank(),Divide([Inventory SKU Count], [Inventory SKU Count LY],-1)",
              "",
              "",
              ")"
            ],
            "formatString": "0%;-0%;0%",
            "displayFolder": "SKUCount\\LY"
          },
          {
            "name": "Inventory SKU Count Change vs LY",
            "expression": "[Inventory SKU Count Add vs LY]-[Inventory SKU Count Drops vs LY]",
            "formatString": "#,0",
            "displayFolder": "SKUCount\\LY"
          },
          {
            "name": "Inventory SKU Count Drop vs LY(neg)",
            "expression": "[Inventory SKU Count Drops vs LY]*-1",
            "formatString": "#,0",
            "displayFolder": "SKUCount\\LY"
          },
          {
            "name": "Inventory SKU Count Drop vs LME(neg)",
            "expression": "[Inventory SKU Count Drops vs LME]*-1",
            "formatString": "#,0",
            "displayFolder": "SKUCount\\LME"
          },
          {
            "name": "Inventory SKY Count LME vs LYE",
            "expression": "[Inventory SKU Count LME]-[Inventory SKU Count LYE]",
            "formatString": "#,0",
            "displayFolder": "SKUCount\\LME"
          },
          {
            "name": "Inventory SKU Count LME vs LYE %",
            "expression": "Divide([Inventory SKU Count LME],[Inventory SKU Count LYE])-1",
            "formatString": "0%;-0%;0%",
            "displayFolder": "SKUCount\\LME"
          },
          {
            "name": "Inventory Global SKU Count",
            "expression": "[Inventory SKU Count]+[SRE SKU Count]",
            "formatString": "#,0",
            "displayFolder": "GlobalKPIs\\SKUCount"
          },
          {
            "name": "Inventory Global SKU Count LME",
            "expression": "[Inventory SKU Count LME]+[SRE SKU Count LME]",
            "formatString": "#,0",
            "displayFolder": "GlobalKPIs\\SKUCount"
          },
          {
            "name": "Inventory Global SKU Count LYE",
            "expression": "[Inventory SKU Count LYE]+[SRE SKU Count LYE]",
            "formatString": "#,0",
            "displayFolder": "GlobalKPIs\\SKUCount"
          },
          {
            "name": "Inventory Global SKU Count LME vs LYE",
            "expression": "[Inventory Global SKU Count LME] - [Inventory Global SKU Count LYE]",
            "formatString": "#,0",
            "displayFolder": "GlobalKPIs\\SKUCount"
          },
          {
            "name": "Inventory Global SKU Count LME vs LYE %",
            "expression": "DIVIDE([Inventory Global SKU Count LME] , [Inventory Global SKU Count LYE])-1",
            "formatString": "0%;-0%;0%",
            "displayFolder": "GlobalKPIs\\SKUCount"
          },
          {
            "name": "SKY Count Units BInary Flag",
            "expression": [
              "",
              "VAR TotalUnits_SKUDateFacility = ",
              "CALCULATE (",
              "    SUMX(",
              "        FactFinishedGoodsInventory,",
              "        FactFinishedGoodsInventory[units]",
              "    ),",
              "    ALLEXCEPT (",
              "        'FactFinishedGoodsInventory',",
              "        'FactFinishedGoodsInventory'[ItemKey],",
              "        FactFinishedGoodsInventory[AsOfDateKey],",
              "        'FactFinishedGoodsInventory'[BusinessKey]",
              "    )",
              ")",
              "VAR MaxUnits_SKUDateFacility = ",
              "CALCULATE (",
              "    MAX(FactFinishedGoodsInventory[units]),",
              "    ALLEXCEPT (",
              "         'FactFinishedGoodsInventory',",
              "        'FactFinishedGoodsInventory'[ItemKey],",
              "        FactFinishedGoodsInventory[AsOfDateKey],",
              "        'FactFinishedGoodsInventory'[BusinessKey]",
              "    )",
              ")",
              "VAR Result = ",
              "SWITCH(TRUE(),",
              "    TotalUnits_SKUDateFacility > 0 , \"Total Positive Units (counted)\",",
              "    MaxUnits_SKUDateFacility < 0, \"Total Negative Units (not counted)\",",
              "    \"Total Negative Units, but at least one positive facility (counted)\"",
              ")",
              "RETURN",
              "Result"
            ],
            "formatString": "#,0",
            "displayFolder": "SKUCount\\Total"
          },
          {
            "name": "Finished Good Dollars per SKU",
            "expression": " DIVIDE([Finished Good Dollars], [Inventory SKU Count])",
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "displayFolder": "Statistics\\Per SKU",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "Finished Good Dollars Turns (2pt)",
            "expression": [
              " var SelectedDay = max('Calendar'[SequenceDate])",
              "var LastDay = SelectedDay",
              "var SelectedDayBusSeqDay = LOOKUPVALUE('Calendar'[BusinessDayInYear],'Calendar'[SequenceDate],SelectedDay)",
              "var SelectedDayBusYr = LOOKUPVALUE('Calendar'[BusinessYear],'Calendar'[SequenceDate],SelectedDay)",
              "var FirstDay1 = CALCULATE(MAX('Calendar'[SequenceDate]),FILTER(ALL('Calendar'),and('Calendar'[BusinessDayInYear]=SelectedDayBusSeqDay,'Calendar'[BusinessYear]=SelectedDayBusYr-1)))",
              "var MaxBusinessDayLY = CALCULATE(max ('Calendar'[BusinessDayInYear]),FILTER(ALL('Calendar'),'Calendar'[BusinessYear]=SelectedDayBusYr-1))",
              "var FirstDay =  if(isblank(FirstDay1),CALCULATE(MAX('Calendar'[SequenceDate]),FILTER(ALL('Calendar'),and('Calendar'[BusinessDayInYear]=MaxBusinessDayLY,'Calendar'[BusinessYear]=SelectedDayBusYr-1))),FirstDay1)",
              "VAR TwelveMonthsCOGS = ",
              "IF (",
              "    [ShowValueForDates],    ",
              "    VAR Result = CALCULATE ( [Pre-incentive COGS $],  REMOVEFILTERS('Calendar'),",
              "            'Calendar'[SequenceDate] >=FirstDay && 'Calendar'[SequenceDate] <= LastDay",
              "        )",
              "    RETURN  Result",
              ")",
              "VAR CurrentMonthInv = [Finished Good Dollars]",
              "VAR LastYearInv =",
              "    VAR CalendarIsFiltered = ISFILTERED ( 'calendar' )",
              "    VAR MaxDate = LOOKUPVALUE ('Calendar'[LY Day Date],'Calendar'[CalendarDateKey], [LastDateWithData] )",
              "    RETURN",
              "        IF (",
              "            CalendarIsFiltered && [ShowValueForDates],",
              "            CALCULATE ([Finished Good Dollars], FILTER ( ALL ( 'Calendar' ),",
              "                    CONTAINS (VALUES ( 'Calendar'[LY Day Date] ),                      'Calendar'[LY Day Date], 'Calendar'[CalendarDate]  ) )  ),",
              "            CALCULATE ( [Finished Good Dollars] , 'Calendar'[CalendarDate] = MaxDate )",
              "        )",
              "VAR AvgInv =  IF ([ShowValueForDates], (CurrentMonthInv + LastYearInv) / 2  )",
              "VAR Result = DIVIDE(TwelveMonthsCOGS, AvgInv)",
              "RETURN Result"
            ],
            "displayFolder": "Statistics\\Turns"
          },
          {
            "name": "Finished Good Dollars Turns (2pt) Average Inventory",
            "expression": [
              "",
              "var SelectedDay = max('Calendar'[SequenceDate])",
              "var LastDay = SelectedDay",
              "var SelectedDayBusSeqDay = LOOKUPVALUE('Calendar'[BusinessDayInYear],'Calendar'[SequenceDate],SelectedDay)",
              "var SelectedDayBusYr = LOOKUPVALUE('Calendar'[BusinessYear],'Calendar'[SequenceDate],SelectedDay)",
              "var FirstDay1 = CALCULATE(MAX('Calendar'[SequenceDate]),FILTER(ALL('Calendar'),and('Calendar'[BusinessDayInYear]=SelectedDayBusSeqDay,'Calendar'[BusinessYear]=SelectedDayBusYr-1)))",
              "var MaxBusinessDayLY = CALCULATE(max ('Calendar'[BusinessDayInYear]),FILTER(ALL('Calendar'),'Calendar'[BusinessYear]=SelectedDayBusYr-1))",
              "var FirstDay =  if(isblank(FirstDay1),CALCULATE(MAX('Calendar'[SequenceDate]),FILTER(ALL('Calendar'),and('Calendar'[BusinessDayInYear]=MaxBusinessDayLY,'Calendar'[BusinessYear]=SelectedDayBusYr-1))),FirstDay1)",
              "",
              "VAR TwelveMonthsCOGS = ",
              "IF (",
              "    [ShowValueForDates],   ",
              "    CALCULATE ( [Pre-incentive COGS $], REMOVEFILTERS('Calendar'), 'Calendar'[SequenceDate] >=FirstDay && 'Calendar'[SequenceDate] <= LastDay )",
              ")",
              "VAR CurrentMonthInv = [Finished Good Dollars]",
              "VAR LastYearInv =",
              "    VAR CalendarIsFiltered = ISFILTERED ( 'calendar' )",
              "    VAR MaxDate = LOOKUPVALUE ('Calendar'[LY Day Date], 'Calendar'[CalendarDateKey], [LastDateWithData]   )",
              "    RETURN",
              "        IF (",
              "            CalendarIsFiltered && [ShowValueForDates],",
              "            CALCULATE (",
              "                [Finished Good Dollars],",
              "                FILTER (ALL( 'Calendar' ), CONTAINS (VALUES ( 'Calendar'[LY Day Date] ),'Calendar'[LY Day Date], 'Calendar'[CalendarDate]  )",
              "                )",
              "            ),",
              "            CALCULATE ( [Finished Good Dollars] , 'Calendar'[CalendarDate] = MaxDate )",
              "        )",
              "VAR AvgInv = IF ([ShowValueForDates], (CurrentMonthInv + LastYearInv) / 2  )",
              "VAR Result = DIVIDE(TwelveMonthsCOGS, AvgInv)",
              "RETURN AvgInv"
            ]
          },
          {
            "name": "Finished Good Dollars Turns (2pt) 12M COGS",
            "expression": [
              "",
              "var SelectedDay = max('Calendar'[SequenceDate])",
              "var LastDay = SelectedDay",
              "var SelectedDayBusSeqDay = LOOKUPVALUE('Calendar'[BusinessDayInYear],'Calendar'[SequenceDate],SelectedDay)",
              "var SelectedDayBusYr = LOOKUPVALUE('Calendar'[BusinessYear],'Calendar'[SequenceDate],SelectedDay)",
              "var FirstDay1 = CALCULATE(MAX('Calendar'[SequenceDate]),FILTER(ALL('Calendar'),and('Calendar'[BusinessDayInYear]=SelectedDayBusSeqDay,'Calendar'[BusinessYear]=SelectedDayBusYr-1)))",
              "var MaxBusinessDayLY = CALCULATE(max ('Calendar'[BusinessDayInYear]),FILTER(ALL('Calendar'),'Calendar'[BusinessYear]=SelectedDayBusYr-1))",
              "VAR FirstDay =  if(isblank(FirstDay1),CALCULATE(MAX('Calendar'[SequenceDate]),FILTER(ALL('Calendar'),and('Calendar'[BusinessDayInYear]=MaxBusinessDayLY,'Calendar'[BusinessYear]=SelectedDayBusYr-1))),FirstDay1)",
              "",
              "VAR TwelveMonthsCOGS = ",
              "IF (",
              "    [ShowValueForDates],   ",
              "    VAR Result =",
              "        CALCULATE (",
              "            [Pre-incentive COGS $],",
              "            REMOVEFILTERS('Calendar'),",
              "            'Calendar'[SequenceDate] >=FirstDay",
              "                && 'Calendar'[SequenceDate] <= LastDay",
              "        )",
              "    RETURN",
              "    Result",
              "",
              ")",
              "VAR CurrentMonthInv = [Finished Good Dollars]",
              "VAR LastYearInv =",
              "    VAR CalendarIsFiltered =",
              "        ISFILTERED ( 'calendar' )",
              "    VAR MaxDate =",
              "        LOOKUPVALUE (",
              "            'Calendar'[LY Day Date],",
              "            'Calendar'[CalendarDateKey], [LastDateWithData]",
              "        )",
              "    RETURN",
              "        IF (",
              "            CalendarIsFiltered && [ShowValueForDates],",
              "            CALCULATE (",
              "                [Finished Good Dollars],",
              "                FILTER (",
              "                    ALL ( 'Calendar' ),",
              "                    CONTAINS (",
              "                        VALUES ( 'Calendar'[LY Day Date] ),",
              "                        'Calendar'[LY Day Date], 'Calendar'[CalendarDate]",
              "                    )",
              "                )",
              "            ),",
              "            CALCULATE ( [Finished Good Dollars] , 'Calendar'[CalendarDate] = MaxDate )",
              "        )",
              "",
              "VAR AvgInv = ",
              "    IF (",
              "        [ShowValueForDates],",
              "            (CurrentMonthInv + LastYearInv) / 2",
              "    )",
              "",
              "VAR Result = DIVIDE(TwelveMonthsCOGS, AvgInv)",
              "",
              "RETURN",
              "TwelveMonthsCOGS"
            ],
            "displayFolder": "Statistics\\Turns"
          },
          {
            "name": "Finished Good Dollars GMROI (2pt)",
            "expression": [
              "",
              "VAR SelectedDay = max('Calendar'[SequenceDate])",
              "VAR LastDay = SelectedDay",
              "VAR SelectedDayBusSeqDay = LOOKUPVALUE('Calendar'[BusinessDayInYear],'Calendar'[SequenceDate],SelectedDay)",
              "VAR SelectedDayBusYr = LOOKUPVALUE('Calendar'[BusinessYear],'Calendar'[SequenceDate],SelectedDay)",
              "VAR FirstDay1 = CALCULATE(MAX('Calendar'[SequenceDate]),FILTER(ALL('Calendar'),and('Calendar'[BusinessDayInYear]=SelectedDayBusSeqDay,'Calendar'[BusinessYear]=SelectedDayBusYr-1)))",
              "VAR MaxBusinessDayLY = CALCULATE(max ('Calendar'[BusinessDayInYear]),FILTER(ALL('Calendar'),'Calendar'[BusinessYear]=SelectedDayBusYr-1))",
              "VAR FirstDay =  if(isblank(FirstDay1),CALCULATE(MAX('Calendar'[SequenceDate]),FILTER(ALL('Calendar'),and('Calendar'[BusinessDayInYear]=MaxBusinessDayLY,'Calendar'[BusinessYear]=SelectedDayBusYr-1))),FirstDay1)",
              "VAR TwelveMonthsGrossMargin = ",
              "IF ([ShowValueForDates],    ",
              "        CALCULATE ([Pre-incentive Gross Margin $], REMOVEFILTERS('Calendar'),'Calendar'[SequenceDate] >=FirstDay  && 'Calendar'[SequenceDate] <= LastDay)",
              "   )",
              "VAR CurrentMonthInv = [Finished Good Dollars]",
              "VAR LastYearInv =",
              "    VAR CalendarIsFiltered =      ISFILTERED ( 'calendar' )",
              "    VAR MaxDate = LOOKUPVALUE (  'Calendar'[LY Day Date], 'Calendar'[CalendarDateKey], [LastDateWithData] )",
              "    RETURN",
              "        IF (",
              "            CalendarIsFiltered && [ShowValueForDates],",
              "            CALCULATE ([Finished Good Dollars],FILTER ( ALL ( 'Calendar' ), CONTAINS ( VALUES ( 'Calendar'[LY Day Date] ), 'Calendar'[LY Day Date], 'Calendar'[CalendarDate]))),",
              "            CALCULATE ( [Finished Good Dollars] , 'Calendar'[CalendarDate] = MaxDate )",
              "        )",
              "VAR AvgInv = IF ([ShowValueForDates], (CurrentMonthInv + LastYearInv) / 2 )",
              "VAR Result = DIVIDE(TwelveMonthsGrossMargin, AvgInv)",
              "RETURN Result"
            ],
            "formatString": "0.00",
            "displayFolder": "Statistics\\GMROI"
          },
          {
            "name": "Finished Good Dollars GMROI (2pt) 12M GM",
            "expression": [
              "",
              "VAR SelectedDay = max('Calendar'[SequenceDate])",
              "VAR LastDay = SelectedDay",
              "VAR SelectedDayBusSeqDay = LOOKUPVALUE('Calendar'[BusinessDayInYear],'Calendar'[SequenceDate],SelectedDay)",
              "VAR SelectedDayBusYr = LOOKUPVALUE('Calendar'[BusinessYear],'Calendar'[SequenceDate],SelectedDay)",
              "VAR FirstDay1 = CALCULATE(MAX('Calendar'[SequenceDate]),FILTER(ALL('Calendar'),and('Calendar'[BusinessDayInYear]=SelectedDayBusSeqDay,'Calendar'[BusinessYear]=SelectedDayBusYr-1)))",
              "VAR MaxBusinessDayLY = CALCULATE(max ('Calendar'[BusinessDayInYear]),FILTER(ALL('Calendar'),'Calendar'[BusinessYear]=SelectedDayBusYr-1))",
              "VAR FirstDay =  if(isblank(FirstDay1),CALCULATE(MAX('Calendar'[SequenceDate]),FILTER(ALL('Calendar'),and('Calendar'[BusinessDayInYear]=MaxBusinessDayLY,'Calendar'[BusinessYear]=SelectedDayBusYr-1))),FirstDay1)",
              "",
              "VAR TwelveMonthsGrossMargin = ",
              "IF (",
              "    [ShowValueForDates],",
              "    CALCULATE ( [Pre-incentive Gross Margin $], REMOVEFILTERS('Calendar'),'Calendar'[SequenceDate] >=FirstDay && 'Calendar'[SequenceDate] <= LastDay)",
              "   )",
              "VAR CurrentMonthInv = [Finished Good Dollars]",
              "VAR LastYearInv =",
              "    VAR CalendarIsFiltered =  ISFILTERED ( 'calendar' )",
              "    VAR MaxDate = LOOKUPVALUE (  'Calendar'[LY Day Date],'Calendar'[CalendarDateKey], [LastDateWithData]  )",
              "    RETURN",
              "        IF (",
              "            CalendarIsFiltered && [ShowValueForDates],",
              "            CALCULATE ([Finished Good Dollars],FILTER ( ALL ( 'Calendar' ), CONTAINS (VALUES ( 'Calendar'[LY Day Date] ),'Calendar'[LY Day Date], 'Calendar'[CalendarDate]))),",
              "            CALCULATE ( [Finished Good Dollars] , 'Calendar'[CalendarDate] = MaxDate )",
              "        )",
              "VAR AvgInv =  IF ( [ShowValueForDates], (CurrentMonthInv + LastYearInv) / 2)",
              "VAR Result = DIVIDE(TwelveMonthsGrossMargin, AvgInv)",
              "RETURN TwelveMonthsGrossMargin"
            ],
            "formatString": "\\$#,0.00;(\\$#,0.00);\\$#,0.00",
            "displayFolder": "Statistics\\GMROI",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\" Accuracy=\"2\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "Finished Good Dollars / Last 12 M Pre-incentive Sales Ratio",
            "expression": [
              "VAR TwelveMonthsSales = ",
              "IF (",
              "    [ShowValueForDates],",
              "    VAR NumOfDays = 362",
              "    VAR LastDay =",
              "    CALCULATE([MaxSequentialNumber],",
              "        CROSSFILTER(FactFinishedGoodsInventory[AsOfDateKey], 'Calendar'[CalendarDateKey], Both)",
              "    )",
              "    VAR FirstDay = LastDay- NumOfDays",
              "    VAR Result =",
              "        CALCULATE (",
              "            [Pre-incentive Sales $],",
              "            REMOVEFILTERS('Calendar'),",
              "            'Calendar'[SequenceDate] >=FirstDay",
              "                && 'Calendar'[SequenceDate] <= LastDay",
              "        )",
              "",
              "    RETURN",
              "    Result",
              "",
              ")",
              "VAR CurrentMonthInv = [Finished Good Dollars]",
              "VAR LastYearInv =",
              "    VAR CalendarIsFiltered =",
              "        ISFILTERED ( 'calendar' )",
              "    VAR MaxDate =",
              "        LOOKUPVALUE (",
              "            'Calendar'[LY Day Date],",
              "            'Calendar'[CalendarDateKey], [LastDateWithData]",
              "        )",
              "    RETURN",
              "        IF (",
              "            CalendarIsFiltered && [ShowValueForDates],",
              "            CALCULATE (",
              "                [Finished Good Dollars],",
              "                FILTER (",
              "                    ALL ( 'Calendar' ),",
              "                    CONTAINS (",
              "                        VALUES ( 'Calendar'[LY Day Date] ),",
              "                        'Calendar'[LY Day Date], 'Calendar'[CalendarDate]",
              "                    )",
              "                )",
              "            ),",
              "            CALCULATE ( [Finished Good Dollars] , 'Calendar'[CalendarDate] = MaxDate )",
              "        )",
              "",
              "VAR AvgInv = ",
              "    IF (",
              "        [ShowValueForDates],",
              "            (CurrentMonthInv + LastYearInv) / 2",
              "    )",
              "",
              "VAR Result = DIVIDE(AvgInv, TwelveMonthsSales)",
              "",
              "RETURN",
              "Result"
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "displayFolder": "Statistics\\SalesRatio",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "Finished Good Dollars DIO (2pt)",
            "expression": [
              "VAR TwelveMonthsCOGS = ",
              "IF (",
              "    [ShowValueForDates],",
              "    VAR NumOfDays = 362",
              "    VAR LastDay =",
              "    CALCULATE([MaxSequentialNumber],",
              "        CROSSFILTER(FactFinishedGoodsInventory[AsOfDateKey], 'Calendar'[CalendarDateKey], Both)",
              "    )",
              "    VAR FirstDay = LastDay- NumOfDays",
              "    VAR Result =",
              "        CALCULATE (",
              "            [Pre-incentive COGS $],",
              "            REMOVEFILTERS('Calendar'),",
              "            'Calendar'[SequenceDate] >=FirstDay",
              "                && 'Calendar'[SequenceDate] <= LastDay",
              "        )",
              "",
              "    RETURN",
              "    Result",
              "",
              ")",
              "VAR CurrentMonthInv = [Finished Good Dollars]",
              "VAR LastYearInv =",
              "    VAR CalendarIsFiltered =",
              "        ISFILTERED ( 'calendar' )",
              "    VAR MaxDate =",
              "        LOOKUPVALUE (",
              "            'Calendar'[LY Day Date],",
              "            'Calendar'[CalendarDateKey], [LastDateWithData]",
              "        )",
              "    RETURN",
              "        IF (",
              "            CalendarIsFiltered && [ShowValueForDates],",
              "            CALCULATE (",
              "                [Finished Good Dollars],",
              "                FILTER (",
              "                    ALL ( 'Calendar' ),",
              "                    CONTAINS (",
              "                        VALUES ( 'Calendar'[LY Day Date] ),",
              "                        'Calendar'[LY Day Date], 'Calendar'[CalendarDate]",
              "                    )",
              "                )",
              "            ),",
              "            CALCULATE ( [Finished Good Dollars] , 'Calendar'[CalendarDate] = MaxDate )",
              "        )",
              "",
              "VAR AvgInv = ",
              "    IF (",
              "        [ShowValueForDates],",
              "            (CurrentMonthInv + LastYearInv) / 2",
              "    )",
              "",
              "VAR Result = DIVIDE(AvgInv,TwelveMonthsCOGS) * 364",
              "",
              "RETURN",
              "Result"
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "displayFolder": "Statistics\\Turns",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "Pre-incentive Sales Dollars per SKU",
            "expression": [
              "",
              "VAR CalendarIsFiltered = ISFILTERED ( 'calendar' )",
              "VAR MaxDate = LOOKUPVALUE ('Calendar'[LY Day Date],'Calendar'[CalendarDateKey], [LastDateWithData]   )",
              "VAR SelectedDay = max('Calendar'[SequenceDate])",
              "VAR LastDay = SelectedDay",
              "VAR SelectedDayBusSeqDay = LOOKUPVALUE('Calendar'[BusinessDayInYear],'Calendar'[SequenceDate],SelectedDay)",
              "VAR SelectedDayBusYr = LOOKUPVALUE('Calendar'[BusinessYear],'Calendar'[SequenceDate],SelectedDay)",
              "VAR FirstDay1 = CALCULATE(MAX('Calendar'[SequenceDate]),FILTER(ALL('Calendar'),and('Calendar'[BusinessDayInYear]=SelectedDayBusSeqDay,'Calendar'[BusinessYear]=SelectedDayBusYr-1)))",
              "VAR MaxBusinessDayLY = CALCULATE(max ('Calendar'[BusinessDayInYear]),FILTER(ALL('Calendar'),'Calendar'[BusinessYear]=SelectedDayBusYr-1))",
              "VAR FirstDay =  if(isblank(FirstDay1),CALCULATE(MAX('Calendar'[SequenceDate]),FILTER(ALL('Calendar'),and('Calendar'[BusinessDayInYear]=MaxBusinessDayLY,'Calendar'[BusinessYear]=SelectedDayBusYr-1))),FirstDay1)",
              "",
              "VAR TwelveMonthsSales = ",
              "\tIF  (",
              "\t\t\t[ShowValueForDates],\t",
              "\t\t\tCALCULATE (\t[Pre-incentive Sales $],REMOVEFILTERS('Calendar'),\t'Calendar'[SequenceDate] >=FirstDay\t&& 'Calendar'[SequenceDate] <= LastDay\t)",
              "\t\t)\t\t",
              "VAR CurrentMonthSKUCount = [Inventory SKU Count]",
              "VAR LastYearSKUCount = ",
              "   IF (",
              "        CalendarIsFiltered && [ShowValueForDates],",
              "        CALCULATE ( [Inventory SKU Count], FILTER ( ALL ( 'Calendar' ), CONTAINS (VALUES ( 'Calendar'[LY Day Date] ),'Calendar'[LY Day Date], 'Calendar'[CalendarDate] ) )  ),",
              "        CALCULATE ( [Inventory SKU Count] , 'Calendar'[CalendarDate] = MaxDate )",
              "    )",
              "VAR AvgSKUCount = (CurrentMonthSKUCount + LastYearSKUCount) / 2\t",
              "VAR Result = DIVIDE(TwelveMonthsSales, AvgSKUCount)",
              "RETURN Result"
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "displayFolder": "Statistics\\Per SKU",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "Pre-incentive Gross Margin Dollars per SKU",
            "expression": [
              "VAR CalendarIsFiltered =",
              "    ISFILTERED ( 'calendar' )",
              "VAR MaxDate =",
              "    LOOKUPVALUE (",
              "        'Calendar'[LY Day Date],",
              "        'Calendar'[CalendarDateKey], [LastDateWithData]",
              "    )",
              "VAR TwelveMonthsSales = ",
              "\tIF  (",
              "\t\t\t[ShowValueForDates],",
              "\t\t\tVAR NumOfDays = 362",
              "\t\t\tVAR LastDay = [MaxSequentialNumber]",
              "\t\t\tVAR FirstDay = LastDay- NumOfDays",
              "\t\t\tVAR Result =",
              "\t\t\t\tCALCULATE ",
              "\t\t\t\t\t\t(",
              "\t\t\t\t\t\t\t[Pre-incentive Gross Margin $],",
              "\t\t\t\t\t\t\tREMOVEFILTERS('Calendar'),",
              "\t\t\t\t\t\t\t'Calendar'[SequenceDate] >=FirstDay",
              "\t\t\t\t\t\t\t\t&& 'Calendar'[SequenceDate] <= LastDay",
              "\t\t\t\t\t\t)",
              "\t\t\tRETURN",
              "\t\t\tResult",
              "\t\t)",
              "\t\t",
              "VAR CurrentMonthSKUCount = [Inventory SKU Count]",
              "",
              "VAR LastYearSKUCount = ",
              "   IF (",
              "        CalendarIsFiltered && [ShowValueForDates],",
              "        CALCULATE (",
              "            [Inventory SKU Count],",
              "            FILTER (",
              "                ALL ( 'Calendar' ),",
              "                CONTAINS (",
              "                    VALUES ( 'Calendar'[LY Day Date] ),",
              "                    'Calendar'[LY Day Date], 'Calendar'[CalendarDate]",
              "                )",
              "            )",
              "        ),",
              "        CALCULATE ( [Inventory SKU Count] , 'Calendar'[CalendarDate] = MaxDate )",
              "    )",
              "",
              "VAR AvgSKUCount = (CurrentMonthSKUCount + LastYearSKUCount) / 2\t\t",
              "",
              "VAR Result = DIVIDE(TwelveMonthsSales, AvgSKUCount)",
              "",
              "RETURN",
              "Result"
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "displayFolder": "Statistics\\Per SKU",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "Finished Good Dollars (Millions)",
            "expression": [
              "DIVIDE([Finished Good Dollars], 1000000)",
              ""
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "displayFolder": "Finished Goods\\Total",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "Finished Good Packages (Millions)",
            "expression": [
              "DIVIDE([Finished Good Packages], 1000000)",
              ""
            ],
            "formatString": "#,0",
            "displayFolder": "Finished Goods\\Total"
          },
          {
            "name": "Finished Good Units (Millions)",
            "expression": [
              "DIVIDE([Finished Good Units], 1000000)",
              ""
            ],
            "formatString": "#,0",
            "displayFolder": "Finished Goods\\Total"
          },
          {
            "name": "WP Current $",
            "expression": [
              "",
              "VAR MaxWeekEnd = MAX('FactFinishedGoodsInventory'[AsOfDateKey])",
              "    VAR Stores = ",
              "    CALCULATE(",
              "        sum(FactFinishedGoodsInventory[USDollars]),",
              "        ALL('Calendar'),",
              "        DimItem[WinningPortfolioFlag]=\"R\"",
              "    )",
              "    VAR SBUs = ",
              "    CALCULATE(",
              "        sum(FactFinishedGoodsInventory[USDollars]),",
              "        ALL('Calendar'),",
              "        'Calendar'[CalendarDateKey] = MaxWeekEnd,",
              "        DimItem[WinningPortfolioFlag]=\"Y\",",
              "        FILTER('DimBusiness', NOT('DimBusiness'[Division]) IN {\"Retail Outlets\", \"Champion Europe\", \"HA Apparel\", \"HA Sheridan\", \"HA Bras N Things\"})",
              ")",
              "    VAR CHEU_HAA =",
              "    CALCULATE(",
              "        sum(FactFinishedGoodsInventory[USDollars]),",
              "        ALL('Calendar'),",
              "        'Calendar'[CalendarDateKey] = MaxWeekEnd,",
              "        DimItem[WinningPortfolioFlag]=\"Y\",",
              "        FILTER('DimBusiness', 'DimBusiness'[Division] IN {\"Champion Europe\", \"HA Apparel\", \"HA Sheridan\", \"HA Bras N Things\"})",
              ")",
              "",
              "    RETURN",
              "Stores + SBUs + CHEU_HAA",
              "",
              ""
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "displayFolder": "Winning Portfolio\\Actuals",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "WP Baseline $",
            "expression": [
              "",
              "VAR YearEnd = MAX('Calendar'[LYDayDateKey])",
              "    VAR Stores = ",
              "    CALCULATE(",
              "        sum(FactFinishedGoodsInventory[USDollars]),",
              "        ALL('Calendar'),",
              "        DimItem[WinningPortfolioFlag]=\"R\"",
              "    )",
              "    VAR SBUs = ",
              "    CALCULATE(",
              "        sum(FactFinishedGoodsInventory[USDollars]),",
              "        ALL('Calendar'),",
              "        'Calendar'[CalendarDateKey] = YearEnd ,",
              "        DimItem[WinningPortfolioFlag]=\"Y\",",
              "        FILTER('DimBusiness', NOT('DimBusiness'[Division]) IN {\"Retail Outlets\", \"Champion Europe\", \"HA Apparel\", \"HA Sheridan\", \"HA Bras N Things\"})",
              ")",
              "    VAR CHEU_HAA =",
              "    CALCULATE(",
              "        sum(FactFinishedGoodsInventory[USDollars]),",
              "        ALL('Calendar'),",
              "        'Calendar'[CalendarDateKey] = YearEnd ,",
              "        DimItem[WinningPortfolioFlag]=\"Y\",",
              "        FILTER('DimBusiness', 'DimBusiness'[Division] IN {\"Champion Europe\", \"HA Apparel\", \"HA Sheridan\", \"HA Bras N Things\"})",
              ")",
              "",
              "    RETURN",
              "Stores + SBUs + CHEU_HAA"
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "displayFolder": "Winning Portfolio\\Actuals",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "WP Disposed $",
            "expression": [
              "",
              "IF([ShowValueForDates],",
              "    [WP Baseline $] - [WP Current $]",
              ")"
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "displayFolder": "Winning Portfolio\\Actuals",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "WP Disposed $ %",
            "expression": [
              "",
              "DIVIDE([WP Disposed $], [WP Baseline $])"
            ],
            "formatString": "0%;-0%;0%",
            "displayFolder": "Winning Portfolio\\Actuals"
          },
          {
            "name": "WP Current Units",
            "expression": [
              "",
              "VAR MaxWeekEnd = MAX('FactFinishedGoodsInventory'[AsOfDateKey])",
              "    VAR Stores = ",
              "    CALCULATE(",
              "        sum(FactFinishedGoodsInventory[Units]),",
              "        ALL('Calendar'),",
              "        DimItem[WinningPortfolioFlag]=\"R\"",
              "    )",
              "    VAR SBUs = ",
              "    CALCULATE(",
              "        sum(FactFinishedGoodsInventory[Units]),",
              "        ALL('Calendar'),",
              "        'Calendar'[CalendarDateKey] = MaxWeekEnd,",
              "        DimItem[WinningPortfolioFlag]=\"Y\",",
              "        FILTER('DimBusiness', NOT('DimBusiness'[Division]) IN {\"Retail Outlets\", \"Champion Europe\", \"HA Apparel\", \"HA Sheridan\", \"HA Bras N Things\"})",
              ")",
              "    VAR CHEU_HAA =",
              "    CALCULATE(",
              "        sum(FactFinishedGoodsInventory[Units]),",
              "        ALL('Calendar'),",
              "        'Calendar'[CalendarDateKey] = MaxWeekEnd,",
              "        DimItem[WinningPortfolioFlag]=\"Y\",",
              "        FILTER('DimBusiness', 'DimBusiness'[Division] IN {\"Champion Europe\", \"HA Apparel\", \"HA Sheridan\", \"HA Bras N Things\"})",
              ")",
              "",
              "    RETURN",
              "Stores + SBUs + CHEU_HAA",
              "",
              ""
            ],
            "formatString": "#,0",
            "displayFolder": "Winning Portfolio\\Actuals"
          },
          {
            "name": "WP Baseline Units",
            "expression": [
              "",
              "VAR YearEnd = MAX('Calendar'[LYDayDateKey])",
              "    VAR Stores = ",
              "    CALCULATE(",
              "        sum(FactFinishedGoodsInventory[Units]),",
              "        ALL('Calendar'),",
              "        DimItem[WinningPortfolioFlag]=\"R\"",
              "    )",
              "    VAR SBUs = ",
              "    CALCULATE(",
              "        sum(FactFinishedGoodsInventory[Units]),",
              "        ALL('Calendar'),",
              "        'Calendar'[CalendarDateKey] = YearEnd ,",
              "        DimItem[WinningPortfolioFlag]=\"Y\",",
              "        FILTER('DimBusiness', NOT('DimBusiness'[Division]) IN {\"Retail Outlets\", \"Champion Europe\", \"HA Apparel\", \"HA Sheridan\", \"HA Bras N Things\"})",
              ")",
              "    VAR CHEU_HAA =",
              "    CALCULATE(",
              "        sum(FactFinishedGoodsInventory[Units]),",
              "        ALL('Calendar'),",
              "        'Calendar'[CalendarDateKey] = YearEnd ,",
              "        DimItem[WinningPortfolioFlag]=\"Y\",",
              "        FILTER('DimBusiness', 'DimBusiness'[Division] IN {\"Champion Europe\", \"HA Apparel\", \"HA Sheridan\", \"HA Bras N Things\"})",
              ")",
              "",
              "    RETURN",
              "Stores + SBUs + CHEU_HAA",
              "",
              ""
            ],
            "formatString": "#,0",
            "displayFolder": "Winning Portfolio\\Actuals"
          },
          {
            "name": "WP Disposed Units",
            "expression": [
              "IF([ShowValueForDates],",
              "    [WP Baseline Units]- [WP Current Units]",
              ")"
            ],
            "formatString": "#,0",
            "displayFolder": "Winning Portfolio\\Actuals"
          },
          {
            "name": "WP Disposed Units %",
            "expression": "DIVIDE([WP Disposed Units], [WP Baseline Units])",
            "formatString": "0%;-0%;0%",
            "displayFolder": "Winning Portfolio\\Actuals"
          },
          {
            "name": "WP Current Pkgs",
            "expression": [
              "",
              "VAR MaxWeekEnd = MAX('FactFinishedGoodsInventory'[AsOfDateKey])",
              "    VAR Stores = ",
              "    CALCULATE(",
              "        sum(FactFinishedGoodsInventory[Packages]),",
              "        ALL('Calendar'),",
              "        DimItem[WinningPortfolioFlag]=\"R\"",
              "    )",
              "    VAR SBUs = ",
              "    CALCULATE(",
              "        sum(FactFinishedGoodsInventory[Packages]),",
              "        ALL('Calendar'),",
              "        'Calendar'[CalendarDateKey] = MaxWeekEnd,",
              "        DimItem[WinningPortfolioFlag]=\"Y\",",
              "        FILTER('DimBusiness', NOT('DimBusiness'[Division]) IN {\"Retail Outlets\", \"Champion Europe\", \"HA Apparel\", \"HA Sheridan\", \"HA Bras N Things\"})",
              ")",
              "    VAR CHEU_HAA =",
              "    CALCULATE(",
              "        sum(FactFinishedGoodsInventory[Packages]),",
              "        ALL('Calendar'),",
              "        'Calendar'[CalendarDateKey] = MaxWeekEnd,",
              "        DimItem[WinningPortfolioFlag]=\"Y\",",
              "        FILTER('DimBusiness', 'DimBusiness'[Division] IN {\"Champion Europe\", \"HA Apparel\", \"HA Sheridan\", \"HA Bras N Things\"})",
              ")",
              "",
              "    RETURN",
              "Stores + SBUs + CHEU_HAA",
              "",
              ""
            ],
            "formatString": "#,0",
            "displayFolder": "Winning Portfolio\\Actuals"
          },
          {
            "name": "WP Baseline Pkgs",
            "expression": [
              "",
              "VAR YearEnd = MAX('Calendar'[LYDayDateKey])",
              "    VAR Stores = ",
              "    CALCULATE(",
              "        sum(FactFinishedGoodsInventory[Packages]),",
              "        ALL('Calendar'),",
              "        DimItem[WinningPortfolioFlag]=\"R\"",
              "    )",
              "    VAR SBUs = ",
              "    CALCULATE(",
              "        sum(FactFinishedGoodsInventory[Packages]),",
              "        ALL('Calendar'),",
              "        'Calendar'[CalendarDateKey] = YearEnd ,",
              "        DimItem[WinningPortfolioFlag]=\"Y\",",
              "        FILTER('DimBusiness', NOT('DimBusiness'[Division]) IN {\"Retail Outlets\", \"Champion Europe\", \"HA Apparel\", \"HA Sheridan\", \"HA Bras N Things\"})",
              ")",
              "    VAR CHEU_HAA =",
              "    CALCULATE(",
              "        sum(FactFinishedGoodsInventory[Packages]),",
              "        ALL('Calendar'),",
              "        'Calendar'[CalendarDateKey] = YearEnd ,",
              "        DimItem[WinningPortfolioFlag]=\"Y\",",
              "        FILTER('DimBusiness', 'DimBusiness'[Division] IN {\"Champion Europe\", \"HA Apparel\", \"HA Sheridan\", \"HA Bras N Things\"})",
              ")",
              "",
              "    RETURN",
              "Stores + SBUs + CHEU_HAA",
              "",
              ""
            ],
            "formatString": "#,0",
            "displayFolder": "Winning Portfolio\\Actuals"
          },
          {
            "name": "WP Disposed Pkgs",
            "expression": [
              "IF([ShowValueForDates],",
              "    [WP Baseline Pkgs] - [WP Current Pkgs]",
              ")"
            ],
            "formatString": "#,0",
            "displayFolder": "Winning Portfolio\\Actuals"
          },
          {
            "name": "WP Disposed Pkgs %",
            "expression": "DIVIDE([WP Disposed Pkgs], [WP Baseline Pkgs])",
            "formatString": "0%;-0%;0%",
            "displayFolder": "Winning Portfolio\\Actuals"
          },
          {
            "name": "SKU Count LYLME",
            "expression": [
              " CALCULATE(",
              "    [Inventory Global SKU Count LME],",
              " FILTER(",
              "     ALL('Calendar'),",
              "     CONTAINS(",
              "            VALUES(Calendar[LY Day Date]),'Calendar'[LY Day Date],'Calendar'[CalendarDate]",
              "        )",
              "    ))"
            ],
            "formatString": "#,0"
          },
          {
            "name": "WP Plan %",
            "expression": [
              " VAR MaxWeekEnd = MAX('Calendar'[BusinessWeekOfYear])",
              "VAR MaxYear = MAX('Calendar'[BusinessYear])",
              "VAR phaseoutquarter = RIGHT(SUBSTITUTE(SELECTEDVALUE(DimWinningPortfolioSkuList[PhaseOutQuarter],\"Q1\"),\"Q4\", \"Q3\"),1)  --Currently we are holding Q4 SKUs to be done by the end of Q3",
              "VAR weekstodispose = (phaseoutquarter * 13) - 5 --minus 5 because not including January 2022",
              "VAR weeklypercent = ",
              "SWITCH(TRUE(),",
              "MaxYear <> 2022, 0,",
              "MaxWeekEnd < 5, 0,",
              "(MaxWeekEnd - 5) * (1/weekstodispose)",
              ")",
              "VAR cappedweeklypercent = IF(weeklypercent >1,1,weeklypercent)",
              "RETURN",
              "cappedweeklypercent"
            ],
            "formatString": "0%;-0%;0%"
          },
          {
            "name": "WP Plan $",
            "expression": [
              " VAR MaxWeekEnd = MAX('Calendar'[CalendarDateKey])",
              "RETURN",
              "CALCULATE(",
              "[WP Plan %] * [WP Baseline $],",
              "DimWinningPortfolioSkuList[PhaseOutQuarter] = \"Q1\",",
              "'Calendar'[CalendarDateKey] = MaxWeekEnd",
              ") + ",
              "CALCULATE(",
              "[WP Plan %] * [WP Baseline $],",
              "DimWinningPortfolioSkuList[PhaseOutQuarter] = \"Q2\",",
              "'Calendar'[CalendarDateKey] = MaxWeekEnd",
              ") + ",
              "CALCULATE(",
              "[WP Plan %] * [WP Baseline $],",
              "DimWinningPortfolioSkuList[PhaseOutQuarter] = \"Q3\",",
              "'Calendar'[CalendarDateKey] = MaxWeekEnd",
              ") + ",
              "CALCULATE(",
              "[WP Plan %] * [WP Baseline $],",
              "DimWinningPortfolioSkuList[PhaseOutQuarter]= \"Q4\",",
              "'Calendar'[CalendarDateKey] = MaxWeekEnd",
              ")"
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "WP Disposed vs Plan $",
            "expression": " [WP Disposed $] - [WP Plan $]",
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "WP Disposed vs Plan Pkgs",
            "expression": " [WP Disposed Pkgs] - [WP Plan Pkgs]",
            "formatString": "#,0"
          },
          {
            "name": "WP Plan Pkgs",
            "expression": [
              " VAR MaxWeekEnd = MAX('Calendar'[CalendarDateKey])",
              "RETURN",
              "CALCULATE(",
              "[WP Plan %] * [WP Baseline Pkgs],",
              "DimWinningPortfolioSkuList[PhaseOutQuarter] = \"Q1\",",
              "'Calendar'[CalendarDateKey] = MaxWeekEnd",
              ") + ",
              "CALCULATE(",
              "[WP Plan %] * [WP Baseline Pkgs],",
              "DimWinningPortfolioSkuList[PhaseOutQuarter]  = \"Q2\",",
              "'Calendar'[CalendarDateKey] = MaxWeekEnd",
              ") + ",
              "CALCULATE(",
              "[WP Plan %] * [WP Baseline Pkgs],",
              "DimWinningPortfolioSkuList[PhaseOutQuarter]  = \"Q3\",",
              "'Calendar'[CalendarDateKey] = MaxWeekEnd",
              ") + ",
              "CALCULATE(",
              "[WP Plan %] * [WP Baseline Pkgs],",
              "DimWinningPortfolioSkuList[PhaseOutQuarter]  = \"Q4\",",
              "'Calendar'[CalendarDateKey] = MaxWeekEnd",
              ")"
            ],
            "formatString": "#,0"
          },
          {
            "name": "WP Plan Units",
            "expression": [
              " VAR MaxWeekEnd = MAX('Calendar'[CalendarDateKey])",
              "RETURN",
              "CALCULATE(",
              "[WP Plan %] * [WP Baseline Units],",
              "DimWinningPortfolioSkuList[PhaseOutQuarter] = \"Q1\",",
              "'Calendar'[CalendarDateKey] = MaxWeekEnd",
              ") + ",
              "CALCULATE(",
              "[WP Plan %] * [WP Baseline Units],",
              "DimWinningPortfolioSkuList[PhaseOutQuarter] = \"Q2\",",
              "'Calendar'[CalendarDateKey] = MaxWeekEnd) + ",
              "CALCULATE(",
              "[WP Plan %] * [WP Baseline Units],",
              "DimWinningPortfolioSkuList[PhaseOutQuarter] = \"Q3\",",
              "'Calendar'[CalendarDateKey] = MaxWeekEnd) + ",
              "CALCULATE(",
              "[WP Plan %] * [WP Baseline Units],",
              "DimWinningPortfolioSkuList[PhaseOutQuarter] = \"Q4\",",
              "'Calendar'[CalendarDateKey] = MaxWeekEnd)"
            ],
            "formatString": "#,0"
          },
          {
            "name": "WP Disposed vs Plan Units",
            "expression": " [WP Disposed Units] - [WP Plan Units]",
            "formatString": "#,0"
          },
          {
            "name": "WP Disposed vs Plan $ %",
            "expression": " DIVIDE([WP Disposed vs Plan $], [WP Plan $])",
            "formatString": "0%;-0%;0%"
          },
          {
            "name": "WP Disposed vs Plan Pkgs %",
            "expression": " DIVIDE([WP Disposed vs Plan Pkgs], [WP Plan Pkgs])",
            "formatString": "0%;-0%;0%"
          },
          {
            "name": "WP Disposed vs Plan Units %",
            "expression": " DIVIDE([WP Disposed vs Plan Units], [WP Plan Units])",
            "formatString": "0%;-0%;0%"
          },
          {
            "name": "SCA Count",
            "expression": [
              " VAR MaxWeekEnd = MAX(FactFinishedGoodsInventory[AsOfDateKey])",
              "RETURN",
              "COUNTROWS(",
              "    CALCULATETABLE(",
              "        DISTINCT('DimItem'[SCAGlobal]),",
              "    CROSSFILTER(FactFinishedGoodsInventory[ItemKey],'DimItem'[ItemKey],Both),",
              "    'FactFinishedGoodsInventory'[Units]> 0,",
              "\t'Calendar'[CalendarDateKey] = MaxWeekEnd",
              "    )",
              ")"
            ],
            "formatString": "#,0"
          },
          {
            "name": "SKU Create Count",
            "expression": [
              " COUNTROWS(",
              "    CALCULATETABLE(",
              "        DISTINCT('DimItem'[SKUCount]),",
              "    CROSSFILTER(FactFinishedGoodsInventory[ItemKey],DimItem[ItemKey],Both)",
              "    )",
              ")"
            ],
            "formatString": "#,0"
          },
          {
            "name": "WP Baseline SKU Count",
            "expression": [
              " VAR YearEnd = 20220101",
              "VAR Stores =",
              "    COUNTROWS (",
              "        CALCULATETABLE (",
              "            SUMMARIZE ( 'DimItem', 'DimItem'[SKUCount] ),",
              "            CROSSFILTER ( FactFinishedGoodsInventory[ItemKey], DimItem[ItemKey], BOTH ),",
              "            FactFinishedGoodsInventory[Units]  > 0,",
              "            ALL ( 'Calendar' ),",
              "            'Calendar'[CalendarDateKey] = YearEnd,",
              "            FILTER ('DimWinningPortfolioSkuList','DimWinningPortfolioSkuList'[IsActive] = \"Yes\"),",
              "            FILTER ( 'DimFacility', 'DimFacility'[FacilityType] = \"Retail Store\" ),",
              "            FILTER ('DimWinningPortfolioSkuList','DimWinningPortfolioSkuList'[Division] = \"Retail Outlets\" )",
              "        )",
              "    )",
              "VAR SBUs =",
              "    COUNTROWS (",
              "        CALCULATETABLE (",
              "            SUMMARIZE ( 'DimItem', 'DimItem'[SKUCount] ),",
              "             CROSSFILTER ( FactFinishedGoodsInventory[ItemKey], DimItem[ItemKey], BOTH ),",
              "            FactFinishedGoodsInventory[Units]  > 0,",
              "            ALL ( 'Calendar' ),",
              "            'Calendar'[CalendarDateKey] = YearEnd,",
              "           FILTER ('DimWinningPortfolioSkuList','DimWinningPortfolioSkuList'[IsActive] = \"Yes\"),",
              "            FILTER ( 'DimFacility', 'DimFacility'[FacilityType] <> \"Retail Store\" ),",
              "            FILTER (",
              "                'DimWinningPortfolioSkuList',",
              "                NOT(DimWinningPortfolioSkuList[Division]) IN {\"Retail Outlets\", \"Champion Europe\", \"HA Apparel\", \"HA Sheridan\", \"HA Bras N Things\"}",
              "        )",
              "        )",
              "    )",
              "VAR CHEU_HAA =",
              "    COUNTROWS (",
              "        CALCULATETABLE (",
              "            SUMMARIZE ( 'DimItem', 'DimItem'[SKUCount]),",
              "             CROSSFILTER ( FactFinishedGoodsInventory[ItemKey], DimItem[ItemKey], BOTH ),",
              "            FactFinishedGoodsInventory[Units]  > 0,",
              "",
              "            ALL ( 'Calendar' ),",
              "            'Calendar'[CalendarDateKey] = YearEnd,",
              "            FILTER ('DimWinningPortfolioSkuList','DimWinningPortfolioSkuList'[IsActive] = \"Yes\"),",
              "            FILTER('DimWinningPortfolioSkuList', 'DimWinningPortfolioSkuList'[Division] IN {\"Champion Europe\", \"HA Apparel\", \"HA Sheridan\", \"HA Bras N Things\"})",
              "        )",
              "    )",
              "RETURN",
              "    Stores + SBUs + CHEU_HAA"
            ],
            "formatString": "#,0"
          },
          {
            "name": "WP Current SKU Count",
            "expression": [
              "VAR MaxWeekEnd = MAX('Calendar'[CalendarDateKey])",
              "VAR Stores =",
              "    COUNTROWS (",
              "        CALCULATETABLE (",
              "            SUMMARIZE ( 'DimItem', 'DimItem'[SKUCount] ),",
              "            CROSSFILTER ( FactFinishedGoodsInventory[ItemKey], DimItem[ItemKey], BOTH ),",
              "           FactFinishedGoodsInventory[Units]  > 0,",
              "            ALL ( 'Calendar' ),",
              "           'Calendar'[CalendarDateKey] = MaxWeekEnd,",
              "           FILTER ('DimWinningPortfolioSkuList','DimWinningPortfolioSkuList'[IsActive] = \"Yes\"),",
              "            FILTER ( 'DimFacility', 'DimFacility'[FacilityType]= \"Retail Store\" ),",
              "             FILTER ('DimWinningPortfolioSkuList','DimWinningPortfolioSkuList'[Division] = \"Retail Outlets\" )",
              "        )",
              "    )",
              "VAR SBUs =",
              "    COUNTROWS (",
              "        CALCULATETABLE (",
              "            SUMMARIZE ( 'DimItem', 'DimItem'[SKUCount] ),",
              "           CROSSFILTER ( FactFinishedGoodsInventory[ItemKey], DimItem[ItemKey], BOTH ),",
              "           FactFinishedGoodsInventory[Units]  > 0,",
              "            ALL ( 'Calendar' ),",
              "           'Calendar'[CalendarDateKey] = MaxWeekEnd,",
              "            FILTER ('DimWinningPortfolioSkuList','DimWinningPortfolioSkuList'[IsActive] = \"Yes\"),",
              "            FILTER ( 'DimFacility', 'DimFacility'[FacilityType] <> \"Retail Store\" ),",
              "            FILTER (",
              "                'DimWinningPortfolioSkuList',",
              "                NOT('DimWinningPortfolioSkuList'[Division]) IN {\"Retail Outlets\", \"Champion Europe\", \"HA Apparel\", \"HA Sheridan\", \"HA Bras N Things\"}",
              "        )",
              "        )",
              "    )",
              "VAR CHEU_HAA =",
              "    COUNTROWS (",
              "        CALCULATETABLE (",
              "            SUMMARIZE ( 'DimItem', 'DimItem'[SKUCount] ),",
              "           CROSSFILTER ( FactFinishedGoodsInventory[ItemKey], DimItem[ItemKey], BOTH ),",
              "           FactFinishedGoodsInventory[Units]  > 0,",
              "            ALL ( 'Calendar' ),",
              "           'Calendar'[CalendarDateKey] = MaxWeekEnd,",
              "            FILTER ('DimWinningPortfolioSkuList','DimWinningPortfolioSkuList'[IsActive] = \"Yes\"),",
              "            FILTER('DimWinningPortfolioSkuList', 'DimWinningPortfolioSkuList'[Division] IN {\"Champion Europe\", \"HA Apparel\", \"HA Sheridan\", \"HA Bras N Things\"})",
              "        )",
              "    )",
              "RETURN",
              "    Stores + SBUs + CHEU_HAA"
            ],
            "formatString": "#,0"
          },
          {
            "name": "WP Disposed SKU Count",
            "expression": [
              " IF([ShowValueForDates],",
              "    [WP Baseline SKU Count] - [WP Current SKU Count]",
              ")"
            ],
            "formatString": "#,0"
          },
          {
            "name": "WP Disposed SKU Count %",
            "expression": " DIVIDE([WP Disposed SKU Count], [WP Baseline SKU Count])",
            "formatString": "0%;-0%;0%"
          },
          {
            "name": "2023 SKU Count Target",
            "expression": " CALCULATE(SUM('FactGoalsSkuCount'[SKUCountTarget]),FILTER('FactGoalsSkuCount','FactGoalsSkuCount'[GoalDateKey]==20231230))",
            "formatString": "#,0"
          },
          {
            "name": "vs 2023 Target",
            "expression": " [Inventory Global SKU Count]- [2023 SKU Count Target]",
            "formatString": "#,0"
          },
          {
            "name": "vs 2023 Target %",
            "expression": " DIVIDE([vs 2023 Target], [2023 SKU Count Target])",
            "formatString": "0%;-0%;0%"
          },
          {
            "name": "2024 Turns Target",
            "expression": " CALCULATE(SUM('FactGoalsSkuCount'[InventoryTurnsTarget]), FILTER('FactGoalsSkuCount', 'FactGoalsSkuCount'[GoalDateKey]==20241228))",
            "formatString": "#,0"
          },
          {
            "name": "2022 SKU Count Target",
            "expression": " CALCULATE(AVERAGE('FactGoalsSkuCount'[SKUCountTarget]),FILTER('FactGoalsSkuCount','FactGoalsSkuCount'[GoalDateKey]==20221231))",
            "formatString": "#,0"
          },
          {
            "name": "vs 2022 Target",
            "expression": " [Inventory Global SKU Count] - [2022 SKU Count Target]",
            "formatString": "#,0"
          },
          {
            "name": "vs 2022 Target %",
            "expression": " DIVIDE([vs 2022 Target], [2022 SKU Count Target])",
            "formatString": "0%;-0%;0%"
          },
          {
            "name": "Inventory SKU Count LYLME",
            "expression": [
              "",
              "CALCULATE(",
              "[_SKU_Count],",
              " FactFinishedGoodsInventory[Units] > 0",
              " ,SAMEPERIODLASTYEAR('Calendar'[BusinessPeriodEndDate])",
              " )"
            ],
            "formatString": "#,0"
          },
          {
            "name": "Inventory Global SKU Count LYLME",
            "expression": "[Inventory SKU Count LYLME]+[SRE SKU Count LYLME]",
            "formatString": "#,0"
          },
          {
            "name": "Global SKU Count LME vs LYLME %",
            "expression": " Divide([Inventory Global SKU Count LME],[Inventory Global SKU Count LYLME])-1",
            "formatString": "0%;-0%;0%"
          },
          {
            "name": "Global SKU Count LME vs LYLME",
            "expression": " [Inventory Global SKU Count LME] - [Inventory Global SKU Count LYLME]",
            "formatString": "#,0"
          },
          {
            "name": "Inventory SKU Count 2020",
            "expression": [
              " var Max2020 = CALCULATE(MAX('Calendar'[CalendarDateKey]),FILTER(All('Calendar'),'Calendar'[BusinessYear]=2020))",
              "var a = ",
              "COUNTROWS(",
              "    CALCULATETABLE(",
              "        DISTINCT(DimItem[SKUCount]),",
              "    CROSSFILTER(FactFinishedGoodsInventory[ItemKey],DimItem[ItemKey],Both),",
              "    FactFinishedGoodsInventory[Units] > 0,",
              "\t'Calendar'[CalendarDateKey] = Max2020,REMOVEFILTERS('Calendar')",
              "    )",
              ")",
              "return if(isblank(a),0,a)",
              "/*",
              "var MaxDate2020 = CALCULATE(MAX(FactFinishedGoodsInventory[AsOfDateKey]),CROSSFILTER('Calendar'[CalendarDateKey],FactFinishedGoodsInventory[AsOfDateKey],Both),'Calendar'[BusinessYear]==2020)",
              "var InventorySKUCount=CALCULATE([_SKU_Count],FILTER(FactFinishedGoodsInventory,",
              "FactFinishedGoodsInventory[Units] > 0 && FactFinishedGoodsInventory[AsOfDateKey]=MaxDate2020))",
              "return InventorySKUCount*/",
              "",
              ""
            ],
            "formatString": "0"
          },
          {
            "name": "Inventory SKU Count 2021",
            "expression": [
              " var Max2021 = CALCULATE(MAX('Calendar'[CalendarDateKey]),FILTER(All('Calendar'),'Calendar'[BusinessYear]=2021))",
              "var a =",
              "COUNTROWS(",
              "    CALCULATETABLE(",
              "        DISTINCT(DimItem[SKUCount]),",
              "    CROSSFILTER(FactFinishedGoodsInventory[ItemKey],DimItem[ItemKey],Both),",
              "    FactFinishedGoodsInventory[Units] > 0,",
              "\t'Calendar'[CalendarDateKey] = Max2021,REMOVEFILTERS('Calendar')",
              "    )",
              ") ",
              "return IF(ISBLANK(a),0,a)",
              "/*var MaxDate2021 = CALCULATE(MAX(FactFinishedGoodsInventory[AsOfDateKey]),CROSSFILTER('Calendar'[CalendarDateKey],FactFinishedGoodsInventory[AsOfDateKey],Both),'Calendar'[BusinessYear]==2021)",
              "var InventorySKUCount=",
              "CALCULATE(",
              "[_SKU_Count],FILTER(FactFinishedGoodsInventory,",
              "FactFinishedGoodsInventory[Units] > 0 && FactFinishedGoodsInventory[AsOfDateKey]=MaxDate2021))",
              "return InventorySKUCount*/",
              "",
              ""
            ],
            "formatString": "0"
          },
          {
            "name": "Inventory SKU Count 2019",
            "expression": [
              " var Max2019 = CALCULATE(MAX('Calendar'[CalendarDateKey]),FILTER(All('Calendar'),'Calendar'[BusinessYear]=2019))",
              "var a = ",
              "COUNTROWS(",
              "    CALCULATETABLE(",
              "        DISTINCT(DimItem[SKUCount]),",
              "    CROSSFILTER(FactFinishedGoodsInventory[ItemKey],DimItem[ItemKey],Both),",
              "    FactFinishedGoodsInventory[Units] > 0,",
              "\t'Calendar'[CalendarDateKey] = Max2019,REMOVEFILTERS('Calendar')",
              "    ))",
              "return (if(isblank(a),0,a))",
              "/*",
              "var MaxDate2019 = CALCULATE(MAX(FactFinishedGoodsInventory[AsOfDateKey]),CROSSFILTER('Calendar'[CalendarDateKey],FactFinishedGoodsInventory[AsOfDateKey],Both),'Calendar'[BusinessYear]==2019)",
              "var InventorySKUCount=CALCULATE([_SKU_Count],FILTER(FactFinishedGoodsInventory,",
              "FactFinishedGoodsInventory[Units] > 0 && FactFinishedGoodsInventory[AsOfDateKey]=MaxDate2019))",
              "return InventorySKUCount*/",
              ""
            ],
            "formatString": "0"
          },
          {
            "name": "Inventory Global SKU Count 2021",
            "expression": " [Inventory SKU Count 2021] +[SRE SKU Count 2021]",
            "formatString": "#,0"
          },
          {
            "name": "Inventory Global SKU Count 2020",
            "expression": " [Inventory SKU Count 2020] +[SRE SKU Count 2020]",
            "formatString": "#,0"
          },
          {
            "name": "Inventory Global SKU Count 2019",
            "expression": " [Inventory SKU Count 2019] +[SRE SKU Count 2019]",
            "formatString": "#,0"
          },
          {
            "name": "Inventory Global SKU Count Ultimate Target",
            "expression": [
              " [Inventory Global SKU Count 2021]  * 0.65",
              "",
              ""
            ],
            "formatString": "0"
          },
          {
            "name": "_Finished Good_USDollars",
            "expression": [
              "VAR MaxWeekEnd =",
              "        MAX ( FactFinishedGoodsInventory[AsOfDateKey])",
              "RETURN",
              "CALCULATE(",
              "    SUM(FactFinishedGoodsInventory[USDollars]), ",
              "    'Calendar'[CalendarDateKey] = MaxWeekEnd",
              ")",
              "/*sum(FactFinishedGoodsInventory[Dollars])*/",
              "",
              "",
              ""
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "_Finished Good_LocalCurrencyDollars",
            "expression": [
              "sum(FactFinishedGoodsInventory[LocalCurrencyDollars])",
              "",
              "",
              ""
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "isHidden": true,
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "Finished Good Dollars GMROI (2pt) LY",
            "expression": [
              "",
              "VAR SelectedDay = max('Calendar'[SequenceDate])",
              "VAR SelectedDayBusSeqDay = LOOKUPVALUE('Calendar'[BusinessDayInYear],'Calendar'[SequenceDate],SelectedDay)",
              "VAR SelectedDayBusYr = LOOKUPVALUE('Calendar'[BusinessYear],'Calendar'[SequenceDate],SelectedDay)",
              "VAR FirstDay1 = CALCULATE(MAX('Calendar'[SequenceDate]),FILTER(ALL('Calendar'),and('Calendar'[BusinessDayInYear]=SelectedDayBusSeqDay,'Calendar'[BusinessYear]=SelectedDayBusYr-2)))",
              "VAR MaxBusinessDayLLY = CALCULATE(max ('Calendar'[BusinessDayInYear]),FILTER(ALL('Calendar'),'Calendar'[BusinessYear]=SelectedDayBusYr-2))",
              "VAR FirstDay =  if(isblank(FirstDay1),CALCULATE(MAX('Calendar'[SequenceDate]),FILTER(ALL('Calendar'),and('Calendar'[BusinessDayInYear]=MaxBusinessDayLLY,'Calendar'[BusinessYear]=SelectedDayBusYr-2))),FirstDay1)",
              "",
              "VAR LastDay1 = CALCULATE(MAX('Calendar'[SequenceDate]),FILTER(ALL('Calendar'),and('Calendar'[BusinessDayInYear]=SelectedDayBusSeqDay,'Calendar'[BusinessYear]=SelectedDayBusYr-1)))",
              "VAR MaxBusinessDayLY = CALCULATE(max ('Calendar'[BusinessDayInYear]),FILTER(ALL('Calendar'),'Calendar'[BusinessYear]=SelectedDayBusYr-1))",
              "VAR LastDay =  if(isblank(LastDay1),CALCULATE(MAX('Calendar'[SequenceDate]),FILTER(ALL('Calendar'),and('Calendar'[BusinessDayInYear]=MaxBusinessDayLY,'Calendar'[BusinessYear]=SelectedDayBusYr-2))),LastDay1)",
              "",
              "VAR TwelveMonthsGrossMargin = ",
              "IF (",
              "    [ShowValueForDates],   ",
              "    CALCULATE ([Pre-incentive Gross Margin $], REMOVEFILTERS('Calendar'),'Calendar'[SequenceDate] >=FirstDay && 'Calendar'[SequenceDate] <= LastDay )",
              ")",
              "//VAR CurrentMonthInv = [Finished Good Dollars]",
              "VAR LastLastYearInv =",
              "    VAR CalendarIsFiltered = ISFILTERED ( 'calendar' )",
              "    VAR MaxDate = LOOKUPVALUE ('Calendar'[LLY Day Date],'Calendar'[CalendarDateKey], [LastDateWithData]  )",
              "    RETURN",
              "        IF (",
              "            CalendarIsFiltered && [ShowValueForDates],",
              "            CALCULATE ([Finished Good Dollars],FILTER (ALL ( 'Calendar' ),CONTAINS (  VALUES ( 'Calendar'[LLY Day Date] ), 'Calendar'[LLY Day Date], 'Calendar'[CalendarDate])) ),",
              "            CALCULATE ([Finished Good Dollars] , 'Calendar'[CalendarDate] = MaxDate )",
              "        )",
              "VAR LastYearInv =",
              "    VAR CalendarIsFiltered = ISFILTERED ( 'calendar' )",
              "    VAR MaxDate = LOOKUPVALUE ('Calendar'[LY Day Date],'Calendar'[CalendarDateKey], [LastDateWithData]  )",
              "    RETURN",
              "        IF (",
              "            CalendarIsFiltered && [ShowValueForDates],",
              "            CALCULATE ([Finished Good Dollars],FILTER (ALL('Calendar' ), CONTAINS (  VALUES ( 'Calendar'[LY Day Date] ), 'Calendar'[LY Day Date], 'Calendar'[CalendarDate] ))),",
              "            CALCULATE ([Finished Good Dollars] , 'Calendar'[CalendarDate] = MaxDate )",
              "        )",
              "VAR AvgInv =  IF ( [ShowValueForDates], (LastLastYearInv + LastYearInv) / 2  )",
              "VAR Result = DIVIDE(TwelveMonthsGrossMargin, AvgInv)",
              "RETURN Result"
            ],
            "formatString": "0.00",
            "displayFolder": "Statistics\\GMROI"
          },
          {
            "name": "Finished Good Dollars GMROI (2pt) 12M GM LY",
            "expression": [
              "",
              "VAR SelectedDay = max('Calendar'[SequenceDate])",
              "VAR SelectedDayBusSeqDay = LOOKUPVALUE('Calendar'[BusinessDayInYear],'Calendar'[SequenceDate],SelectedDay)",
              "VAR SelectedDayBusYr = LOOKUPVALUE('Calendar'[BusinessYear],'Calendar'[SequenceDate],SelectedDay)",
              "VAR FirstDay1 = CALCULATE(MAX('Calendar'[SequenceDate]),FILTER(ALL('Calendar'),and('Calendar'[BusinessDayInYear]=SelectedDayBusSeqDay,'Calendar'[BusinessYear]=SelectedDayBusYr-2)))",
              "VAR MaxBusinessDayLLY = CALCULATE(max ('Calendar'[BusinessDayInYear]),FILTER(ALL('Calendar'),'Calendar'[BusinessYear]=SelectedDayBusYr-2))",
              "VAR FirstDay =  if(isblank(FirstDay1),CALCULATE(MAX('Calendar'[SequenceDate]),FILTER(ALL('Calendar'),and('Calendar'[BusinessDayInYear]=MaxBusinessDayLLY,'Calendar'[BusinessYear]=SelectedDayBusYr-2))),FirstDay1)",
              "",
              "VAR LastDay1 = CALCULATE(MAX('Calendar'[SequenceDate]),FILTER(ALL('Calendar'),and('Calendar'[BusinessDayInYear]=SelectedDayBusSeqDay,'Calendar'[BusinessYear]=SelectedDayBusYr-1)))",
              "VAR MaxBusinessDayLY = CALCULATE(max ('Calendar'[BusinessDayInYear]),FILTER(ALL('Calendar'),'Calendar'[BusinessYear]=SelectedDayBusYr-1))",
              "VAR LastDay =  if(isblank(LastDay1),CALCULATE(MAX('Calendar'[SequenceDate]),FILTER(ALL('Calendar'),and('Calendar'[BusinessDayInYear]=MaxBusinessDayLY,'Calendar'[BusinessYear]=SelectedDayBusYr-2))),LastDay1)",
              "",
              "VAR TwelveMonthsGrossMargin = ",
              "IF ([ShowValueForDates],",
              "    CALCULATE ([Pre-incentive Gross Margin $], REMOVEFILTERS('Calendar'), 'Calendar'[SequenceDate] >=FirstDay  && 'Calendar'[SequenceDate] <= LastDay)",
              ")",
              "//VAR CurrentMonthInv = [Finished Good Dollars]",
              "VAR LastYearInv =",
              "    VAR CalendarIsFiltered = ISFILTERED ( 'calendar' )",
              "    VAR MaxDate =  LOOKUPVALUE ('Calendar'[LY Day Date], 'Calendar'[CalendarDateKey], [LastDateWithData]  )",
              "    RETURN IF (",
              "            CalendarIsFiltered && [ShowValueForDates],",
              "            CALCULATE ([Finished Good Dollars],FILTER ( ALL ( 'Calendar' ), CONTAINS ( VALUES ( 'Calendar'[LY Day Date] ), 'Calendar'[LY Day Date], 'Calendar'[CalendarDate] ))),",
              "            CALCULATE ( [Finished Good Dollars] , 'Calendar'[CalendarDate] = MaxDate )",
              "        )",
              "VAR LastLastYearInv =",
              "    VAR CalendarIsFiltered =  ISFILTERED ( 'calendar' )",
              "    VAR MaxDate =  LOOKUPVALUE ( 'Calendar'[LLY Day Date], 'Calendar'[CalendarDateKey], [LastDateWithData]  )",
              "    RETURN IF (",
              "            CalendarIsFiltered && [ShowValueForDates],",
              "            CALCULATE ([Finished Good Dollars], FILTER (ALL ( 'Calendar' ), CONTAINS ( VALUES ( 'Calendar'[LLY Day Date] ), 'Calendar'[LLY Day Date], 'Calendar'[CalendarDate]))),",
              "            CALCULATE ([Finished Good Dollars] , 'Calendar'[CalendarDate] = MaxDate )",
              "        )",
              "VAR AvgInv =  IF ([ShowValueForDates],(LastLastYearInv + LastYearInv) / 2 )",
              "VAR Result = DIVIDE(TwelveMonthsGrossMargin, AvgInv)",
              "RETURN TwelveMonthsGrossMargin"
            ],
            "formatString": "\\$#,0.00;(\\$#,0.00);\\$#,0.00",
            "displayFolder": "Statistics\\GMROI",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\" Accuracy=\"2\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "SRE SKU Count LY",
            "expression": [
              "",
              "CALCULATE(",
              "    [_SRE_SKU_Count]",
              "    , 'Comparison'[Param] = \"LY\"",
              ")"
            ],
            "formatString": "0"
          },
          {
            "name": "Inventory Global SKU Count LY",
            "expression": [
              "",
              "var a = [Inventory SKU Count LY]+[SRE SKU Count LY]",
              "return IF(ISBLANK(a),0,a)"
            ],
            "formatString": "0"
          },
          {
            "name": "Inventory Global SKU Count vs LY",
            "expression": [
              " var a = [Inventory Global SKU Count] - [Inventory Global SKU Count LY]",
              "return if(a=0,BLANK(),a)"
            ],
            "formatString": "#,0"
          },
          {
            "name": "Inventory Global SKU Count vs LY %",
            "expression": " ([Inventory Global SKU Count] - [Inventory Global SKU Count LY])/[Inventory Global SKU Count LY]",
            "formatString": "0%;-0%;0%"
          },
          {
            "name": "Finished Good Dollars GMROI (2pt) vs LY",
            "expression": " [Finished Good Dollars GMROI (2pt)] - [Finished Good Dollars GMROI (2pt) LY]",
            "formatString": "0.00",
            "displayFolder": "Statistics\\GMROI"
          },
          {
            "name": "Finished Good Dollars GMROI (2pt) vs LY %",
            "expression": " ([Finished Good Dollars GMROI (2pt)] - [Finished Good Dollars GMROI (2pt) LY])/[Finished Good Dollars GMROI (2pt) LY]",
            "formatString": "0%;-0%;0%",
            "displayFolder": "Statistics\\GMROI"
          },
          {
            "name": "Finished Good Dollars Turns (2pt) vs LY",
            "expression": " [Finished Good Dollars Turns (2pt)] - [Finished Good Dollars Turns (2pt) LY]",
            "formatString": "0.00",
            "displayFolder": "Statistics\\Turns"
          },
          {
            "name": "Finished Good Dollars Turns (2pt) vs LY %",
            "expression": " ([Finished Good Dollars Turns (2pt)] - [Finished Good Dollars Turns (2pt) LY])/[Finished Good Dollars Turns (2pt) LY]",
            "formatString": "0%;-0%;0%",
            "displayFolder": "Statistics\\Turns"
          },
          {
            "name": "Pre-incentive Sales Dollars per SKU LY",
            "expression": [
              " ",
              "VAR CalendarIsFiltered = ISFILTERED ( 'calendar' )",
              "VAR MaxDate =  LOOKUPVALUE ( 'Calendar'[LY Day Date],    'Calendar'[CalendarDateKey], [LastDateWithData]  )",
              "VAR SelectedDay = max('Calendar'[SequenceDate])",
              "VAR SelectedDayBusSeqDay = LOOKUPVALUE('Calendar'[BusinessDayInYear],'Calendar'[SequenceDate],SelectedDay)",
              "VAR SelectedDayBusYr = LOOKUPVALUE('Calendar'[BusinessYear],'Calendar'[SequenceDate],SelectedDay)",
              "VAR FirstDay1 = CALCULATE(MAX('Calendar'[SequenceDate]),FILTER(ALL('Calendar'),and('Calendar'[BusinessDayInYear]=SelectedDayBusSeqDay,'Calendar'[BusinessYear]=SelectedDayBusYr-2)))",
              "VAR MaxBusinessDayLLY = CALCULATE(max ('Calendar'[BusinessDayInYear]),FILTER(ALL('Calendar'),'Calendar'[BusinessYear]=SelectedDayBusYr-2))",
              "VAR FirstDay =  if(isblank(FirstDay1),CALCULATE(MAX('Calendar'[SequenceDate]),FILTER(ALL('Calendar'),and('Calendar'[BusinessDayInYear]=MaxBusinessDayLLY,'Calendar'[BusinessYear]=SelectedDayBusYr-2))),FirstDay1)",
              "",
              "VAR LastDay1 = CALCULATE(MAX('Calendar'[SequenceDate]),FILTER(ALL('Calendar'),and('Calendar'[BusinessDayInYear]=SelectedDayBusSeqDay,'Calendar'[BusinessYear]=SelectedDayBusYr-1)))",
              "VAR MaxBusinessDayLY = CALCULATE(max ('Calendar'[BusinessDayInYear]),FILTER(ALL('Calendar'),'Calendar'[BusinessYear]=SelectedDayBusYr-1))",
              "VAR LastDay =  if(isblank(LastDay1),CALCULATE(MAX('Calendar'[SequenceDate]),FILTER(ALL('Calendar'),and('Calendar'[BusinessDayInYear]=MaxBusinessDayLY,'Calendar'[BusinessYear]=SelectedDayBusYr-2))),LastDay1)",
              "",
              "VAR TwelveMonthsSales = ",
              "\tIF  (",
              "\t\t\t[ShowValueForDates],",
              "\t\t\tCALCULATE ([Pre-incentive Sales $],REMOVEFILTERS('Calendar'),'Calendar'[SequenceDate] >=FirstDay && 'Calendar'[SequenceDate] <= LastDay)",
              "\t\t)",
              "VAR LastLastYearSKUCount = ",
              "   IF (",
              "        CalendarIsFiltered && [ShowValueForDates],",
              "        CALCULATE ([Inventory SKU Count], FILTER (ALL( 'Calendar' ),CONTAINS(VALUES( 'Calendar'[LLY Day Date]),'Calendar'[LLY Day Date],'Calendar'[CalendarDate] ))),",
              "        CALCULATE ( [Inventory SKU Count] , 'Calendar'[CalendarDate] = MaxDate )",
              "    )",
              "VAR LastYearSKUCount = ",
              "   IF (",
              "        CalendarIsFiltered && [ShowValueForDates],",
              "        CALCULATE ([Inventory SKU Count], FILTER (ALL( 'Calendar' ),CONTAINS(VALUES( 'Calendar'[LY Day Date]),'Calendar'[LY Day Date],'Calendar'[CalendarDate] ))),",
              "        CALCULATE ( [Inventory SKU Count] , 'Calendar'[CalendarDate] = MaxDate )",
              "    )",
              "VAR AvgSKUCount = (LastLastYearSKUCount + LastYearSKUCount) / 2\t",
              "VAR Result = DIVIDE(TwelveMonthsSales, AvgSKUCount)",
              "RETURN Result"
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "Pre-Incentive Sales Dollars per SKU vs LY",
            "expression": " [Pre-Incentive Sales Dollars per SKU] - [Pre-Incentive Sales Dollars per SKU LY]",
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "Pre-Incentive Sales Dollars per SKU vs LY %",
            "expression": " ([Pre-Incentive Sales Dollars per SKU] - [Pre-Incentive Sales Dollars per SKU LY])/[Pre-Incentive Sales Dollars per SKU LY]",
            "formatString": "0%;-0%;0%"
          },
          {
            "name": "Finished Good Dollars Turns (2pt) LY",
            "expression": [
              " ",
              "var SelectedDay = max('Calendar'[SequenceDate])",
              "var SelectedDayBusSeqDay = LOOKUPVALUE('Calendar'[BusinessDayInYear],'Calendar'[SequenceDate],SelectedDay)",
              "var SelectedDayBusYr = LOOKUPVALUE('Calendar'[BusinessYear],'Calendar'[SequenceDate],SelectedDay)",
              "var FirstDay1 = CALCULATE(MAX('Calendar'[SequenceDate]),FILTER(ALL('Calendar'),and('Calendar'[BusinessDayInYear]=SelectedDayBusSeqDay,'Calendar'[BusinessYear]=SelectedDayBusYr-2)))",
              "var MaxBusinessDayLLY = CALCULATE(max ('Calendar'[BusinessDayInYear]),FILTER(ALL('Calendar'),'Calendar'[BusinessYear]=SelectedDayBusYr-2))",
              "var FirstDay =  if(isblank(FirstDay1),CALCULATE(MAX('Calendar'[SequenceDate]),FILTER(ALL('Calendar'),and('Calendar'[BusinessDayInYear]=MaxBusinessDayLLY,'Calendar'[BusinessYear]=SelectedDayBusYr-2))),FirstDay1)",
              "",
              "var LastDay1 = CALCULATE(MAX('Calendar'[SequenceDate]),FILTER(ALL('Calendar'),and('Calendar'[BusinessDayInYear]=SelectedDayBusSeqDay,'Calendar'[BusinessYear]=SelectedDayBusYr-1)))",
              "var MaxBusinessDayLY = CALCULATE(max ('Calendar'[BusinessDayInYear]),FILTER(ALL('Calendar'),'Calendar'[BusinessYear]=SelectedDayBusYr-1))",
              "var LastDay =  if(isblank(LastDay1),CALCULATE(MAX('Calendar'[SequenceDate]),FILTER(ALL('Calendar'),and('Calendar'[BusinessDayInYear]=MaxBusinessDayLY,'Calendar'[BusinessYear]=SelectedDayBusYr-2))),LastDay1)",
              "VAR TwelveMonthsCOGS = ",
              "IF (",
              "    [ShowValueForDates],    ",
              "    VAR Result = CALCULATE ([Pre-incentive COGS $],  REMOVEFILTERS('Calendar'), 'Calendar'[SequenceDate] >=FirstDay && 'Calendar'[SequenceDate] <= LastDay  )",
              "    RETURN  Result",
              ")",
              "VAR LastLastYearInv =",
              "    VAR CalendarIsFiltered = ISFILTERED ( 'calendar' )",
              "    VAR MaxDate = LOOKUPVALUE ('Calendar'[LLY Day Date],'Calendar'[CalendarDateKey], [LastDateWithData])",
              "    RETURN IF (",
              "            CalendarIsFiltered && [ShowValueForDates],",
              "            CALCULATE ([Finished Good Dollars],",
              "                FILTER (ALL ( 'Calendar' ),CONTAINS (VALUES ( 'Calendar'[LLY Day Date] ),'Calendar'[LLY Day Date], 'Calendar'[CalendarDate]  )         )",
              "            ),",
              "            CALCULATE ( [Finished Good Dollars] , 'Calendar'[CalendarDate] = MaxDate )",
              "        )",
              "VAR LastYearInv =",
              "    VAR CalendarIsFiltered = ISFILTERED ( 'calendar' )",
              "    VAR MaxDate = LOOKUPVALUE ('Calendar'[LY Day Date],'Calendar'[CalendarDateKey], [LastDateWithData])",
              "    RETURN IF (",
              "            CalendarIsFiltered && [ShowValueForDates],",
              "            CALCULATE ([Finished Good Dollars],",
              "                FILTER (ALL ( 'Calendar' ),CONTAINS (VALUES ( 'Calendar'[LY Day Date] ),'Calendar'[LY Day Date], 'Calendar'[CalendarDate]  )         )",
              "            ),",
              "            CALCULATE ( [Finished Good Dollars] , 'Calendar'[CalendarDate] = MaxDate )",
              "        )",
              "VAR AvgInv = IF ( [ShowValueForDates],  (LastLastYearInv + LastYearInv) / 2 )",
              "VAR Result = DIVIDE(TwelveMonthsCOGS, AvgInv)",
              "RETURN Result"
            ],
            "displayFolder": "Statistics\\Turns"
          },
          {
            "name": "Finished Good Dollars Turns (2pt) 12M COGS LY",
            "expression": [
              "",
              "",
              "var SelectedDay = max('Calendar'[SequenceDate])",
              "var SelectedDayBusSeqDay = LOOKUPVALUE('Calendar'[BusinessDayInYear],'Calendar'[SequenceDate],SelectedDay)",
              "var SelectedDayBusYr = LOOKUPVALUE('Calendar'[BusinessYear],'Calendar'[SequenceDate],SelectedDay)",
              "var FirstDay1 = CALCULATE(MAX('Calendar'[SequenceDate]),FILTER(ALL('Calendar'),and('Calendar'[BusinessDayInYear]=SelectedDayBusSeqDay,'Calendar'[BusinessYear]=SelectedDayBusYr-2)))",
              "var MaxBusinessDayLLY = CALCULATE(max ('Calendar'[BusinessDayInYear]),FILTER(ALL('Calendar'),'Calendar'[BusinessYear]=SelectedDayBusYr-2))",
              "var FirstDay =  if(isblank(FirstDay1),CALCULATE(MAX('Calendar'[SequenceDate]),FILTER(ALL('Calendar'),and('Calendar'[BusinessDayInYear]=MaxBusinessDayLLY,'Calendar'[BusinessYear]=SelectedDayBusYr-2))),FirstDay1)",
              "var LastDay1 = CALCULATE(MAX('Calendar'[SequenceDate]),FILTER(ALL('Calendar'),and('Calendar'[BusinessDayInYear]=SelectedDayBusSeqDay,'Calendar'[BusinessYear]=SelectedDayBusYr-1)))",
              "var MaxBusinessDayLY = CALCULATE(max ('Calendar'[BusinessDayInYear]),FILTER(ALL('Calendar'),'Calendar'[BusinessYear]=SelectedDayBusYr-1))",
              "var LastDay =  if(isblank(LastDay1),CALCULATE(MAX('Calendar'[SequenceDate]),FILTER(ALL('Calendar'),and('Calendar'[BusinessDayInYear]=MaxBusinessDayLY,'Calendar'[BusinessYear]=SelectedDayBusYr-2))),LastDay1)",
              "",
              "VAR TwelveMonthsCOGS = ",
              "IF (",
              "    [ShowValueForDates],   ",
              "    VAR Result = CALCULATE ([Pre-incentive COGS $], REMOVEFILTERS('Calendar'),'Calendar'[SequenceDate] >=FirstDay && 'Calendar'[SequenceDate] <= LastDay )",
              "    RETURN Result",
              ")",
              "VAR LastYearInv =",
              "    VAR CalendarIsFiltered = ISFILTERED ( 'calendar' )",
              "    VAR MaxDate = LOOKUPVALUE ('Calendar'[LY Day Date],'Calendar'[CalendarDateKey], [LastDateWithData] )",
              "    RETURN",
              "        IF (",
              "            CalendarIsFiltered && [ShowValueForDates],",
              "            CALCULATE ([Finished Good Dollars],",
              "                FILTER (ALL ( 'Calendar' ), CONTAINS (VALUES ( 'Calendar'[LY Day Date] ), 'Calendar'[LY Day Date], 'Calendar'[CalendarDate] ) ) ),",
              "            CALCULATE ( [Finished Good Dollars] , 'Calendar'[CalendarDate] = MaxDate )",
              "        )",
              "VAR LastLastYearInv =",
              "    VAR CalendarIsFiltered = ISFILTERED ( 'calendar' )",
              "    VAR MaxDate = LOOKUPVALUE ('Calendar'[LLY Day Date],'Calendar'[CalendarDateKey], [LastDateWithData] )",
              "    RETURN",
              "        IF (",
              "            CalendarIsFiltered && [ShowValueForDates],",
              "            CALCULATE ([Finished Good Dollars],",
              "                FILTER (ALL ( 'Calendar' ), CONTAINS (VALUES ( 'Calendar'[LLY Day Date] ), 'Calendar'[LLY Day Date], 'Calendar'[CalendarDate] ) ) ),",
              "            CALCULATE ( [Finished Good Dollars] , 'Calendar'[CalendarDate] = MaxDate )",
              "        )",
              "VAR AvgInv = IF ([ShowValueForDates], (LastLastYearInv + LastYearInv) / 2  )",
              "VAR Result = DIVIDE(TwelveMonthsCOGS, AvgInv)",
              "RETURN TwelveMonthsCOGS"
            ],
            "displayFolder": "Statistics\\Turns"
          },
          {
            "name": "Finished Good Dollars Turns (2pt) Average Inventory LY",
            "expression": [
              "",
              "var SelectedDay = max('Calendar'[SequenceDate])",
              "var SelectedDayBusSeqDay = LOOKUPVALUE('Calendar'[BusinessDayInYear],'Calendar'[SequenceDate],SelectedDay)",
              "var SelectedDayBusYr = LOOKUPVALUE('Calendar'[BusinessYear],'Calendar'[SequenceDate],SelectedDay)",
              "var FirstDay1 = CALCULATE(MAX('Calendar'[SequenceDate]),FILTER(ALL('Calendar'),and('Calendar'[BusinessDayInYear]=SelectedDayBusSeqDay,'Calendar'[BusinessYear]=SelectedDayBusYr-2)))",
              "var MaxBusinessDayLLY = CALCULATE(max ('Calendar'[BusinessDayInYear]),FILTER(ALL('Calendar'),'Calendar'[BusinessYear]=SelectedDayBusYr-2))",
              "var FirstDay =  if(isblank(FirstDay1),CALCULATE(MAX('Calendar'[SequenceDate]),FILTER(ALL('Calendar'),and('Calendar'[BusinessDayInYear]=MaxBusinessDayLLY,'Calendar'[BusinessYear]=SelectedDayBusYr-2))),FirstDay1)",
              "",
              "var LastDay1 = CALCULATE(MAX('Calendar'[SequenceDate]),FILTER(ALL('Calendar'),and('Calendar'[BusinessDayInYear]=SelectedDayBusSeqDay,'Calendar'[BusinessYear]=SelectedDayBusYr-1)))",
              "var MaxBusinessDayLY = CALCULATE(max ('Calendar'[BusinessDayInYear]),FILTER(ALL('Calendar'),'Calendar'[BusinessYear]=SelectedDayBusYr-1))",
              "var LastDay =  if(isblank(LastDay1),CALCULATE(MAX('Calendar'[SequenceDate]),FILTER(ALL('Calendar'),and('Calendar'[BusinessDayInYear]=MaxBusinessDayLY,'Calendar'[BusinessYear]=SelectedDayBusYr-2))),LastDay1)",
              "VAR TwelveMonthsCOGS = ",
              "IF (",
              "    [ShowValueForDates],",
              "    CALCULATE ([Pre-incentive COGS $],  REMOVEFILTERS('Calendar'),'Calendar'[SequenceDate] >=FirstDay && 'Calendar'[SequenceDate] <= LastDay )",
              ")",
              "VAR LastLastYearInv =",
              "    VAR CalendarIsFiltered =ISFILTERED ( 'calendar' )",
              "    VAR MaxDate = LOOKUPVALUE (  'Calendar'[LLY Day Date], 'Calendar'[CalendarDateKey], [LastDateWithData]    )",
              "    RETURN",
              "        IF (",
              "            CalendarIsFiltered && [ShowValueForDates],",
              "            CALCULATE ([Finished Good Dollars],",
              "                FILTER ( ALL ( 'Calendar' ), CONTAINS (VALUES ( 'Calendar'[LLY Day Date] ),'Calendar'[LLY Day Date], 'Calendar'[CalendarDate]  ) ) ),",
              "            CALCULATE ( [Finished Good Dollars] , 'Calendar'[CalendarDate] = MaxDate )",
              "        )",
              "VAR LastYearInv =",
              "    VAR CalendarIsFiltered =ISFILTERED ( 'calendar' )",
              "    VAR MaxDate = LOOKUPVALUE (  'Calendar'[LY Day Date], 'Calendar'[CalendarDateKey], [LastDateWithData]    )",
              "    RETURN IF (",
              "            CalendarIsFiltered && [ShowValueForDates],",
              "            CALCULATE ([Finished Good Dollars],",
              "                FILTER ( ALL ( 'Calendar' ), CONTAINS (VALUES ( 'Calendar'[LY Day Date] ),'Calendar'[LY Day Date], 'Calendar'[CalendarDate]  ) ) ),",
              "            CALCULATE ( [Finished Good Dollars] , 'Calendar'[CalendarDate] = MaxDate )",
              "        )",
              "VAR AvgInv = IF ([ShowValueForDates],(LastLastYearInv + LastYearInv) / 2  )",
              "VAR Result = DIVIDE(TwelveMonthsCOGS, AvgInv)",
              "RETURN AvgInv"
            ]
          },
          {
            "name": "Inventory SKU Count 2022",
            "expression": [
              " var Max2022 = CALCULATE(MAX('Calendar'[CalendarDateKey]),FILTER(All('Calendar'),'Calendar'[BusinessYear]=2022))",
              "var a =",
              "COUNTROWS(",
              "    CALCULATETABLE(",
              "        DISTINCT(DimItem[SKUCount]),",
              "    CROSSFILTER(FactFinishedGoodsInventory[ItemKey],DimItem[ItemKey],Both),",
              "    FactFinishedGoodsInventory[Units] > 0,",
              "\t'Calendar'[CalendarDateKey] = Max2022,REMOVEFILTERS('Calendar')",
              "    )",
              ") ",
              "return IF(ISBLANK(a),0,a)",
              ""
            ]
          },
          {
            "name": "Inventory Global SKU Count 2022",
            "expression": " [Inventory SKU Count 2022] +[SRE SKU Count 2022]",
            "formatString": "#,0"
          },
          {
            "name": "_Finished Good Units Intransit New",
            "expression": " Calculate(SUM(FactFinishedGoodsInventory[Units]),DimFinancialMeasure[FinancialAccountKey] = \"21200\")",
            "formatString": "#,0"
          },
          {
            "name": "_SKU_Count_New",
            "expression": " CALCULATE(DISTINCTCOUNTNOBLANK(DimItem[SKUCount]),DimItem[SKUCount]<>\"SKIP\")",
            "formatString": "#,0"
          },
          {
            "name": "_SKU_StyleNum_Count",
            "expression": [
              "",
              "CALCULATE(DISTINCTCOUNTNOBLANK(DimItem[StyleNum]),FILTER(DimItem,OR(DimItem[SKUCount] <>BLANK(),DimItem[SKUCount]<>\"SKIP\")))"
            ]
          },
          {
            "name": "_SKU_Color_Count",
            "expression": [
              "",
              "CALCULATE(DISTINCTCOUNTNOBLANK(DimItem[Color]),FILTER(DimItem,OR(DimItem[SKUCount] <>BLANK(),DimItem[SKUCount]<>\"SKIP\")))"
            ]
          },
          {
            "name": "_SKU_Attribute_Count",
            "expression": [
              "",
              "CALCULATE(DISTINCTCOUNTNOBLANK(DimItem[Attribute]),FILTER(DimItem,OR(DimItem[SKUCount] <>BLANK(),DimItem[SKUCount]<>\"SKIP\")))"
            ]
          },
          {
            "name": "_SKU_SCA_Count",
            "expression": [
              "",
              "CALCULATE(DISTINCTCOUNTNOBLANK(DimItem[SCAGlobal]),FILTER(DimItem,OR(DimItem[SKUCount] <>BLANK(),DimItem[SKUCount]<>\"SKIP\")))"
            ]
          },
          {
            "name": "Inventory Style Count",
            "expression": " CALCULATE( [_SKU_StyleNum_Count],CROSSFILTER(FactFinishedGoodsInventory[ItemKey],DimItem[ItemKey],Both), FactFinishedGoodsInventory[Units] > 0 , 'Comparison'[Param] = \"Current\" )",
            "formatString": "#,0"
          },
          {
            "name": "Inventory Color Count",
            "expression": " CALCULATE( [_SKU_Color_Count],CROSSFILTER(FactFinishedGoodsInventory[ItemKey],DimItem[ItemKey],Both), FactFinishedGoodsInventory[Units] > 0 , 'Comparison'[Param] = \"Current\" )",
            "formatString": "#,0"
          },
          {
            "name": "Inventory Attribute Count",
            "expression": " CALCULATE( [_SKU_Attribute_Count],CROSSFILTER(FactFinishedGoodsInventory[ItemKey],DimItem[ItemKey],Both), FactFinishedGoodsInventory[Units] > 0 , 'Comparison'[Param] = \"Current\" )",
            "formatString": "#,0"
          },
          {
            "name": "Inventory SCA Count",
            "expression": " CALCULATE( [_SKU_SCA_Count],CROSSFILTER(FactFinishedGoodsInventory[ItemKey],DimItem[ItemKey],Both), FactFinishedGoodsInventory[Units] > 0 , 'Comparison'[Param] = \"Current\" )",
            "formatString": "#,0"
          },
          {
            "name": "_SKU_size_Count",
            "expression": [
              "",
              "CALCULATE(DISTINCTCOUNTNOBLANK(DimItem[Size]),FILTER(DimItem,OR(DimItem[SKUCount] <>BLANK(),DimItem[SKUCount]<>\"SKIP\")))"
            ]
          },
          {
            "name": "Inventory Size Count",
            "expression": " CALCULATE( [_SKU_size_Count],CROSSFILTER(FactFinishedGoodsInventory[ItemKey],DimItem[ItemKey],Both), FactFinishedGoodsInventory[Units] > 0 , 'Comparison'[Param] = \"Current\" )",
            "formatString": "#,0"
          },
          {
            "name": "_SKU_SC_Count",
            "expression": [
              "",
              "CALCULATE(DISTINCTCOUNTNOBLANK(DimItem[SCGlobal]),FILTER(DimItem,OR(DimItem[SKUCount] <>BLANK(),DimItem[SKUCount]<>\"SKIP\")))"
            ]
          },
          {
            "name": "Inventory SC Count",
            "expression": " CALCULATE( [_SKU_SC_Count],CROSSFILTER(FactFinishedGoodsInventory[ItemKey],DimItem[ItemKey],Both), FactFinishedGoodsInventory[Units] > 0 , 'Comparison'[Param] = \"Current\" )"
          }
        ]
      },
      {
        "name": "FactInventoryAvailability",
        "columns": [
          {
            "name": "ATPDate",
            "dataType": "int64",
            "sourceColumn": "ATPDate"
          },
          {
            "name": "DemandQty",
            "dataType": "int64",
            "sourceColumn": "DemandQty",
            "encodingHint": "value"
          },
          {
            "name": "ATPQty",
            "dataType": "int64",
            "sourceColumn": "ATPQty",
            "isAvailableInMdx": false,
            "encodingHint": "value"
          },
          {
            "name": "AvailableInvQty",
            "dataType": "int64",
            "sourceColumn": "AvailableInvQty",
            "encodingHint": "value"
          },
          {
            "name": "AllocatedQty",
            "dataType": "int64",
            "sourceColumn": "AllocatedQty",
            "encodingHint": "value"
          },
          {
            "name": "UnallocatedQty",
            "dataType": "int64",
            "sourceColumn": "UnallocatedQty",
            "encodingHint": "value"
          },
          {
            "name": "PurchaseReqQty",
            "dataType": "int64",
            "sourceColumn": "PurchaseReqQty",
            "encodingHint": "value"
          },
          {
            "name": "BlockedStockQty",
            "dataType": "int64",
            "sourceColumn": "BlockedStockQty",
            "encodingHint": "value"
          },
          {
            "name": "QualityInspQty",
            "dataType": "int64",
            "sourceColumn": "QualityInspQty",
            "encodingHint": "value"
          },
          {
            "name": "ItemKey",
            "dataType": "string",
            "sourceColumn": "ItemKey",
            "isAvailableInMdx": false
          },
          {
            "name": "FacilityKey",
            "dataType": "string",
            "sourceColumn": "FacilityKey",
            "isAvailableInMdx": false
          },
          {
            "name": "AsOfDateKey",
            "dataType": "int64",
            "sourceColumn": "AsOfDateKey"
          },
          {
            "name": "ShipperFlagKey",
            "dataType": "string",
            "isHidden": true,
            "sourceColumn": "ShipperFlagKey",
            "isAvailableInMdx": false
          },
          {
            "name": "Plant",
            "dataType": "string",
            "sourceColumn": "Plant"
          },
          {
            "name": "ShipperMaterial",
            "dataType": "string",
            "sourceColumn": "ShipperMaterial"
          },
          {
            "name": "ShipperGridValue",
            "dataType": "string",
            "sourceColumn": "ShipperGridValue"
          },
          {
            "name": "Material",
            "dataType": "string",
            "sourceColumn": "Material"
          },
          {
            "name": "GridValue",
            "dataType": "string",
            "sourceColumn": "GridValue"
          },
          {
            "name": "StorLoc",
            "dataType": "string",
            "sourceColumn": "StorLoc"
          },
          {
            "name": "ShipperItemKey",
            "dataType": "string",
            "sourceColumn": "ShipperItemKey",
            "isAvailableInMdx": false
          },
          {
            "name": "CreatedOn",
            "dataType": "dateTime",
            "sourceColumn": "CreatedOn"
          },
          {
            "name": "UpdatedOn",
            "dataType": "dateTime",
            "sourceColumn": "UpdatedOn"
          },
          {
            "type": "calculated",
            "name": "StdCost",
            "dataType": "decimal",
            "isDataTypeInferred": false,
            "expression": "LOOKUPVALUE(DimItem[StdCost],DimItem[ItemKey],FactInventoryAvailability[ItemKey])",
            "formatString": "\\$#,0.00;(\\$#,0.00);\\$#,0.00",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\" Accuracy=\"2\" ThousandSeparator=\"True\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "type": "calculated",
            "name": "Available+Blocked$",
            "dataType": "decimal",
            "isDataTypeInferred": false,
            "expression": "(FactInventoryAvailability[Available Qty]+FactInventoryAvailability[BlockedStockQty])*FactInventoryAvailability[StdCost]",
            "formatString": "\\$#,0.00;(\\$#,0.00);\\$#,0.00",
            "isAvailableInMdx": false,
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\" Accuracy=\"2\" ThousandSeparator=\"True\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "type": "calculated",
            "name": "Shipper Component SKUGlobal",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "MINX(RELATEDTABLE(DimItem),DimItem[SKUGlobal])"
          },
          {
            "type": "calculated",
            "name": "Shipper Component Style_Num",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "MINX(RELATEDTABLE(DimItem),DimItem[StyleNum])"
          },
          {
            "type": "calculated",
            "name": "Shipper Component Color",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "MINX(RELATEDTABLE(DimItem),DimItem[Color])"
          },
          {
            "type": "calculated",
            "name": "Shipper Component Attribution_Code",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "MINX(RELATEDTABLE(DimItem),DimItem[Attribute])"
          },
          {
            "type": "calculated",
            "name": "Shipper Component Size",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "MINX(RELATEDTABLE(DimItem),DimItem[Size])"
          },
          {
            "type": "calculated",
            "name": "StdCost1",
            "dataType": "decimal",
            "isDataTypeInferred": false,
            "expression": "1.00",
            "formatString": "\\$#,0.00;(\\$#,0.00);\\$#,0.00",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\" Accuracy=\"2\" ThousandSeparator=\"True\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "BusinessKey",
            "dataType": "string",
            "sourceColumn": "BusinessKey"
          }
        ],
        "partitions": [
          {
            "name": "FactInventoryAvailabilityTemplate",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = #\"SynapseDW\",",
                "    Inventory_mvwFactFGInventoryAvailability = Source{[Schema=\"Inventory\",Item=\"mvwFactFGInventoryAvailability\"]}[Data],",
                "#\"Filtered Rows\" = Table.SelectRows(Inventory_mvwFactFGInventoryAvailability  , each [AsOfDateKey] < 19000101),",
                "    #\"Removed Columns\" = Table.RemoveColumns(#\"Filtered Rows\",{\"cb\"}),",
                "    #\"Changed Type\" = Table.TransformColumnTypes(#\"Removed Columns\",{{\"ATPQty\", Int64.Type}, {\"DemandQty\", Int64.Type}, {\"AvailableInvQty\", Int64.Type}, {\"AllocatedQty\", Int64.Type}, {\"UnallocatedQty\", Int64.Type}, {\"PurchaseReqQty\", Int64.Type}, {\"BlockedStockQty\", Int64.Type}, {\"QualityInspQty\", Int64.Type}, {\"BusinessKey\", type text}})",
                "in",
                "    #\"Changed Type\""
              ]
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>let",
                  "    Source = #\"SynapseDW\",",
                  "    Inventory_mvwFactFGInventoryAvailability = Source{[Schema=\"Inventory\",Item=\"mvwFactFGInventoryAvailability\"]}[Data],",
                  "#\"Filtered Rows\" = Table.SelectRows(Inventory_mvwFactFGInventoryAvailability  , each [AsOfDateKey] < 19000101)",
                  "in",
                  "    #\"Filtered Rows\"</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "measures": [
          {
            "name": "Allocated Qty",
            "expression": "SUM(FactInventoryAvailability[AllocatedQty])",
            "formatString": "#,0"
          },
          {
            "name": "ATP Qty",
            "expression": " SUM(FactInventoryAvailability[ATPQty])",
            "formatString": "#,0"
          },
          {
            "name": "Available Qty",
            "expression": "SUM(FactInventoryAvailability[AvailableInvQty])",
            "formatString": "#,0"
          },
          {
            "name": "Blocked Stock Qty",
            "expression": "SUM(FactInventoryAvailability[BlockedStockQty])",
            "formatString": "#,0"
          },
          {
            "name": "Demand Qty",
            "expression": "SUM(FactInventoryAvailability[DemandQty])",
            "formatString": "#,0"
          },
          {
            "name": "Purchase Req Qty",
            "expression": "SUM(FactInventoryAvailability[PurchaseReqQty])",
            "formatString": "#,0"
          },
          {
            "name": "Quality Insp Qty",
            "expression": "SUM(FactInventoryAvailability[QualityInspQty])",
            "formatString": "#,0"
          },
          {
            "name": "Unallocated Qty",
            "expression": "SUM(FactInventoryAvailability[UnallocatedQty])",
            "formatString": "#,0"
          },
          {
            "name": "Sum of all Qty fields",
            "expression": "[Allocated Qty]+[Demand Qty]+[ATP Qty]+[Available Qty]+[Blocked Stock Qty]+[Purchase Req Qty]+[Quality Insp Qty]+[Unallocated Qty]",
            "formatString": "#,0"
          },
          {
            "name": "Shipper Allocated Qty",
            "expression": [
              "",
              "SUMX(",
              "\tFILTER(",
              "\t\tFactInventoryAvailability,",
              "\t\tRELATED(DimShipperFlag[ShipperFlag])=\"S\"",
              "\t\t),",
              "\t\tFactInventoryAvailability[AllocatedQty]",
              "\t)"
            ],
            "formatString": "#,0"
          },
          {
            "name": "Shipper ATP Qty",
            "expression": [
              "",
              "SUMX(",
              "\tFILTER(",
              "\t\tFactInventoryAvailability,",
              "\t\tRELATED(DimShipperFlag[ShipperFlag])=\"S\"",
              "\t\t),",
              "\t\tFactInventoryAvailability[ATPQty]",
              "\t)"
            ],
            "formatString": "#,0"
          },
          {
            "name": "Shipper Available Qty",
            "expression": [
              "",
              "SUMX(",
              "\tFILTER(",
              "\t\tFactInventoryAvailability,",
              "\t\tRELATED(DimShipperFlag[ShipperFlag])=\"S\"",
              "\t\t),",
              "\t\tFactInventoryAvailability[AvailableInvQty]",
              "\t)"
            ],
            "formatString": "#,0"
          },
          {
            "name": "Shipper Blocked Stock Qty",
            "expression": [
              "",
              "SUMX(",
              "\tFILTER(",
              "\t\tFactInventoryAvailability,",
              "\t\tRELATED(DimShipperFlag[ShipperFlag])=\"S\"",
              "\t\t),",
              "\t\tFactInventoryAvailability[BlockedStockQty]",
              "\t)"
            ],
            "formatString": "#,0"
          },
          {
            "name": "Shipper Demand Qty",
            "expression": [
              "",
              "SUMX(",
              "\tFILTER(",
              "\t\tFactInventoryAvailability,",
              "\t\tRELATED(DimShipperFlag[ShipperFlag])=\"S\"",
              "\t\t),",
              "\t\tFactInventoryAvailability[DemandQty]",
              "\t)"
            ],
            "formatString": "#,0"
          },
          {
            "name": "Shipper Unallocated Qty",
            "expression": [
              "",
              "SUMX(",
              "\tFILTER(",
              "\t\tFactInventoryAvailability,",
              "\t\tRELATED(DimShipperFlag[ShipperFlag])=\"S\"",
              "\t\t),",
              "\t\tFactInventoryAvailability[UnallocatedQty]",
              "\t)"
            ],
            "formatString": "#,0"
          },
          {
            "name": "Shipper Purchase Request Qty",
            "expression": [
              "",
              "SUMX(",
              "\tFILTER(",
              "\t\tFactInventoryAvailability,",
              "\t\tRELATED(DimShipperFlag[ShipperFlag])=\"S\"",
              "\t\t),",
              "\t\tFactInventoryAvailability[PurchaseReqQty]",
              "\t)"
            ],
            "formatString": "#,0"
          },
          {
            "name": "Shipper Quality Insp Qty",
            "expression": [
              "",
              "SUMX(",
              "\tFILTER(",
              "\t\tFactInventoryAvailability,",
              "\t\tRELATED(DimShipperFlag[ShipperFlag])=\"S\"",
              "\t\t),",
              "\t\tFactInventoryAvailability[QualityInspQty]",
              "\t)"
            ],
            "formatString": "#,0"
          },
          {
            "name": "Shipper Component Demand Qty",
            "expression": [
              "",
              "VAR SH_QTY = ",
              "CALCULATE(",
              "SUM(FactInventoryAvailability[DemandQty]),",
              "DimShipperFlag[ShipperFlag]=\"SC\",",
              "ALLEXCEPT(FactInventoryAvailability,",
              "\t\t  FactInventoryAvailability[ATPDate]\t\t ))",
              "\t",
              "VAR SC_QTY = SUM(FactInventoryAvailability[DemandQty])",
              "",
              "Return",
              "",
              "IF(",
              "    SELECTEDVALUE(DimShipperFlag[ShipperFlag])=\"S\",",
              "    SH_QTY,",
              "\tSC_QTY",
              "  )"
            ],
            "formatString": "#,0"
          },
          {
            "name": "Shipper Component ATP Qty",
            "expression": [
              "",
              "VAR SH_QTY = ",
              "CALCULATE(",
              "SUM(FactInventoryAvailability[ATPQty]),",
              "DimShipperFlag[ShipperFlag]=\"SC\",",
              "ALLEXCEPT(FactInventoryAvailability,",
              "\t\t  FactInventoryAvailability[ATPDate]\t\t ))",
              "\t",
              "VAR SC_QTY = SUM(FactInventoryAvailability[ATPQty])",
              "",
              "Return",
              "",
              "IF(",
              "    SELECTEDVALUE(DimShipperFlag[ShipperFlag])=\"S\",",
              "    SH_QTY,",
              "\tSC_QTY",
              "  )"
            ],
            "formatString": "#,0"
          },
          {
            "name": "Shipper Component Available Qty",
            "expression": [
              "",
              "VAR SH_QTY = ",
              "CALCULATE(",
              "SUM(FactInventoryAvailability[AvailableInvQty]),",
              "DimShipperFlag[ShipperFlag]=\"SC\",",
              "",
              "ALLEXCEPT(FactInventoryAvailability,",
              "\t\t  FactInventoryAvailability[ATPDate]\t\t ))",
              "\t",
              "VAR SC_QTY = SUM(FactInventoryAvailability[AvailableInvQty])",
              "",
              "Return",
              "",
              "IF(",
              "    SELECTEDVALUE(DimShipperFlag[ShipperFlag])=\"S\",",
              "    SH_QTY,",
              "\tSC_QTY",
              "  )"
            ],
            "formatString": "#,0"
          },
          {
            "name": "Shipper Component Allocated Qty",
            "expression": [
              "",
              "VAR SH_QTY = ",
              "CALCULATE(",
              "SUM(FactInventoryAvailability[AllocatedQty]),",
              "DimShipperFlag[ShipperFlag]=\"SC\",",
              "",
              "ALLEXCEPT(FactInventoryAvailability,",
              "\t\t  FactInventoryAvailability[ATPDate]\t\t ))",
              "\t",
              "VAR SC_QTY = SUM(FactInventoryAvailability[AllocatedQty])",
              "",
              "Return",
              "",
              "IF(",
              "    SELECTEDVALUE(DimShipperFlag[ShipperFlag])=\"S\",",
              "    SH_QTY,",
              "\tSC_QTY",
              "  )"
            ],
            "formatString": "#,0"
          },
          {
            "name": "Shipper Component Unallocated Qty",
            "expression": [
              "",
              "VAR SH_QTY = ",
              "CALCULATE(",
              "SUM(FactInventoryAvailability[UnallocatedQty]),",
              "DimShipperFlag[ShipperFlag]=\"SC\",",
              "ALLEXCEPT(FactInventoryAvailability,",
              "\t\t  FactInventoryAvailability[ATPDate]\t\t ))",
              "\t",
              "VAR SC_QTY = SUM(FactInventoryAvailability[UnallocatedQty])",
              "",
              "Return",
              "",
              "IF(",
              "    SELECTEDVALUE(DimShipperFlag[ShipperFlag])=\"S\",",
              "    SH_QTY,",
              "\tSC_QTY",
              "  )"
            ],
            "formatString": "#,0"
          },
          {
            "name": "Shipper Component Purchase Request Qty",
            "expression": [
              "",
              "VAR SH_QTY = ",
              "CALCULATE(",
              "SUM(FactInventoryAvailability[PurchaseReqQty]),",
              "DimShipperFlag[ShipperFlag]=\"SC\",",
              "",
              "ALLEXCEPT(FactInventoryAvailability,",
              "\t\t  FactInventoryAvailability[ATPDate]\t\t ))",
              "\t",
              "VAR SC_QTY = SUM(FactInventoryAvailability[PurchaseReqQty])",
              "",
              "Return",
              "",
              "IF(",
              "    SELECTEDVALUE(DimShipperFlag[ShipperFlag])=\"S\",",
              "    SH_QTY,",
              "\tSC_QTY",
              "  )"
            ],
            "formatString": "#,0"
          },
          {
            "name": "Shipper Component Blocked Stock Qty",
            "expression": [
              "",
              "VAR SH_QTY = ",
              "CALCULATE(",
              "SUM(FactInventoryAvailability[BlockedStockQty]),",
              "DimShipperFlag[ShipperFlag]=\"SC\",",
              "",
              "ALLEXCEPT(FactInventoryAvailability,",
              "\t\t  FactInventoryAvailability[ATPDate]\t\t ))",
              "\t",
              "VAR SC_QTY = SUM(FactInventoryAvailability[BlockedStockQty])",
              "",
              "Return",
              "",
              "IF(",
              "    SELECTEDVALUE(DimShipperFlag[ShipperFlag])=\"S\",",
              "    SH_QTY,",
              "\tSC_QTY",
              "  )"
            ],
            "formatString": "#,0"
          },
          {
            "name": "Shipper Component Quality Insp Qty",
            "expression": [
              "",
              "VAR SH_QTY = ",
              "CALCULATE(",
              "SUM(FactInventoryAvailability[QualityInspQty]),",
              "DimShipperFlag[ShipperFlag]=\"SC\",",
              "",
              "ALLEXCEPT(FactInventoryAvailability,",
              "\t\t  FactInventoryAvailability[ATPDate]\t\t ))",
              "\t",
              "VAR SC_QTY = SUM(FactInventoryAvailability[QualityInspQty])",
              "",
              "Return",
              "",
              "IF(",
              "    SELECTEDVALUE(DimShipperFlag[ShipperFlag])=\"S\",",
              "    SH_QTY,",
              "\tSC_QTY",
              "  )"
            ],
            "formatString": "#,0"
          },
          {
            "name": "Available + Blocked $",
            "expression": [
              "",
              "var a = sum(FactInventoryAvailability[Available+Blocked$])",
              "return  if(ISBLANK(a),0,a)"
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "Shipper SKUGlobal",
            "expression": " LOOKUPVALUE(DimItem[SKUGlobal],DimItem[ItemKey],MIN(FactInventoryAvailability[ShipperItemKey]))"
          },
          {
            "name": "Shipper Style_Num",
            "expression": " LOOKUPVALUE(DimItem[StyleNum],DimItem[ItemKey],MIN(FactInventoryAvailability[ShipperItemKey]))"
          },
          {
            "name": "Shipper Color",
            "expression": " LOOKUPVALUE(DimItem[Color],DimItem[ItemKey],MIN(FactInventoryAvailability[ShipperItemKey]))"
          },
          {
            "name": "Shipper Attribution Code",
            "expression": " LOOKUPVALUE(DimItem[Attribute],DimItem[ItemKey],min(FactInventoryAvailability[ShipperItemKey]))"
          },
          {
            "name": "Shipper Size",
            "expression": " LOOKUPVALUE(DimItem[Size],DimItem[ItemKey],MIN(FactInventoryAvailability[ShipperItemKey]))"
          }
        ]
      },
      {
        "name": "FactSCADivision",
        "columns": [
          {
            "name": "SCAGlobal",
            "dataType": "string",
            "sourceColumn": "SCAGlobal"
          },
          {
            "name": "BusinessKey",
            "dataType": "string",
            "sourceColumn": "BusinessKey",
            "isAvailableInMdx": false
          },
          {
            "name": "RawNetSalesDollars",
            "dataType": "double",
            "sourceColumn": "RawNetSalesDollars",
            "isAvailableInMdx": false
          },
          {
            "name": "NetSalesDollars",
            "dataType": "double",
            "sourceColumn": "NetSalesDollars",
            "isAvailableInMdx": false
          },
          {
            "name": "NetSalesCumulative",
            "dataType": "double",
            "sourceColumn": "NetSalesCumulative",
            "isAvailableInMdx": false
          },
          {
            "name": "NetSalesTotal",
            "dataType": "double",
            "sourceColumn": "NetSalesTotal",
            "isAvailableInMdx": false
          },
          {
            "name": "NetSalesCumulativePercentage",
            "dataType": "double",
            "sourceColumn": "NetSalesCumulativePercentage",
            "formatString": "0.00%;-0.00%;0.00%"
          },
          {
            "name": "RawNetGrossMarginDollars",
            "dataType": "double",
            "sourceColumn": "RawNetGrossMarginDollars",
            "formatString": "\\$#,0.00;(\\$#,0.00);\\$#,0.00",
            "isAvailableInMdx": false,
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\" Accuracy=\"2\" ThousandSeparator=\"True\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "NetGrossMarginDollars",
            "dataType": "double",
            "sourceColumn": "NetGrossMarginDollars",
            "formatString": "\\$#,0.00;(\\$#,0.00);\\$#,0.00",
            "isAvailableInMdx": false,
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\" Accuracy=\"2\" ThousandSeparator=\"True\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "NetGrossMarginCumulative",
            "dataType": "double",
            "sourceColumn": "NetGrossMarginCumulative",
            "formatString": "\\$#,0.00;(\\$#,0.00);\\$#,0.00",
            "isAvailableInMdx": false,
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\" Accuracy=\"2\" ThousandSeparator=\"True\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "NetGrossMarginTotal",
            "dataType": "double",
            "sourceColumn": "NetGrossMarginTotal",
            "formatString": "\\$#,0.00;(\\$#,0.00);\\$#,0.00",
            "isAvailableInMdx": false,
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\" Accuracy=\"2\" ThousandSeparator=\"True\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "NetGrossMarginCumulativePercentage",
            "dataType": "double",
            "sourceColumn": "NetGrossMarginCumulativePercentage",
            "formatString": "0.00%;-0.00%;0.00%"
          },
          {
            "name": "DivisionABCClassGrossMargin",
            "dataType": "string",
            "sourceColumn": "DivisionABCClassGrossMargin"
          },
          {
            "name": "DivisionABCClassSales",
            "dataType": "string",
            "sourceColumn": "DivisionABCClassSales"
          },
          {
            "name": "DivisionDecileGrossMargin",
            "dataType": "string",
            "sourceColumn": "DivisionDecileGrossMargin",
            "sortByColumn": "DivisionDecileGrossMarginSort"
          },
          {
            "name": "DivisionDecileGrossMarginSort",
            "dataType": "int64",
            "sourceColumn": "DivisionDecileGrossMarginSort",
            "formatString": "0"
          },
          {
            "name": "DivisionDecileSales",
            "dataType": "string",
            "sourceColumn": "DivisionDecileSales",
            "sortByColumn": "DivisionDecileSalesSort"
          },
          {
            "name": "DivisionDecileSalesSort",
            "dataType": "int64",
            "sourceColumn": "DivisionDecileSalesSort",
            "formatString": "0"
          },
          {
            "name": "DivisionRankGrossMargin",
            "dataType": "int64",
            "sourceColumn": "DivisionRankGrossMargin",
            "formatString": "0"
          },
          {
            "name": "DivisionRankSales",
            "dataType": "int64",
            "sourceColumn": "DivisionRankSales",
            "formatString": "0"
          },
          {
            "name": "SCAGlobalBusId",
            "dataType": "string",
            "sourceColumn": "SCAGlobalBusId",
            "isAvailableInMdx": false
          },
          {
            "name": "SCAGlobalQuad",
            "dataType": "string",
            "sourceColumn": "SCAGlobalQuad"
          },
          {
            "type": "calculated",
            "name": "SBURank",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "var vrminsbu = RELATED(FactSCAGlobal[minSbuDesc])",
              "var vrDivision = RELATED(DimBusiness[Division])",
              "var vrSCA = RELATED(FactSCAGlobal[SCAGlobal])",
              "var a = IF( RELATED(FactSCAGlobal[minSbuDesc])<>RELATED(DimBusiness[Division]),       \tCALCULATE(MAX(FactSCADivision[DivisionDecileSales]),FILTER(FactSCADivision,",
              "\t\tAND(RELATED(DimBusiness[Division])=vrminsbu, ",
              "\t\tAND(RELATED(FactSCAGlobal[minSbuDesc])=vrminsbu,RELATED(FactSCAGlobal[SCAGlobal])=vrSCA)))),",
              "             FactSCADivision[DivisionDecileSales])",
              "return IF(ISBLANK(a),FactSCADivision[DivisionDecileSales],a)"
            ],
            "sortByColumn": "SBURankSort"
          },
          {
            "type": "calculated",
            "name": "SBURankSort",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "var vrminsbu = RELATED(FactSCAGlobal[minSbuDesc])",
              "var vrDivision = RELATED(DimBusiness[Division])",
              "var vrSCA = RELATED(FactSCAGlobal[SCAGlobal])",
              "var a = IF( RELATED(FactSCAGlobal[minSbuDesc])<>RELATED(DimBusiness[Division]),       \tCALCULATE(MAX(FactSCADivision[DivisionDecileSales]),FILTER(FactSCADivision,",
              "\t\tAND(RELATED(DimBusiness[Division])=vrminsbu, ",
              "\t\tAND(RELATED(FactSCAGlobal[minSbuDesc])=vrminsbu,RELATED(FactSCAGlobal[SCAGlobal])=vrSCA)))),",
              "             FactSCADivision[DivisionDecileSales])",
              "var rank1 = IF(ISBLANK(a),FactSCADivision[DivisionDecileSales],a)",
              "var ret = SWITCH(rank1,\"1\",1,\"2\",2,\"3\",3,\"4\",4,\"5\",5,\"6\",6,\"7\",7,\"8\",8,\"9\",9,\"10\",10,\"No Sales & Established\",11,\"No Sales & New\",12, \"Blank SKU\",13, \"Bulk SKU\",14, \"Financial SKU\",15,16)",
              "return ret"
            ]
          },
          {
            "type": "calculated",
            "name": "SBURank_GrossMargin",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "var vrminsbu = RELATED(FactSCAGlobal[minSbuDesc])",
              "var vrDivision = RELATED(DimBusiness[Division])",
              "var vrSCA = RELATED(FactSCAGlobal[SCAGlobal])",
              "var a = IF( RELATED(FactSCAGlobal[minSbuDesc])<>RELATED(DimBusiness[Division]),       \tCALCULATE(MAX(FactSCADivision[DivisionDecileGrossMargin]),FILTER(FactSCADivision,",
              "\t\tAND(RELATED(DimBusiness[Division])=vrminsbu, ",
              "\t\tAND(RELATED(FactSCAGlobal[minSbuDesc])=vrminsbu,RELATED(FactSCAGlobal[SCAGlobal])=vrSCA)))),",
              "             FactSCADivision[DivisionDecileGrossMargin])",
              "return IF(ISBLANK(a),FactSCADivision[DivisionDecileGrossMargin],a)"
            ],
            "sortByColumn": "SBURank_GrossMarginSort"
          },
          {
            "type": "calculated",
            "name": "SBURank_GrossMarginSort",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "var vrminsbu = RELATED(FactSCAGlobal[minSbuDesc])",
              "var vrDivision = RELATED(DimBusiness[Division])",
              "var vrSCA = RELATED(FactSCAGlobal[SCAGlobal])",
              "var a = IF( RELATED(FactSCAGlobal[minSbuDesc])<>RELATED(DimBusiness[Division]),       \tCALCULATE(MAX(FactSCADivision[DivisionDecileGrossMargin]),FILTER(FactSCADivision,",
              "\t\tAND(RELATED(DimBusiness[Division])=vrminsbu, ",
              "\t\tAND(RELATED(FactSCAGlobal[minSbuDesc])=vrminsbu,RELATED(FactSCAGlobal[SCAGlobal])=vrSCA)))),",
              "             FactSCADivision[DivisionDecileGrossMargin])",
              "var rank1 = IF(ISBLANK(a),FactSCADivision[DivisionDecileGrossMargin],a)",
              "var ret = SWITCH(rank1,\"1\",1,\"2\",2,\"3\",3,\"4\",4,\"5\",5,\"6\",6,\"7\",7,\"8\",8,\"9\",9,\"10\",10,\"No Sales & Established\",11,\"No Sales & New\",12, \"Blank SKU\",13, \"Bulk SKU\",14, \"Financial SKU\",15,16)",
              "return ret"
            ]
          },
          {
            "type": "calculated",
            "name": "SCAQuad",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": " IF(FactSCADivision[SBURank_GrossMargin] IN {\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\"},\"T\",\"B\")"
          },
          {
            "name": "SCABusKey",
            "dataType": "string",
            "sourceColumn": "SCABusKey",
            "isAvailableInMdx": false
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = Value.NativeQuery(#\"SynapseDW\", \"",
                "",
                "SELECT [SCABusKey]",
                "      ,[SCAGlobalBusId]",
                "      ,[SCAGlobal]",
                "      ,[BusinessKey]",
                "      ,[RawNetSalesDollars]",
                "      ,[NetSalesDollars]",
                "      ,[NetSalesCumulative]",
                "      ,[NetSalesTotal]",
                "      ,[NetSalesCumulativePercentage]",
                "      ,[RawNetGrossMarginDollars]",
                "      ,[NetGrossMarginDollars]",
                "      ,[NetGrossMarginCumulative]",
                "      ,[NetGrossMarginTotal]",
                "      ,[NetGrossMarginCumulativePercentage]",
                "      ,[DivisionABCClassGrossMargin]",
                "      ,[DivisionABCClassSales]",
                "      ,[DivisionDecileGrossMargin]",
                "      ,[DivisionDecileGrossMarginSort]",
                "      ,[DivisionDecileSales]",
                "      ,[DivisionDecileSalesSort]",
                "      ,[DivisionRankGrossMargin]",
                "      ,[DivisionRankSales]",
                "      ,CASE ",
                "        WHEN [DivisionDecileGrossMargin] IS NULL",
                "        THEN 'UNMAPPED'",
                "        WHEN [DivisionDecileGrossMargin] IN ('1','2','3','4','5','6','7','8')",
                "        THEN 'T'",
                "        ELSE 'B'",
                "      END as SCAGlobalQuad",
                "  FROM [Inventory].[vwFactSCADivision]",
                "",
                "\")",
                "in",
                "    Source"
              ]
            }
          }
        ]
      },
      {
        "name": "FactSCAChainAccount",
        "columns": [
          {
            "name": "ChainAccountDescBusId",
            "dataType": "string",
            "sourceColumn": "ChainAccountDescBusId",
            "isAvailableInMdx": false
          },
          {
            "name": "ChainAccountDesc",
            "dataType": "string",
            "sourceColumn": "ChainAccountDesc"
          },
          {
            "name": "BusinessSegmentHierarchyId",
            "dataType": "int64",
            "sourceColumn": "BusinessSegmentHierarchyId",
            "isAvailableInMdx": false
          },
          {
            "name": "RawNetSalesDollars",
            "dataType": "double",
            "sourceColumn": "RawNetSalesDollars",
            "isAvailableInMdx": false
          },
          {
            "name": "NetSalesDollars",
            "dataType": "double",
            "sourceColumn": "NetSalesDollars",
            "isAvailableInMdx": false
          },
          {
            "name": "NetSalesCumulative",
            "dataType": "double",
            "sourceColumn": "NetSalesCumulative",
            "isAvailableInMdx": false
          },
          {
            "name": "NetSalesTotal",
            "dataType": "double",
            "sourceColumn": "NetSalesTotal",
            "isAvailableInMdx": false
          },
          {
            "name": "NetSalesRank",
            "dataType": "int64",
            "sourceColumn": "NetSalesRank"
          },
          {
            "name": "RawNetGrossMarginDollars",
            "dataType": "double",
            "sourceColumn": "RawNetGrossMarginDollars",
            "isAvailableInMdx": false
          },
          {
            "name": "NetGrossMarginDollars",
            "dataType": "double",
            "sourceColumn": "NetGrossMarginDollars",
            "isAvailableInMdx": false
          },
          {
            "name": "NetGrossMarginCumulative",
            "dataType": "double",
            "sourceColumn": "NetGrossMarginCumulative",
            "isAvailableInMdx": false
          },
          {
            "name": "NetGrossMarginTotal",
            "dataType": "double",
            "sourceColumn": "NetGrossMarginTotal",
            "isAvailableInMdx": false
          },
          {
            "name": "NetGrossMarginCumulativePercentage",
            "dataType": "double",
            "sourceColumn": "NetGrossMarginCumulativePercentage"
          },
          {
            "name": "NetGrossMarginRank",
            "dataType": "int64",
            "sourceColumn": "NetGrossMarginRank"
          },
          {
            "name": "ChainAccountDecileGrossMargin",
            "dataType": "string",
            "sourceColumn": "ChainAccountDecileGrossMargin",
            "sortByColumn": "ChainAccountDecileGrossMarginSort"
          },
          {
            "name": "ChainAccountDecileGrossMarginSort",
            "dataType": "int64",
            "sourceColumn": "ChainAccountDecileGrossMarginSort"
          },
          {
            "name": "ChainAccountQuad",
            "dataType": "string",
            "sourceColumn": "ChainAccountQuad"
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = SynapseDW,",
                "    Inventory_vwFactSCAChainAccount = Source{[Schema=\"Inventory\",Item=\"vwFactSCAChainAccount\"]}[Data]",
                "in",
                "    Inventory_vwFactSCAChainAccount"
              ]
            }
          }
        ]
      },
      {
        "name": "FactSKUStatistics",
        "columns": [
          {
            "name": "SbuDesc",
            "dataType": "string",
            "sourceColumn": "SbuDesc"
          },
          {
            "name": "SKUGlobal",
            "dataType": "string",
            "sourceColumn": "SKUGlobal"
          },
          {
            "name": "LTMPreincentiveSalesDollarsRaw",
            "dataType": "double",
            "sourceColumn": "LTMPreincentiveSalesDollarsRaw",
            "isAvailableInMdx": false
          },
          {
            "name": "LTMPreincentiveSalesDollars",
            "dataType": "double",
            "sourceColumn": "LTMPreincentiveSalesDollars",
            "isAvailableInMdx": false
          },
          {
            "name": "HBICumulativeSales",
            "dataType": "double",
            "sourceColumn": "HBICumulativeSales",
            "isAvailableInMdx": false
          },
          {
            "name": "HBITotalSales",
            "dataType": "double",
            "sourceColumn": "HBITotalSales",
            "isAvailableInMdx": false
          },
          {
            "name": "HBICumulativePercentage",
            "dataType": "double",
            "sourceColumn": "HBICumulativePercentage"
          },
          {
            "name": "HBIRank",
            "dataType": "int64",
            "sourceColumn": "HBIRank"
          },
          {
            "name": "DivisionCumulativeSales",
            "dataType": "double",
            "sourceColumn": "DivisionCumulativeSales",
            "isAvailableInMdx": false
          },
          {
            "name": "DivisionTotalSales",
            "dataType": "double",
            "sourceColumn": "DivisionTotalSales",
            "isAvailableInMdx": false
          },
          {
            "name": "DivisionCumulativePercentage",
            "dataType": "double",
            "sourceColumn": "DivisionCumulativePercentage"
          },
          {
            "name": "DivisionRank",
            "dataType": "int64",
            "sourceColumn": "DivisionRank"
          },
          {
            "name": "DivisionClass",
            "dataType": "string",
            "sourceColumn": "DivisionClass"
          },
          {
            "name": "HBIClass",
            "dataType": "string",
            "sourceColumn": "HBIClass"
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = SynapseDW,",
                "    Inventory_vwFactSKUStatistics = Source{[Schema=\"Inventory\",Item=\"vwFactSKUStatistics\"]}[Data]",
                "in",
                "    Inventory_vwFactSKUStatistics"
              ]
            }
          }
        ]
      },
      {
        "name": "FactSCACustomer",
        "columns": [
          {
            "name": "SCAGlobal",
            "dataType": "string",
            "sourceColumn": "SCAGlobal"
          },
          {
            "name": "CustomerAccountKey",
            "dataType": "string",
            "sourceColumn": "CustomerAccountKey",
            "isAvailableInMdx": false
          },
          {
            "name": "CustomerRank",
            "dataType": "int64",
            "sourceColumn": "CustomerRank"
          },
          {
            "name": "BusinessKey",
            "dataType": "string",
            "sourceColumn": "BusinessKey",
            "isAvailableInMdx": false
          },
          {
            "name": "GroupDesc",
            "dataType": "string",
            "sourceColumn": "GroupDesc"
          },
          {
            "name": "ChainAccountDesc",
            "dataType": "string",
            "sourceColumn": "ChainAccountDesc"
          },
          {
            "name": "ChainAccountDescBusID",
            "dataType": "string",
            "sourceColumn": "ChainAccountDescBusID",
            "isAvailableInMdx": false
          },
          {
            "name": "SCAGlobalBusID",
            "dataType": "string",
            "sourceColumn": "SCAGlobalBusID",
            "isAvailableInMdx": false
          },
          {
            "name": "NetSalesDollars",
            "dataType": "double",
            "sourceColumn": "NetSalesDollars",
            "isAvailableInMdx": false
          },
          {
            "name": "NetGrossMarginDollars",
            "dataType": "double",
            "sourceColumn": "NetGrossMarginDollars",
            "isAvailableInMdx": false
          },
          {
            "type": "calculated",
            "name": "SBURank",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "--LOOKUPVALUE(FactSCADivision[SBURank],FactSCADivision[SCABusKey],FactSCACustomer[SCABusKey])",
              "CALCULATE(MIN(FactSCADivision[SBURank]),FILTER(FactSCADivision,FactSCACustomer[SCABusKey]=FactSCADivision[SCABusKey]))"
            ]
          },
          {
            "type": "calculated",
            "name": "Top 5",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              " var sca = FactSCACustomer[SCAGlobal]",
              "var buskey = FactSCACustomer[BusinessKey]",
              "var a = CALCULATETABLE(DISTINCT(FactSCACustomer[ChainAccountDesc]),FILTER(FactSCACustomer,FactSCACustomer[SCAGlobal]=sca && FactSCACustomer[CustomerRank]<6 && FactSCACustomer[BusinessKey]=buskey))",
              "return  CONCATENATEX(a,[ChainAccountDesc],\", \")"
            ]
          },
          {
            "type": "calculated",
            "name": "ChainAccountQuad",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "LOOKUPVALUE(FactSCAChainAccount[ChainAccountQuad],FactSCAChainAccount[ChainAccountDescBusId],FactSCACustomer[ChainAccountDescBusID])",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "ChainAccountSCAGlobalDistribution",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "VAR CountNumAccountTypes = COUNTROWS( CALCULATETABLE(",
              "                 VALUES('FactSCACustomer'[SCAGlobalQuad]),",
              "                  ALLEXCEPT('FactSCACustomer', 'FactSCACustomer'[ChainAccountDescBusID])",
              "                ))",
              "              RETURN IF(CountNumAccountTypes = 2, \"T & B\", 'FactSCACustomer'[SCAGlobalQuad])"
            ]
          },
          {
            "type": "calculated",
            "name": "SCAGlobalQuad",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "SWITCH(TRUE(),",
              "                 ISBLANK(FactSCACustomer[DivisionDecileGrossMargin]), \"UNMAPPED\",                 //Unmapped SCAs will fall here\",----",
              "                'FactSCACustomer'[DivisionDecileGrossMargin] = \"No Sales & Established\", \"B\",      //Jacquie instructed to put these in the bottom 20% -Nathan on 4/6/22\",",
              "                ('FactSCACustomer'[DivisionDecileGrossMargin])= \"No Sales & New\", \"B\",              //Jacquie instructed to put these in the bottom 20% -Nathan on 4/6/22\",",
              "                --VALUE('FactSCACustomer'[DivisionDecileGrossMargin]) <= 8, \"T\",                     //This is for the top 80, based on the decile integer\",",
              "                IF (NOT ISERROR(VALUE(FactSCACustomer[DivisionDecileGrossMargin])),VALUE([DivisionDecileGrossMargin])) <=8, \"T\",",
              "                 \"B\"                                                                                    //this is for the ninth and tenth decile\",",
              ")",
              "",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "DivisionDecileGrossMargin",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "--LOOKUPVALUE(FactSCADivision[DivisionDecileGrossMargin],FactSCADivision[SCABusKey],FactSCACustomer[SCABusKey])",
              "CALCULATE(MIN(FactSCADivision[DivisionDecileGrossMargin]),FILTER(FactSCADivision,FactSCACustomer[SCABusKey]=FactSCADivision[SCABusKey]))"
            ]
          },
          {
            "type": "calculated",
            "name": "SCA Division Decile Gross Margin",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "SWITCH(TRUE(),RELATED('DimBusiness'[Division]) IN {\"HA Apparel\", \"HA Bras N Things\", \"HA Sheridan\",\"Champion Europe\", \"MFB Europe\"}, BLANK(),",
              "    RELATED('DimBusiness'[DivisionGroup]) = \"Hanes Europe\", BLANK(),",
              "    AND(ISBLANK( RELATED( 'FactSCAChainAccount'[NetGrossMarginCumulativePercentage] ) ), DATEDIFF(RELATED('FactSCAGlobal'[SCA First Inventory Date]),NOW(),DAY) < 181),",
              "    \"No Sales & New\",",
              "    ISBLANK( RELATED( 'FactSCAChainAccount'[NetGrossMarginCumulativePercentage] ) ), \"No Sales & Established\",",
              "    RELATED( 'FactSCAChainAccount'[NetGrossMarginCumulativePercentage] ) > .9, \"10\",",
              "    RELATED( 'FactSCAChainAccount'[NetGrossMarginCumulativePercentage] ) > .8, \"9\",",
              "    RELATED( 'FactSCAChainAccount'[NetGrossMarginCumulativePercentage] ) > .7, \"8\",",
              "    RELATED( 'FactSCAChainAccount'[NetGrossMarginCumulativePercentage] ) > .6, \"7\",",
              "    RELATED( 'FactSCAChainAccount'[NetGrossMarginCumulativePercentage] ) > .5, \"6\",",
              "    RELATED( 'FactSCAChainAccount'[NetGrossMarginCumulativePercentage] ) > .4, \"5\",",
              "    RELATED('FactSCAChainAccount'[NetGrossMarginCumulativePercentage] ) > .3, \"4\",",
              "    RELATED( 'FactSCAChainAccount'[NetGrossMarginCumulativePercentage] ) > .2, \"3\",",
              "    RELATED('FactSCAChainAccount'[NetGrossMarginCumulativePercentage] ) > .1, \"2\",",
              "\"1\")"
            ]
          },
          {
            "name": "BusinessSegmentHierarchyID",
            "dataType": "int64",
            "sourceColumn": "BusinessSegmentHierarchyID",
            "isAvailableInMdx": false
          },
          {
            "name": "SCABusKey",
            "dataType": "string",
            "sourceColumn": "SCABusKey",
            "isAvailableInMdx": false
          },
          {
            "type": "calculated",
            "name": "SCAGlobalDistribution",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "VAR CountNumSCAQuad = COUNTROWS( CALCULATETABLE(",
              "                 VALUES('FactSCACustomer'[ChainAccountQuad]),",
              "                  ALLEXCEPT('FactSCACustomer','FactSCACustomer'[SCAGlobal], 'FactSCACustomer'[BusinessSegmentHierarchyID])",
              "                ))",
              "              RETURN IF(CountNumSCAQuad = 2, \"T & B\", 'FactSCACustomer'[ChainAccountQuad])"
            ]
          },
          {
            "type": "calculated",
            "name": "Quad",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "IF",
              "\t(",
              "\t\tAND(FactSCACustomer[SCAGlobalQuad]=\"T\",FactSCACustomer[ChainAccountQuad]=\"T\"),\"1/TT\",",
              "\t\tIF",
              "\t\t\t(",
              "\t\t\t\tAND(FactSCACustomer[SCAGlobalQuad]=\"B\",FactSCACustomer[ChainAccountQuad]=\"T\"),\"2/BT\",",
              "\t\t\t\tIF",
              "\t\t\t\t\t(",
              "\t\t\t\t\t\tAND(FactSCACustomer[SCAGlobalQuad]=\"T\",FactSCACustomer[ChainAccountQuad]=\"B\"),\"3/TB\",",
              "\t\t\t\t\t\tIF",
              "\t\t\t\t\t\t\t(",
              "\t\t\t\t\t\t\t\tAND(FactSCACustomer[SCAGlobalQuad]=\"B\",FactSCACustomer[ChainAccountQuad]=\"B\"),\"4/BB\",\"None\"",
              "\t\t\t\t\t\t\t)",
              "\t\t\t\t\t)",
              "\t\t\t)",
              "\t)\t"
            ]
          },
          {
            "type": "calculated",
            "name": "QuadList",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "IF",
              "\t(",
              "\t\tAND(FactSCACustomer[SCAGlobalDistribution]=\"T\",FactSCACustomer[ChainAccountSCAGlobalDistribution]=\"T\"),\"Unique to Quad 1\",",
              "\t\tIF",
              "\t\t\t(",
              "\t\t\t\tAND(FactSCACustomer[SCAGlobalDistribution]=\"T\",FactSCACustomer[ChainAccountSCAGlobalDistribution]=\"B\"),\"Unique to Quad 2\",",
              "\t\t\t\tIF",
              "\t\t\t\t\t(",
              "\t\t\t\t\t\tAND(FactSCACustomer[SCAGlobalDistribution]=\"B\",FactSCACustomer[ChainAccountSCAGlobalDistribution]=\"T\"),\"Unique to Quad 3\",",
              "\t\t\t\t\t\tIF",
              "\t\t\t\t\t\t(",
              "\t\t\t\t\t\t\tAND(FactSCACustomer[SCAGlobalDistribution]=\"B\",FactSCACustomer[ChainAccountSCAGlobalDistribution]=\"B\"),\"Unique to Quad 4\",",
              "\t\t\t\t\t\t\t\"Quad \"& FactSCACustomer[Quad]",
              "\t\t\t\t\t\t)",
              "\t\t\t\t\t)",
              "\t\t\t)",
              "\t)\t"
            ]
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = SynapseDW,",
                "    Inventory_vwFactSCACustomer = Source{[Schema=\"Inventory\",Item=\"vwFactSCACustomer\"]}[Data]",
                "in",
                "    Inventory_vwFactSCACustomer"
              ]
            }
          }
        ],
        "measures": [
          {
            "name": "SCA Customer Net Sales Dollars",
            "expression": " SUM('FactSCACustomer'[NetSalesDollars])",
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "SCA Customer Net Gross Margin Dollars",
            "expression": " SUM('FactSCACustomer'[NetGrossMarginDollars])",
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "SCA Customer SCA Count",
            "expression": [
              " ",
              "DISTINCTCOUNT('FactSCACustomer'[SCAGlobal])"
            ],
            "formatString": "#,0"
          },
          {
            "name": "SCA Customer Chain Account Count",
            "expression": [
              " ",
              "DISTINCTCOUNT('FactSCACustomer'[ChainAccountDesc])"
            ],
            "formatString": "#,0"
          },
          {
            "name": "SCA TT Net Gross Margin $",
            "expression": [
              " ",
              "CALCULATE(",
              "        [SCA Customer Net Gross Margin Dollars],",
              "         'FactSCACustomer'[SCAGlobalQuad] = \"T\" ,",
              "        'FactSCACustomer'[ChainAccountQuad] = \"T\")",
              "       "
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "SCA TB Net Gross Margin $",
            "expression": [
              " ",
              "CALCULATE(",
              "        [SCA Customer Net Gross Margin Dollars],",
              "         'FactSCACustomer'[SCAGlobalQuad] = \"T\" ,",
              "        'FactSCACustomer'[ChainAccountQuad] = \"B\")",
              ""
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "SCA BT Net Gross Margin $",
            "expression": [
              " ",
              "CALCULATE(",
              "        [SCA Customer Net Gross Margin Dollars],",
              "         'FactSCACustomer'[SCAGlobalQuad] = \"B\" ,",
              "        'FactSCACustomer'[ChainAccountQuad] = \"T\")",
              ""
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "SCA BB Net Gross Margin $",
            "expression": [
              " ",
              "CALCULATE(",
              "        [SCA Customer Net Gross Margin Dollars],",
              "         'FactSCACustomer'[SCAGlobalQuad] = \"B\" ,",
              "        'FactSCACustomer'[ChainAccountQuad] = \"B\")",
              ""
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "SCA TT Net Gross Margin %",
            "expression": [
              " ",
              "DIVIDE([SCA TT Net Gross Margin $], [SCA Customer Net Gross Margin Dollars])"
            ],
            "formatString": "0%;-0%;0%"
          },
          {
            "name": "SCA TB Net Gross Margin %",
            "expression": [
              " ",
              "DIVIDE([SCA TB Net Gross Margin $], [SCA Customer Net Gross Margin Dollars])"
            ],
            "formatString": "0%;-0%;0%"
          },
          {
            "name": "SCA BT Net Gross Margin %",
            "expression": [
              " ",
              "DIVIDE([SCA BT Net Gross Margin $], [SCA Customer Net Gross Margin Dollars])"
            ],
            "formatString": "0%;-0%;0%"
          },
          {
            "name": "SCA BB Net Gross Margin %",
            "expression": [
              " ",
              "DIVIDE([SCA BB Net Gross Margin $], [SCA Customer Net Gross Margin Dollars])"
            ],
            "formatString": "0%;-0%;0%"
          },
          {
            "name": "SCA TT Net Sales $",
            "expression": [
              " ",
              " CALCULATE(",
              "        [SCA Customer Net Sales Dollars],",
              "        'FactSCAChainAccount'[ChainAccountQuad] = \"T\",",
              "        'FactSCADivision'[SCAGlobalQuad] = \"T\"    )"
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "SCA TB Net Sales $",
            "expression": [
              " ",
              "CALCULATE(",
              "        [SCA Customer Net Sales Dollars],",
              "         'FactSCACustomer'[SCAGlobalQuad] = \"T\" ,",
              "        'FactSCACustomer'[ChainAccountQuad] = \"B\")"
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "SCA BT Net Sales $",
            "expression": [
              " ",
              "CALCULATE(",
              "        [SCA Customer Net Sales Dollars],",
              "       'FactSCACustomer'[SCAGlobalQuad] = \"B\" ,",
              "        'FactSCACustomer'[ChainAccountQuad] = \"T\")"
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "SCA BB Net Sales $",
            "expression": [
              " ",
              " CALCULATE(",
              "        [SCA Customer Net Sales Dollars],",
              "        'FactSCAChainAccount'[ChainAccountQuad] = \"B\",",
              "        'FactSCADivision'[SCAGlobalQuad] = \"B\"    )"
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "SCA TT Net Sales %",
            "expression": [
              " ",
              "DIVIDE([SCA TT Net Sales $], [SCA Customer Net Sales Dollars])"
            ],
            "formatString": "0%;-0%;0%"
          },
          {
            "name": "SCA TB Net Sales %",
            "expression": [
              " ",
              "DIVIDE([SCA TB Net Sales $], [SCA Customer Net Sales Dollars])"
            ],
            "formatString": "0%;-0%;0%"
          },
          {
            "name": "SCA BT Net Sales %",
            "expression": [
              " ",
              "DIVIDE([SCA BT Net Sales $], [SCA Customer Net Sales Dollars])"
            ],
            "formatString": "0%;-0%;0%"
          },
          {
            "name": "SCA BB Net Sales %",
            "expression": [
              " ",
              "DIVIDE([SCA BB Net Sales $], [SCA Customer Net Sales Dollars])"
            ],
            "formatString": "0%;-0%;0%"
          },
          {
            "name": "SCA TT SCA Count",
            "expression": [
              " ",
              " CALCULATE(",
              "        [SCA Customer SCA Count],",
              "        'FactSCAChainAccount'[ChainAccountQuad] = \"T\",",
              "        'FactSCADivision'[SCAGlobalQuad] = \"T\"    )"
            ],
            "formatString": "#,0"
          },
          {
            "name": "SCA TB SCA Count",
            "expression": [
              " ",
              "CALCULATE(",
              "        [SCA Customer SCA Count],",
              "         'FactSCACustomer'[SCAGlobalQuad] = \"T\" ,",
              "        'FactSCACustomer'[ChainAccountQuad] = \"B\")"
            ],
            "formatString": "#,0"
          },
          {
            "name": "SCA BT SCA Count",
            "expression": [
              " ",
              "CALCULATE(",
              "        [SCA Customer SCA Count],",
              "       'FactSCACustomer'[SCAGlobalQuad] = \"B\" ,",
              "        'FactSCACustomer'[ChainAccountQuad] = \"T\")"
            ],
            "formatString": "#,0"
          },
          {
            "name": "SCA BB SCA Count",
            "expression": [
              " ",
              " CALCULATE(",
              "        [SCA Customer SCA Count],",
              "        'FactSCAChainAccount'[ChainAccountQuad] = \"B\",",
              "        'FactSCADivision'[SCAGlobalQuad] = \"B\"    )"
            ],
            "formatString": "#,0"
          },
          {
            "name": "SCA TT Chain Account Count",
            "expression": [
              " ",
              " CALCULATE(",
              "        [SCA Customer Chain Account Count],",
              "        'FactSCAChainAccount'[ChainAccountQuad] = \"T\",",
              "        'FactSCADivision'[SCAGlobalQuad] = \"T\"    )"
            ],
            "formatString": "#,0"
          },
          {
            "name": "SCA TB Chain Account Count",
            "expression": [
              " ",
              "CALCULATE(",
              "        [SCA Customer Chain Account Count],",
              "         'FactSCACustomer'[SCAGlobalQuad] = \"T\" ,",
              "        'FactSCACustomer'[ChainAccountQuad] = \"B\")"
            ],
            "formatString": "#,0"
          },
          {
            "name": "SCA BT Chain Account Count",
            "expression": [
              " ",
              "CALCULATE(",
              "        [SCA Customer Chain Account Count],",
              "       'FactSCACustomer'[SCAGlobalQuad] = \"B\" ,",
              "        'FactSCACustomer'[ChainAccountQuad] = \"T\")"
            ],
            "formatString": "#,0"
          },
          {
            "name": "SCA BB Chain Account Count",
            "expression": [
              " ",
              " CALCULATE(",
              "        [SCA Customer Chain Account Count],",
              "        'FactSCAChainAccount'[ChainAccountQuad] = \"B\",",
              "        'FactSCADivision'[SCAGlobalQuad] = \"B\"    )"
            ],
            "formatString": "0"
          },
          {
            "name": "SCA TT SCA Count %",
            "expression": [
              " ",
              "DIVIDE([SCA TT SCA Count], [SCA Customer SCA Count])"
            ],
            "formatString": "0%;-0%;0%"
          },
          {
            "name": "SCA TB SCA Count %",
            "expression": [
              " ",
              "DIVIDE([SCA TB SCA Count], [SCA Customer SCA Count])"
            ],
            "formatString": "0%;-0%;0%"
          },
          {
            "name": "SCA BT SCA Count %",
            "expression": [
              " ",
              "DIVIDE([SCA BT SCA Count], [SCA Customer SCA Count])"
            ],
            "formatString": "0%;-0%;0%"
          },
          {
            "name": "SCA BB SCA Count %",
            "expression": [
              " ",
              "DIVIDE([SCA BB SCA Count], [SCA Customer SCA Count])"
            ],
            "formatString": "0%;-0%;0%"
          },
          {
            "name": "SCA TT SCA Chain Account Count %",
            "expression": [
              " ",
              "DIVIDE([SCA TT Chain Account Count], [SCA Customer Chain Account Count])"
            ],
            "formatString": "0%;-0%;0%"
          },
          {
            "name": "SCA TB SCA Chain Account Count %",
            "expression": [
              " ",
              "DIVIDE([SCA TB Chain Account Count], [SCA Customer Chain Account Count])"
            ],
            "formatString": "0%;-0%;0%"
          },
          {
            "name": "SCA BT SCA Chain Account Count %",
            "expression": [
              " ",
              "DIVIDE([SCA BT Chain Account Count], [SCA Customer Chain Account Count])"
            ],
            "formatString": "0%;-0%;0%"
          },
          {
            "name": "SCA BB SCA Chain Account Count %",
            "expression": [
              " ",
              "DIVIDE([SCA BB Chain Account Count], [SCA Customer Chain Account Count])"
            ],
            "formatString": "0%;-0%;0%"
          },
          {
            "name": "SCA T&B B Chain Account Count",
            "expression": [
              " CALCULATE([SCA Customer Chain Account Count],",
              "                      'FactSCACustomer'[ChainAccountSCAGlobalDistribution] = \"T & B\",",
              "                      'FactSCACustomer'[ChainAccountQuad] = \"B\"  )"
            ]
          },
          {
            "name": "SCA T&B B Chain Account Count %",
            "expression": " DIVIDE('FactSCACustomer'[SCA T&B B Chain Account Count], 'FactSCACustomer'[SCA Customer Chain Account Count])"
          },
          {
            "name": "SCA T&B B SCA Count",
            "expression": [
              " CALCULATE( [SCA Customer SCA Count],",
              "\t'FactSCACustomer'[ChainAccountSCAGlobalDistribution] = \"T & B\", ",
              "\t'FactSCACustomer'[SCAGlobalQuad] = \"B\")"
            ]
          },
          {
            "name": "SCA T&B B SCA Count %",
            "expression": "DIVIDE('FactSCACustomer'[SCA T&B B SCA Count], 'FactSCACustomer'[SCA Customer SCA Count])"
          },
          {
            "name": "SCA T&B T Chain Account Count",
            "expression": [
              " ",
              "CALCULATE([SCA Customer Chain Account Count],",
              "\t'FactSCACustomer'[ChainAccountSCAGlobalDistribution] = \"T & B\",",
              "\t'FactSCACustomer'[ChainAccountQuad] = \"T\" )"
            ]
          },
          {
            "name": "SCA T&B T Chain Account Count %",
            "expression": " DIVIDE('FactSCACustomer'[SCA T&B T Chain Account Count], 'FactSCACustomer'[SCA Customer Chain Account Count])"
          },
          {
            "name": "SCA T&B T SCA Count",
            "expression": [
              " ",
              "CALCULATE( [SCA Customer SCA Count],",
              "\t'FactSCACustomer'[ChainAccountSCAGlobalDistribution] = \"T & B\",",
              "\t'FactSCACustomer'[SCAGlobalQuad] = \"T\")"
            ]
          },
          {
            "name": "SCA T&B T SCA Count %",
            "expression": " DIVIDE('FactSCACustomer'[SCA T&B T SCA Count], 'FactSCACustomer'[SCA Customer SCA Count])"
          },
          {
            "name": "SCA T&B T Net Sales $",
            "expression": [
              "",
              "CALCULATE([SCA Customer Net Sales Dollars],",
              "    'FactSCACustomer'[ChainAccountSCAGlobalDistribution] = \"T & B\",",
              "    'FactSCACustomer'[SCAGlobalQuad] = \"T\")"
            ]
          },
          {
            "name": "SCA T&B B Net Sales $",
            "expression": [
              "",
              "CALCULATE([SCA Customer Net Sales Dollars],",
              "    'FactSCACustomer'[ChainAccountSCAGlobalDistribution] = \"T & B\",",
              "    'FactSCACustomer'[SCAGlobalQuad] = \"B\")"
            ]
          },
          {
            "name": "SCA T&B T Net GM $",
            "expression": [
              "",
              "CALCULATE([SCA Customer Net Gross Margin Dollars],",
              "    'FactSCACustomer'[ChainAccountSCAGlobalDistribution] = \"T & B\",",
              "    'FactSCACustomer'[SCAGlobalQuad] = \"T\")"
            ]
          },
          {
            "name": "SCA T&B B Net GM $",
            "expression": [
              "",
              "CALCULATE([SCA Customer Net Gross Margin Dollars],",
              "    'FactSCACustomer'[ChainAccountSCAGlobalDistribution] = \"T & B\",",
              "    'FactSCACustomer'[SCAGlobalQuad] = \"B\") "
            ]
          }
        ]
      },
      {
        "name": "FactSCAGlobal",
        "columns": [
          {
            "name": "SCAGlobal",
            "dataType": "string",
            "sourceColumn": "SCAGlobal"
          },
          {
            "name": "minItemId",
            "dataType": "double",
            "sourceColumn": "minItemId",
            "isAvailableInMdx": false
          },
          {
            "name": "minBusinessSegmentHierarchyid",
            "dataType": "int64",
            "sourceColumn": "minBusinessSegmentHierarchyid",
            "isAvailableInMdx": false
          },
          {
            "name": "minSbuDesc",
            "dataType": "string",
            "sourceColumn": "minSbuDesc"
          },
          {
            "name": "minCategoryDesc",
            "dataType": "string",
            "sourceColumn": "minCategoryDesc"
          },
          {
            "name": "minMarketingResp3",
            "dataType": "string",
            "sourceColumn": "minMarketingResp3"
          },
          {
            "name": "minProductGroupDesc",
            "dataType": "string",
            "sourceColumn": "minProductGroupDesc"
          },
          {
            "name": "minGenderAgeDesc",
            "dataType": "string",
            "sourceColumn": "minGenderAgeDesc"
          },
          {
            "name": "minColorName",
            "dataType": "string",
            "sourceColumn": "minColorName"
          },
          {
            "type": "calculated",
            "name": "CustomerCount",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "COUNTROWS(",
              "    SUMMARIZE(",
              "            RELATEDTABLE('FactSCACustomer'),",
              "            'FactSCACustomer'[ChainAccountDescBusID]",
              "    )",
              ")"
            ]
          },
          {
            "type": "calculated",
            "name": "SCA First Inventory Date",
            "dataType": "dateTime",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "MINX(",
              "    RELATEDTABLE('DimItem'),",
              "    'DimItem'[SCAGlobalFirstInventoryDate]",
              ")"
            ],
            "formatString": "Short Date",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"DateTimeShortDatePattern\" />"
              }
            ]
          },
          {
            "type": "calculated",
            "name": "SCA First Ship Date",
            "dataType": "dateTime",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "MINX(",
              "    RELATEDTABLE('DimItem'),",
              "    'DimItem'[SCAGlobalFirstShipDate]",
              ")"
            ],
            "formatString": "Short Date",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"DateTimeShortDatePattern\" />"
              }
            ]
          },
          {
            "type": "calculated",
            "name": "SCA Last Inventory Date",
            "dataType": "dateTime",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "MINX(",
              "    RELATEDTABLE('DimItem'),",
              "    'DimItem'[SCAGlobalLastInventoryDate]",
              ")"
            ],
            "formatString": "Short Date",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"DateTimeShortDatePattern\" />"
              }
            ]
          },
          {
            "type": "calculated",
            "name": "SCA Last Ship Date",
            "dataType": "dateTime",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "MINX(",
              "    RELATEDTABLE('DimItem'),",
              "    'DimItem'[SCAGlobalLastShipDate]",
              ")"
            ],
            "formatString": "Short Date",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"DateTimeShortDatePattern\" />"
              }
            ]
          },
          {
            "type": "calculated",
            "name": "Top 5 Customers",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "VAR topcustomers = 5",
              "VAR summarizedTopCustomers = ",
              "    SUMMARIZE(",
              "        FILTER(",
              "            RELATEDTABLE('FactSCACustomer'),",
              "            'FactSCACustomer'[CustomerRank] <= topcustomers",
              "        ),",
              "        'FactSCACustomer'[ChainAccountDesc],",
              "        'FactSCACustomer'[CustomerRank]        ",
              "    )",
              "RETURN",
              "CONCATENATEX(",
              "    summarizedTopCustomers,        ",
              "    'FactSCACustomer'[ChainAccountDesc],",
              "    \", \",",
              "    'FactSCACustomer'[CustomerRank],",
              "    ASC",
              ")"
            ]
          },
          {
            "name": "minClassCodeLV3",
            "dataType": "string",
            "sourceColumn": "minClassCodeLV3"
          },
          {
            "name": "minStyleGroup",
            "dataType": "string",
            "sourceColumn": "minStyleGroup"
          },
          {
            "type": "calculated",
            "name": "minClassCodeLV3Desc",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE(DimClassification[ClassCodeLV3Desc],DimClassification[Priority],FactSCAGlobal[minLCAPrioritySequence])"
          },
          {
            "type": "calculated",
            "name": "Style_Num",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "MINX(",
              "    RELATEDTABLE('DimItem'),",
              "    'DimItem'[StyleNum]",
              ")"
            ]
          },
          {
            "type": "calculated",
            "name": "Color",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "MINX(",
              "    RELATEDTABLE('DimItem'),",
              "    'DimItem'[Color]",
              ")"
            ]
          },
          {
            "type": "calculated",
            "name": "Color Name",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "MINX(",
              "    RELATEDTABLE('DimItem'),",
              "    'DimItem'[ColorName]",
              ")"
            ]
          },
          {
            "type": "calculated",
            "name": "Attribution Code",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "MINX(",
              "    RELATEDTABLE('DimItem'),",
              "    'DimItem'[Attribute]",
              ")"
            ]
          },
          {
            "type": "calculated",
            "name": "Division/SBU",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "MINX(",
              "    RELATEDTABLE('DimItem'),",
              "    'DimItem'[DivisionGroup]",
              ")"
            ]
          },
          {
            "type": "calculated",
            "name": "Garm Per Pckg Qty",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "MINX(",
              "    RELATEDTABLE('DimItem'),",
              "    'DimItem'[GarmPerPackQty]",
              ")"
            ]
          },
          {
            "type": "calculated",
            "name": "Silhouette",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "MINX(",
              "    RELATEDTABLE('DimItem'),",
              "    'DimItem'[Silhouette]",
              ")"
            ]
          },
          {
            "type": "calculated",
            "name": "Disco Date",
            "dataType": "dateTime",
            "isDataTypeInferred": true,
            "expression": [
              "MINX(",
              "    RELATEDTABLE('DimItem'),",
              "    'DimItem'[DiscoDate]",
              ")"
            ]
          },
          {
            "type": "calculated",
            "name": "BrandName",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "MINX(",
              "    RELATEDTABLE('DimItem'),",
              "    'DimItem'[BrandName]",
              ")"
            ]
          },
          {
            "type": "calculated",
            "name": "Inventory Strategy",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "MINX(",
              "    RELATEDTABLE('DimItem'),",
              "    'DimItem'[InventoryStrategy]",
              ")"
            ]
          },
          {
            "type": "calculated",
            "name": "Selling Type",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "var SummaryTable = CALCULATETABLE(DISTINCT(SELECTCOLUMNS(DimItem,\"SCAGlobal\",DimItem[SCAGlobal],\"SellingType\",DimItem[SellingType])))",
              "return CALCULATE(CONCATENATEX(SummaryTable,[SellingType],\",\"))",
              "",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "SKUType",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "var SummaryTable = CALCULATETABLE(DISTINCT(SELECTCOLUMNS(DimItem,\"SCAGlobal\",DimItem[SCAGlobal],\"SKUType\",DimItem[SKUType])))",
              "return CALCULATE(CONCATENATEX(SummaryTable,[SKUType],\",\"))",
              "",
              "",
              "/*LOOKUPVALUE(SCAGlobalSKUTypeSummarized[SKUType],SCAGlobalSKUTypeSummarized[SCAGlobal],FactSCAGlobal[SCAGlobal])",
              "",
              "CONCATENATEX(",
              "    RELATEDTABLE('DimItem'),",
              "    'DimItem'[SKUType],\",\"",
              ")*/"
            ]
          },
          {
            "type": "calculated",
            "name": "Top 5 Customer",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "var sca = FactSCAGlobal[SCAGlobal]",
              "var a = CALCULATETABLE(DISTINCT(FactSCACustomer[ChainAccountDesc]),FILTER(FactSCACustomer,FactSCACustomer[SCAGlobal]=sca && FactSCACustomer[CustomerRank]<6))",
              "return   CONCATENATEX(a,[ChainAccountDesc],\", \")",
              "",
              ""
            ]
          },
          {
            "name": "minLCAPrioritySequence",
            "dataType": "int64",
            "sourceColumn": "minLCAPrioritySequence"
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = SynapseDW,",
                "    Inventory_vwFactSCAGlobal = Source{[Schema=\"Inventory\",Item=\"vwFactSCAGlobal\"]}[Data]",
                "in",
                "    Inventory_vwFactSCAGlobal"
              ]
            }
          }
        ]
      },
      {
        "name": "DimItem",
        "columns": [
          {
            "name": "ItemKey",
            "dataType": "string",
            "sourceColumn": "ItemKey",
            "isAvailableInMdx": false
          },
          {
            "name": "StyleKey",
            "dataType": "string",
            "sourceColumn": "StyleKey",
            "isAvailableInMdx": false
          },
          {
            "name": "ItemId",
            "dataType": "double",
            "sourceColumn": "ItemId",
            "isAvailableInMdx": false
          },
          {
            "name": "StyleNum",
            "dataType": "string",
            "sourceColumn": "StyleNum"
          },
          {
            "name": "Attribute",
            "dataType": "string",
            "sourceColumn": "Attribute"
          },
          {
            "name": "Color",
            "dataType": "string",
            "sourceColumn": "Color"
          },
          {
            "name": "ColorName",
            "dataType": "string",
            "sourceColumn": "ColorName"
          },
          {
            "name": "Size",
            "dataType": "string",
            "sourceColumn": "Size"
          },
          {
            "name": "PutUp",
            "dataType": "string",
            "sourceColumn": "PutUp"
          },
          {
            "name": "Material",
            "dataType": "string",
            "sourceColumn": "Material"
          },
          {
            "name": "Grid",
            "dataType": "string",
            "sourceColumn": "Grid"
          },
          {
            "name": "UPCCode",
            "dataType": "string",
            "sourceColumn": "UPCCode"
          },
          {
            "name": "GarmPerPackQty",
            "dataType": "double",
            "sourceColumn": "GarmPerPackQty",
            "isAvailableInMdx": false
          },
          {
            "name": "InnerPackQuantity",
            "dataType": "double",
            "sourceColumn": "InnerPackQuantity",
            "isAvailableInMdx": false
          },
          {
            "name": "DivisionGroup",
            "dataType": "string",
            "sourceColumn": "DivisionGroup"
          },
          {
            "name": "CupSize",
            "dataType": "string",
            "sourceColumn": "CupSize"
          },
          {
            "name": "DivisionCode",
            "dataType": "string",
            "sourceColumn": "DivisionCode"
          },
          {
            "name": "SapDivision",
            "dataType": "string",
            "sourceColumn": "SapDivision"
          },
          {
            "name": "StdCost",
            "dataType": "double",
            "sourceColumn": "StdCost",
            "formatString": "\\$#,0.00;(\\$#,0.00);\\$#,0.00",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\" Accuracy=\"2\" ThousandSeparator=\"True\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "WholeSale",
            "dataType": "double",
            "sourceColumn": "WholeSale",
            "formatString": "\\$#,0.00;-\\$#,0.00;\\$#,0.00",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\" Accuracy=\"2\" ThousandSeparator=\"True\"><Currency LCID=\"4096\" DisplayName=\"$ English (American Samoa)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"1\" /></Format>"
              }
            ]
          },
          {
            "name": "CompanyCode",
            "dataType": "string",
            "sourceColumn": "CompanyCode"
          },
          {
            "name": "SCAGlobal",
            "dataType": "string",
            "sourceColumn": "SCAGlobal"
          },
          {
            "name": "SKUGlobal",
            "dataType": "string",
            "sourceColumn": "SKUGlobal"
          },
          {
            "name": "SKUCount",
            "dataType": "string",
            "sourceColumn": "SKUCount"
          },
          {
            "name": "InventoryStrategy",
            "dataType": "string",
            "sourceColumn": "InventoryStrategy"
          },
          {
            "name": "SKUGlobalFirstShipDate",
            "dataType": "dateTime",
            "sourceColumn": "SKUGlobalFirstShipDate",
            "formatString": "Short Date",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"DateTimeShortDatePattern\" />"
              }
            ]
          },
          {
            "name": "SKUGlobalLastShipDate",
            "dataType": "dateTime",
            "sourceColumn": "SKUGlobalLastShipDate",
            "formatString": "Short Date",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"DateTimeShortDatePattern\" />"
              }
            ]
          },
          {
            "name": "SKUGlobalFirstInventoryDate",
            "dataType": "dateTime",
            "sourceColumn": "SKUGlobalFirstInventoryDate"
          },
          {
            "name": "SKUGlobalLastInventoryDate",
            "dataType": "dateTime",
            "sourceColumn": "SKUGlobalLastInventoryDate"
          },
          {
            "name": "SCAGlobalFirstShipDate",
            "dataType": "dateTime",
            "sourceColumn": "SCAGlobalFirstShipDate",
            "formatString": "Short Date",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"DateTimeShortDatePattern\" />"
              }
            ]
          },
          {
            "name": "SCAGlobalLastShipDate",
            "dataType": "dateTime",
            "sourceColumn": "SCAGlobalLastShipDate",
            "formatString": "Short Date",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"DateTimeShortDatePattern\" />"
              }
            ]
          },
          {
            "name": "SCAGlobalFirstInventoryDate",
            "dataType": "dateTime",
            "sourceColumn": "SCAGlobalFirstInventoryDate"
          },
          {
            "name": "SCAGlobalLastInventoryDate",
            "dataType": "dateTime",
            "sourceColumn": "SCAGlobalLastInventoryDate"
          },
          {
            "name": "SKUSalesDuration",
            "dataType": "int64",
            "sourceColumn": "SKUSalesDuration"
          },
          {
            "name": "SKUInventoryDuration",
            "dataType": "int64",
            "sourceColumn": "SKUInventoryDuration"
          },
          {
            "name": "WinningPortfolioFlag",
            "dataType": "string",
            "sourceColumn": "WinningPortfolioFlag"
          },
          {
            "name": "SellingType",
            "dataType": "string",
            "sourceColumn": "SellingType"
          },
          {
            "name": "ChampionBrandFlag",
            "dataType": "string",
            "sourceColumn": "ChampionBrandFlag"
          },
          {
            "name": "NoRegretsFlag",
            "dataType": "string",
            "sourceColumn": "NoRegretsFlag"
          },
          {
            "name": "SizeDesc",
            "dataType": "string",
            "sourceColumn": "SizeDesc"
          },
          {
            "name": "SKUCreateDate",
            "dataType": "dateTime",
            "sourceColumn": "SKUCreateDate",
            "formatString": "General Date"
          },
          {
            "name": "InvDispositionRoute",
            "dataType": "string",
            "sourceColumn": "InvDispositionRoute"
          },
          {
            "name": "CategoryDesc",
            "dataType": "string",
            "sourceColumn": "CategoryDesc"
          },
          {
            "name": "ProductGroupDesc",
            "dataType": "string",
            "sourceColumn": "ProductGroupDesc"
          },
          {
            "name": "BrandName",
            "dataType": "string",
            "sourceColumn": "BrandName"
          },
          {
            "name": "CapacityGroup",
            "dataType": "string",
            "sourceColumn": "CapacityGroup"
          },
          {
            "name": "GenderCategoryDesc",
            "dataType": "string",
            "sourceColumn": "GenderCategoryDesc"
          },
          {
            "name": "GenderDesc",
            "dataType": "string",
            "sourceColumn": "GenderDesc"
          },
          {
            "name": "MasterGrmtStyle",
            "dataType": "string",
            "sourceColumn": "MasterGrmtStyle"
          },
          {
            "name": "ProductLineDesc",
            "dataType": "string",
            "sourceColumn": "ProductLineDesc"
          },
          {
            "name": "RepresentativeStyleNum",
            "dataType": "string",
            "sourceColumn": "RepresentativeStyleNum"
          },
          {
            "name": "Silhouette",
            "dataType": "string",
            "sourceColumn": "Silhouette"
          },
          {
            "name": "SubBrandDesc",
            "dataType": "string",
            "sourceColumn": "SubBrandDesc"
          },
          {
            "name": "SubCategoryDesc",
            "dataType": "string",
            "sourceColumn": "SubCategoryDesc"
          },
          {
            "name": "StyleGroup",
            "dataType": "string",
            "sourceColumn": "StyleGroup"
          },
          {
            "name": "MarketingResp3",
            "dataType": "string",
            "sourceColumn": "MarketingResp3"
          },
          {
            "name": "ComponentMaterial",
            "dataType": "string",
            "sourceColumn": "ComponentMaterial"
          },
          {
            "name": "ComponentGrid",
            "dataType": "string",
            "sourceColumn": "ComponentGrid"
          },
          {
            "name": "LegacyColorCode",
            "dataType": "string",
            "sourceColumn": "LegacyColorCode"
          },
          {
            "name": "LogoCode",
            "dataType": "string",
            "sourceColumn": "LogoCode"
          },
          {
            "name": "LogoDescription",
            "dataType": "string",
            "sourceColumn": "LogoDescription"
          },
          {
            "name": "LegacyStyle",
            "dataType": "string",
            "sourceColumn": "LegacyStyle"
          },
          {
            "name": "InstitutionCode",
            "dataType": "string",
            "sourceColumn": "InstitutionCode"
          },
          {
            "name": "Institution",
            "dataType": "string",
            "sourceColumn": "Institution"
          },
          {
            "name": "ShipperMaterial",
            "dataType": "string",
            "sourceColumn": "ShipperMaterial"
          },
          {
            "name": "ShipperGrid",
            "dataType": "string",
            "sourceColumn": "ShipperGrid"
          },
          {
            "name": "SellingTypeUpdatedTimestamp",
            "dataType": "string",
            "sourceColumn": "SellingTypeUpdatedTimestamp"
          },
          {
            "name": "SellingTypeUpdatedBy",
            "dataType": "string",
            "sourceColumn": "SellingTypeUpdatedBy"
          },
          {
            "name": "FinancialSKUFlag",
            "dataType": "string",
            "sourceColumn": "FinancialSKUFlag"
          },
          {
            "name": "BlankSKUFlag",
            "dataType": "string",
            "sourceColumn": "BlankSKUFlag"
          },
          {
            "name": "CurrentClassCode3",
            "dataType": "string",
            "sourceColumn": "CurrentClassCode3"
          },
          {
            "type": "calculated",
            "name": "PhaseOutDate",
            "dataType": "dateTime",
            "isDataTypeInferred": true,
            "expression": [
              "var PhaseOutDateKey = LOOKUPVALUE(DimComparisonsItems[PhaseOutDateKey],DimComparisonsItems[SkuKey],DimItem[SKUGlobal])",
              "return LOOKUPVALUE('Calendar'[CalendarDate],'Calendar'[CalendarDateKey],PhaseOutDateKey)",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "PhaseOutDatePeriodStart",
            "dataType": "dateTime",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "var PhaseOutDateKey = LOOKUPVALUE(DimComparisonsItems[PhaseOutDateKey],DimComparisonsItems[SkuKey],DimItem[SKUGlobal])",
              "var PhaseOutDate = LOOKUPVALUE('Calendar'[CalendarDate],'Calendar'[CalendarDateKey],PhaseOutDateKey)",
              "return LOOKUPVALUE('Calendar'[BusinessPeriodStartDate],'Calendar'[CalendarDate],PhaseOutDate)"
            ]
          },
          {
            "type": "calculated",
            "name": "ObsoleteRate",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              " CALCULATE(MAX(FactFinishedGoodsReserves[ObsoleteRate]),FILTER(FactFinishedGoodsReserves,",
              "FactFinishedGoodsReserves[AsOfDateKey]=MAXX(ALL(FactFinishedGoodsReserves),FactFinishedGoodsReserves[AsOfDateKey])))",
              "/*LOOKUPVALUE(FactFinishedGoodsReserves[ObsoleteRate],FactFinishedGoodsReserves[ItemKey],DimItem[ItemKey])*/"
            ],
            "isAvailableInMdx": false
          },
          {
            "type": "calculated",
            "name": "BlankSKUNoSalesFlag",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              " var MonthsSinceLastSale = DATEDIFF(DimItem[SKUGlobalLastShipDate],TODAY(),MONTH)",
              "var NoSaleSinceLast12Month = IF(MonthsSinceLastSale >=12,\"Y\",\"N\")",
              "var BlankSKUNoSalesFlag = IF(AND(DimItem[BlankSKUFlag]==\"Y\",NoSaleSinceLast12Month==\"Y\"),\"Y\",\"N\")",
              "return BlankSKUNoSalesFlag"
            ]
          },
          {
            "type": "calculated",
            "name": "DiscoDateMonthStart",
            "dataType": "dateTime",
            "isDataTypeInferred": true,
            "expression": [
              " var DiscoDate = LOOKUPVALUE(DimItemLifeCycleUpdates[ObsoleteDate],DimItemLifeCycleUpdates[ItemKey],DimItem[ItemKey])",
              "//return LOOKUPVALUE('Calendar'[BusinessPeriodStartDate],'Calendar'[CalendarDate],DiscoDate)",
              "return DATE(YEAR(DiscoDate),MONTH(DiscoDate),1)"
            ]
          },
          {
            "type": "calculated",
            "name": "MonthsSinceDisco",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "var MonthsSinceDisco = DATEDIFF('DimItem'[DiscoDate],  TODAY()  ,MONTH)",
              "return MonthsSinceDisco"
            ]
          },
          {
            "type": "calculated",
            "name": "MonthsSinceFirstShipment",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "DATEDIFF(DimItem[SKUGlobalFirstShipDate],TODAY(),MONTH)"
          },
          {
            "type": "calculated",
            "name": "MonthsSincePhaseOut",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": " DATEDIFF(DimItem[PhaseOutDate] ,TODAY(),MONTH)"
          },
          {
            "type": "calculated",
            "name": "NonDiscoFlag",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "var DiscoDate = LOOKUPVALUE(DimItemLifeCycleUpdates[ObsoleteDate],DimItemLifeCycleUpdates[ItemKey],DimItem[ItemKey])",
              "return IF(OR(ISBLANK(DimItem[DiscoDateMonthStart]), DATEDIFF(TODAY(),DiscoDate,DAY)>0) ,\"Y\",\"N\")"
            ]
          },
          {
            "type": "calculated",
            "name": "SKUType",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "IF(DimItem[BulkSKUFlag]==\"Y\",\"Bulk\",",
              "\tif (DimItem[FinancialSKUFlag]==\"Y\",\"Financial\",",
              "\t     if(DimItem[BlankSKUNoSalesFlag]==\"Y\",\"Blank\",\"Regular\")",
              "\t  ))"
            ]
          },
          {
            "type": "calculated",
            "name": "SKUState",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "IF(  AND(DimItem[NonDiscoFlag]==\"Y\",",
              "\t  OR(ISBLANK(DimItem[SKUGlobalFirstShipDate]),DimItem[MonthsSinceFirstShipment]<=6)),\"NEW\",",
              "       IF( AND(DimItem[NonDiscoFlag]==\"Y\",",
              "                AND(DimItem[MonthsSinceFirstShipment]>6,DimItem[MonthsSinceFirstShipment]<=18)),\"CARRYOVER\",",
              "             IF( AND(DimItem[MonthsSinceDisco]>0,DimItem[MonthsSinceDisco]<=18),\"PHASEOUT\",\"OBSOLETE\")))"
            ]
          },
          {
            "type": "calculated",
            "name": "NewReserveRate",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "SWITCH(TRUE(),",
              "   AND(DimItem[SKUState]==\"PHASEOUT\",AND(DimItem[MonthsSincePhaseOut]>=7,DimItem[MonthsSincePhaseOut]<12)),.5*DimItem[ObsoleteRate],",
              "   AND(DimItem[SKUState]==\"PHASEOUT\",DimItem[MonthsSincePhaseOut]>12),DimItem[ObsoleteRate],",
              "   AND(DimItem[SKUState]==\"OBSOLETE\",AND(DimItem[MonthsSinceDisco]>=0,DimItem[MonthsSinceDisco]<6)),DimItem[ObsoleteRate],",
              "   AND(DimItem[SKUState]==\"OBSOLETE\",DimItem[MonthsSinceDisco]>6),1,0)"
            ],
            "isAvailableInMdx": false
          },
          {
            "type": "calculated",
            "name": "NewReserveUnits",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              " CALCULATE(MAX(FactFinishedGoodsReserves[Units]),FILTER(FactFinishedGoodsReserves,",
              "FactFinishedGoodsReserves[AsOfDateKey]=MAXX(ALL(FactFinishedGoodsReserves),FactFinishedGoodsReserves[AsOfDateKey])))",
              "*DimItem[NewReserveRate]"
            ],
            "isAvailableInMdx": false
          },
          {
            "type": "calculated",
            "name": "NewReserveDollars",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              " CALCULATE(MAX(FactFinishedGoodsReserves[ReserveDollars]),FILTER(FactFinishedGoodsReserves,",
              "FactFinishedGoodsReserves[AsOfDateKey]=MAXX(ALL(FactFinishedGoodsReserves),FactFinishedGoodsReserves[AsOfDateKey])))",
              "*DimItem[NewReserveRate]"
            ],
            "isAvailableInMdx": false
          },
          {
            "type": "calculated",
            "name": "NewReservePackages",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              " CALCULATE(MAX(FactFinishedGoodsReserves[Packages]),FILTER(FactFinishedGoodsReserves,",
              "FactFinishedGoodsReserves[AsOfDateKey]=MAXX(ALL(FactFinishedGoodsReserves),FactFinishedGoodsReserves[AsOfDateKey])))",
              "*DimItem[NewReserveRate]"
            ],
            "isAvailableInMdx": false
          },
          {
            "type": "calculated",
            "name": "LCA Disposition Route",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE(DimItemLifeCycleUpdates[DispositionRoute],DimItemLifeCycleUpdates[ItemKey],DimItem[ItemKey])"
          },
          {
            "type": "calculated",
            "name": "LCA Notes",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE(DimItemLifeCycleUpdates[Notes],DimItemLifeCycleUpdates[ItemKey],DimItem[ItemKey])"
          },
          {
            "type": "calculated",
            "name": "LCA Reason Code",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE(DimItemLifeCycleUpdates[ReasonCode],DimItemLifeCycleUpdates[ItemKey],DimItem[ItemKey])"
          },
          {
            "type": "calculated",
            "name": "SKU Create Date Yr",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE('Calendar'[BusinessYear], 'Calendar'[CalendarDate], DimItem[SKUCreateDate])"
          },
          {
            "type": "calculated",
            "name": "SKU Create Date Decade",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "VAR Firstthree = LEFT(DimItem[SKU Create Date Yr], 3) ",
              "VAR Decade = Firstthree & \"0 - \"& Firstthree &\"9\" ",
              "RETURN",
              "IF(",
              "len(Firstthree) > 0, Decade",
              ")"
            ]
          },
          {
            "type": "calculated",
            "name": "SKU Create Month",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE('Calendar'[BusinessPeriod], 'Calendar'[CalendarDate], DimItem[SKUCreateDate])"
          },
          {
            "name": "BulkSKUFlag",
            "dataType": "string",
            "sourceColumn": "BulkSKUFlag"
          },
          {
            "name": "SellingStyle",
            "dataType": "string",
            "sourceColumn": "SellingStyle"
          },
          {
            "name": "SCGlobal",
            "dataType": "string",
            "sourceColumn": "SCGlobal"
          },
          {
            "name": "DiscoDateYear",
            "dataType": "int64",
            "sourceColumn": "DiscoDateYear"
          },
          {
            "name": "DiscoDateQuarter",
            "dataType": "int64",
            "sourceColumn": "DiscoDateQuarter"
          },
          {
            "name": "DiscoDatePeriod",
            "dataType": "string",
            "sourceColumn": "DiscoDatePeriod"
          },
          {
            "name": "DiscoDate",
            "dataType": "dateTime",
            "sourceColumn": "DiscoDate"
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = SynapseDW,",
                "    Inventory_vwDimItem = Source{[Schema=\"Inventory\",Item=\"vwDimItem\"]}[Data]",
                "in",
                "    Inventory_vwDimItem"
              ]
            }
          }
        ],
        "hierarchies": [
          {
            "name": "SKU Create Date",
            "levels": [
              {
                "name": "SKU Create Date Decade",
                "ordinal": 0,
                "column": "SKU Create Date Decade"
              },
              {
                "name": "SKU Create Date Yr",
                "ordinal": 1,
                "column": "SKU Create Date Yr"
              },
              {
                "name": "SKU Create Month",
                "ordinal": 2,
                "column": "SKU Create Month"
              },
              {
                "name": "SKUCreateDate",
                "ordinal": 3,
                "column": "SKUCreateDate"
              }
            ]
          },
          {
            "name": "Discontinuation Date",
            "levels": [
              {
                "name": "DiscoDateYear",
                "ordinal": 0,
                "column": "DiscoDateYear"
              },
              {
                "name": "DiscoDateQuarter",
                "ordinal": 1,
                "column": "DiscoDateQuarter"
              },
              {
                "name": "DiscoDatePeriod",
                "ordinal": 2,
                "column": "DiscoDatePeriod"
              },
              {
                "name": "DiscoDate",
                "ordinal": 3,
                "column": "DiscoDate"
              }
            ]
          }
        ]
      },
      {
        "name": "DimWinningPortfolioSkuList",
        "columns": [
          {
            "name": "PhaseOutQuarter",
            "dataType": "string",
            "sourceColumn": "PhaseOutQuarter"
          },
          {
            "name": "PhaseOutYear",
            "dataType": "int64",
            "sourceColumn": "PhaseOutYear"
          },
          {
            "name": "SKUGlobal",
            "dataType": "string",
            "sourceColumn": "SKUGlobal"
          },
          {
            "name": "Division",
            "dataType": "string",
            "sourceColumn": "Division"
          },
          {
            "name": "PhaseOutYrQtr",
            "dataType": "string",
            "sourceColumn": "PhaseOutYrQtr"
          },
          {
            "name": "IsActive",
            "dataType": "string",
            "sourceColumn": "IsActive"
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = SynapseDW,",
                "    Inventory_vwDimWinningPortfolioSKUList = Source{[Schema=\"Inventory\",Item=\"vwDimWinningPortfolioSKUList\"]}[Data]",
                "in",
                "    Inventory_vwDimWinningPortfolioSKUList"
              ]
            }
          }
        ]
      },
      {
        "name": "FactFinishedGoodsReserves",
        "columns": [
          {
            "name": "ItemKey",
            "dataType": "string",
            "sourceColumn": "ItemKey"
          },
          {
            "name": "ItemSCDKey",
            "dataType": "string",
            "sourceColumn": "ItemSCDKey"
          },
          {
            "name": "FacilityKey",
            "dataType": "string",
            "sourceColumn": "FacilityKey"
          },
          {
            "name": "BusinessKey",
            "dataType": "string",
            "sourceColumn": "BusinessKey"
          },
          {
            "name": "CurrencyKey",
            "dataType": "string",
            "sourceColumn": "CurrencyKey"
          },
          {
            "name": "DayDuration",
            "dataType": "int64",
            "sourceColumn": "DayDuration"
          },
          {
            "name": "Units",
            "dataType": "double",
            "sourceColumn": "Units"
          },
          {
            "name": "Packages",
            "dataType": "double",
            "sourceColumn": "Packages"
          },
          {
            "name": "Dollars",
            "dataType": "decimal",
            "sourceColumn": "Dollars",
            "formatString": "\\$#,0.00;(\\$#,0.00);\\$#,0.00",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\" Accuracy=\"2\" ThousandSeparator=\"True\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "ObsoleteRate",
            "dataType": "double",
            "sourceColumn": "ObsoleteRate"
          },
          {
            "name": "ReserveRate",
            "dataType": "double",
            "sourceColumn": "ReserveRate"
          },
          {
            "name": "ReserveDollars",
            "dataType": "double",
            "sourceColumn": "ReserveDollars"
          },
          {
            "name": "ReserveUnits",
            "dataType": "double",
            "sourceColumn": "ReserveUnits"
          },
          {
            "name": "ReservePackages",
            "dataType": "double",
            "sourceColumn": "ReservePackages"
          },
          {
            "name": "AsOfDateKey",
            "dataType": "int64",
            "sourceColumn": "AsOfDateKey"
          },
          {
            "name": "cb",
            "dataType": "int64",
            "sourceColumn": "cb"
          },
          {
            "type": "calculated",
            "name": "USDollars",
            "dataType": "decimal",
            "isDataTypeInferred": false,
            "expression": [
              "var a =  LOOKUPVALUE(DimCurrency[PegRate],DimCurrency[CurrencyKey],FactFinishedGoodsReserves[CurrencyKey])",
              "var b = IF(ISBLANK(a),1,a)",
              "return FactFinishedGoodsReserves[Dollars]*b"
            ],
            "formatString": "\\$#,0.00;(\\$#,0.00);\\$#,0.00",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\" Accuracy=\"2\" ThousandSeparator=\"True\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "type": "calculated",
            "name": "ReserveUSDollars",
            "dataType": "decimal",
            "isDataTypeInferred": false,
            "expression": [
              "var a =  LOOKUPVALUE(DimCurrency[PegRate],DimCurrency[CurrencyKey],FactFinishedGoodsReserves[CurrencyKey])",
              "var b = IF(ISBLANK(a),1,a)",
              "return FactFinishedGoodsReserves[ReserveDollars]*b"
            ],
            "formatString": "\\$#,0.00;(\\$#,0.00);\\$#,0.00",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\" Accuracy=\"2\" ThousandSeparator=\"True\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          }
        ],
        "partitions": [
          {
            "name": "FactFinishedGoodsReservesTemplate",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = #\"SynapseDW\",",
                "    Inventory_mvwFactFinishedGoodsReserves = Source{[Schema=\"Inventory\",Item=\"mvwFactFinishedGoodsReserves\"]}[Data],",
                "    #\"Filtered Rows\" = Table.SelectRows(Inventory_mvwFactFinishedGoodsReserves , each [AsOfDateKey] < 19000101)",
                "in",
                "    #\"Filtered Rows\""
              ]
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>let",
                  "    Source = #\"SynapseDW\",",
                  "    Inventory_mvwFactFinishedGoodsReserves = Source{[Schema=\"Inventory\",Item=\"mvwFactFinishedGoodsReserves\"]}[Data],",
                  "    #\"Filtered Rows\" = Table.SelectRows(Inventory_mvwFactFinishedGoodsReserves , each [AsOfDateKey] < 19000101)",
                  "in",
                  "    #\"Filtered Rows\"</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "measures": [
          {
            "name": "Obsolete Rate Summarized",
            "expression": [
              " SELECTEDVALUE(",
              "   FactFinishedGoodsReserves[ObsoleteRate],",
              "    CONCATENATEX(SUMMARIZE( FactFinishedGoodsReserves, FactFinishedGoodsReserves[ObsoleteRate]), FactFinishedGoodsReserves[ObsoleteRate], \", \",FactFinishedGoodsReserves[ObsoleteRate],ASC)",
              ")"
            ]
          },
          {
            "name": "Reserve Rate Summarized",
            "expression": [
              " SELECTEDVALUE(",
              "    FactFinishedGoodsReserves[ReserveRate],    CONCATENATEX(SUMMARIZE(FactFinishedGoodsReserves,FactFinishedGoodsReserves[ReserveRate]),FactFinishedGoodsReserves[ReserveRate], \", \",FactFinishedGoodsReserves[ReserveRate],ASC)",
              ")"
            ]
          },
          {
            "name": "Reserves Day Duration Summarized",
            "expression": [
              " SELECTEDVALUE(",
              "    FactFinishedGoodsReserves[DayDuration],",
              "    CONCATENATEX(SUMMARIZE(FactFinishedGoodsReserves,FactFinishedGoodsReserves[DayDuration]), FactFinishedGoodsReserves[DayDuration], \", \",FactFinishedGoodsReserves[DayDuration],ASC)",
              ")"
            ]
          },
          {
            "name": "Dollars Pre-Reserves",
            "expression": " SUM(FactFinishedGoodsReserves[USDollars])",
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "Packages Pre-Reserves",
            "expression": " SUM(FactFinishedGoodsReserves[packages])",
            "formatString": "#,0"
          },
          {
            "name": "Units Pre-Reserves",
            "expression": " SUM(FactFinishedGoodsReserves[units])",
            "formatString": "#,0"
          }
        ]
      },
      {
        "name": "DimSKULifeCycle",
        "columns": [
          {
            "name": "ItemKey",
            "dataType": "string",
            "sourceColumn": "ItemKey",
            "isAvailableInMdx": false
          },
          {
            "name": "StartDate",
            "dataType": "dateTime",
            "sourceColumn": "StartDate",
            "formatString": "Short Date",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"DateTimeShortDatePattern\" />"
              }
            ]
          },
          {
            "name": "StartDateKey",
            "dataType": "int64",
            "sourceColumn": "StartDateKey",
            "isAvailableInMdx": false
          },
          {
            "name": "EndDate",
            "dataType": "dateTime",
            "sourceColumn": "EndDate",
            "formatString": "Short Date",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"DateTimeShortDatePattern\" />"
              }
            ]
          },
          {
            "name": "EndDateKey",
            "dataType": "int64",
            "sourceColumn": "EndDateKey",
            "isAvailableInMdx": false
          },
          {
            "name": "LifecycleCode",
            "dataType": "string",
            "sourceColumn": "LifecycleCode"
          },
          {
            "name": "TriggerCode",
            "dataType": "string",
            "sourceColumn": "TriggerCode"
          },
          {
            "name": "LifecycleCurrent",
            "dataType": "string",
            "sourceColumn": "LifecycleCurrent"
          },
          {
            "name": "DispositionRoute",
            "dataType": "string",
            "sourceColumn": "DispositionRoute"
          },
          {
            "name": "SourceUpdateDate",
            "dataType": "dateTime",
            "sourceColumn": "SourceUpdateDate"
          },
          {
            "type": "calculated",
            "name": "StartDate_Yr",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "isHidden": true,
            "expression": "YEAR(DimSKULifeCycle[StartDate])"
          },
          {
            "type": "calculated",
            "name": "StartDate_Qtr",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "isHidden": true,
            "expression": "QUARTER(DimSKULifeCycle[StartDate])"
          },
          {
            "type": "calculated",
            "name": "StartDate_Mnth",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "isHidden": true,
            "expression": "MONTH(DimSKULifeCycle[StartDate])"
          },
          {
            "type": "calculated",
            "name": "DaysSinceStartDate",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "var tdaySeqDate = LOOKUPVALUE('Calendar'[SequenceDate],'Calendar'[CalendarDate],today())",
              "var startdateSeqDate = LOOKUPVALUE('Calendar'[SequenceDate],'Calendar'[CalendarDate],DimSKULifeCycle[StartDate])",
              "return tdaySeqDate-startdateSeqDate"
            ]
          },
          {
            "type": "calculated",
            "name": "MonthsSinceStartDate",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "var tdaySeqPeriod = LOOKUPVALUE('Calendar'[SequenceBusinessPeriod],'Calendar'[CalendarDate],today())",
              "var startdateSeqPeriod = LOOKUPVALUE('Calendar'[SequenceBusinessPeriod],'Calendar'[CalendarDate],DimSKULifeCycle[StartDate])",
              "return tdaySeqPeriod-startdateSeqPeriod"
            ]
          },
          {
            "type": "calculated",
            "name": "WeeksSinceStartDate",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "var tdaySeqWeek = LOOKUPVALUE('Calendar'[SequenceWeek],'Calendar'[CalendarDate],today())",
              "var startdateSeqWeek = LOOKUPVALUE('Calendar'[SequenceWeek],'Calendar'[CalendarDate],DimSKULifeCycle[StartDate])",
              "return tdaySeqWeek-startdateSeqWeek"
            ]
          },
          {
            "type": "calculated",
            "name": "YearsSinceStartDate",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "var tdayYr = LOOKUPVALUE('Calendar'[BusinessYear],'Calendar'[CalendarDate],today())",
              "var startdateYear = LOOKUPVALUE('Calendar'[BusinessYear],'Calendar'[CalendarDate],DimSKULifeCycle[StartDate])",
              "return tdayYr-startdateYear"
            ]
          },
          {
            "type": "calculated",
            "name": "MonthsSinceStartDateGrouped",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "IF(DimSKULifeCycle[MonthsSinceStartDate]<= 12,CONCATENATE(Value(DimSKULifeCycle[MonthsSinceStartDate]),\"  Mth\"),\"> 12 Mths\")",
            "sortByColumn": "MonthsSinceStartDateGroupedSortOrder"
          },
          {
            "type": "calculated",
            "name": "MonthsSinceStartDateGroupedSortOrder",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "var tdaySeqPeriod = LOOKUPVALUE('Calendar'[SequenceBusinessPeriod],'Calendar'[CalendarDate],today())",
              "var startdateSeqPeriod = LOOKUPVALUE('Calendar'[SequenceBusinessPeriod],'Calendar'[CalendarDate],DimSKULifeCycle[StartDate])",
              "var a = tdaySeqPeriod-startdateSeqPeriod",
              "var b = SWITCH(a,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13)",
              "return b"
            ]
          },
          {
            "type": "calculated",
            "name": "ClassCodeLV1Desc",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE(DimClassification[ClassCodeLV1Desc],DimClassification[LCAValue],DimSKULifeCycle[LifecycleCode])"
          },
          {
            "type": "calculated",
            "name": "ClassCodeLV2Desc",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE(DimClassification[ClassCodeLV2Desc],DimClassification[LCAValue],DimSKULifeCycle[LifecycleCode])"
          },
          {
            "type": "calculated",
            "name": "ClassCodeLV3Desc",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE(DimClassification[ClassCodeLV3Desc],DimClassification[LCAValue],DimSKULifeCycle[LifecycleCode])"
          },
          {
            "name": "SKULCAKey",
            "dataType": "string",
            "sourceColumn": "SKULCAKey",
            "isAvailableInMdx": false
          },
          {
            "type": "calculated",
            "name": "AltClassCodeLV3Desc",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE(DimClassification[AltClassCodeLV3Desc],DimClassification[LCAValue],DimSKULifeCycle[LifecycleCode])"
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = SynapseDW,",
                "    Inventory_vwDimSKULifeCycleClass = Source{[Schema=\"Inventory\",Item=\"vwDimSKULifeCycleClass\"]}[Data],",
                "    #\"Changed Type\" = Table.TransformColumnTypes(Inventory_vwDimSKULifeCycleClass,{{\"StartDateKey\", Int64.Type}, {\"EndDateKey\", Int64.Type}})",
                "in",
                "    #\"Changed Type\""
              ]
            }
          }
        ],
        "hierarchies": [
          {
            "name": "StartDate_Hierarchy",
            "levels": [
              {
                "name": "Year",
                "ordinal": 0,
                "column": "StartDate_Yr"
              },
              {
                "name": "Month",
                "ordinal": 2,
                "column": "StartDate_Mnth"
              },
              {
                "name": "Qtr",
                "ordinal": 1,
                "column": "StartDate_Qtr"
              },
              {
                "name": "StartDate",
                "ordinal": 3,
                "column": "StartDate"
              }
            ]
          }
        ]
      },
      {
        "name": "DimItemLifeCycleUpdates",
        "columns": [
          {
            "name": "ItemKey",
            "dataType": "string",
            "sourceColumn": "ItemKey",
            "isAvailableInMdx": false
          },
          {
            "name": "ReasonCode",
            "dataType": "string",
            "sourceColumn": "ReasonCode"
          },
          {
            "name": "DispositionRoute",
            "dataType": "string",
            "sourceColumn": "DispositionRoute"
          },
          {
            "name": "Notes",
            "dataType": "string",
            "sourceColumn": "Notes"
          },
          {
            "name": "ObsoleteDate",
            "dataType": "dateTime",
            "sourceColumn": "ObsoleteDate"
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = SynapseDW,",
                "    Inventory_vwDimItemLifeCycleUpdates = Source{[Schema=\"Inventory\",Item=\"vwDimItemLifeCycleUpdates\"]}[Data]",
                "in",
                "    Inventory_vwDimItemLifeCycleUpdates"
              ]
            }
          }
        ]
      },
      {
        "name": "DimCurrency",
        "isHidden": true,
        "columns": [
          {
            "name": "CurrencyKey",
            "dataType": "string",
            "sourceColumn": "CurrencyKey",
            "isAvailableInMdx": false
          },
          {
            "name": "Year",
            "dataType": "double",
            "sourceColumn": "Year"
          },
          {
            "name": "Currency",
            "dataType": "string",
            "sourceColumn": "Currency"
          },
          {
            "name": "PegRate",
            "dataType": "double",
            "sourceColumn": "PegRate"
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = SynapseDW,",
                "    Common_DimCurrency = Source{[Schema=\"Inventory\",Item=\"vwDimCurrency\"]}[Data]",
                "in",
                "    Common_DimCurrency"
              ]
            }
          }
        ]
      },
      {
        "name": "DimSalesAccount",
        "columns": [
          {
            "name": "AccountKey",
            "dataType": "string",
            "sourceColumn": "AccountKey",
            "isAvailableInMdx": false
          },
          {
            "name": "AccountDescription",
            "dataType": "string",
            "sourceColumn": "AccountDescription"
          },
          {
            "name": "Parent",
            "dataType": "string",
            "sourceColumn": "Parent"
          },
          {
            "name": "GrossSalesInd",
            "dataType": "string",
            "sourceColumn": "GrossSalesInd"
          },
          {
            "name": "AdjToGrossSalesInd",
            "dataType": "string",
            "sourceColumn": "AdjToGrossSalesInd"
          },
          {
            "name": "PreIncentiveSalesInd",
            "dataType": "string",
            "sourceColumn": "PreIncentiveSalesInd"
          },
          {
            "name": "SalesIncentivesInd",
            "dataType": "string",
            "sourceColumn": "SalesIncentivesInd"
          },
          {
            "name": "RoyaltyIncomdeInd",
            "dataType": "string",
            "sourceColumn": "RoyaltyIncomdeInd"
          },
          {
            "name": "IntercompanyNetSalesInd",
            "dataType": "string",
            "sourceColumn": "IntercompanyNetSalesInd"
          },
          {
            "name": "NetSalesInd",
            "dataType": "string",
            "sourceColumn": "NetSalesInd"
          },
          {
            "name": "PreIncentiveCOGSInd",
            "dataType": "string",
            "sourceColumn": "PreIncentiveCOGSInd"
          },
          {
            "name": "SalesIncentiveCostInd",
            "dataType": "string",
            "sourceColumn": "SalesIncentiveCostInd"
          },
          {
            "name": "NetOSCOGSInd",
            "dataType": "string",
            "sourceColumn": "NetOSCOGSInd"
          },
          {
            "name": "SCOGSInd",
            "dataType": "string",
            "sourceColumn": "SCOGSInd"
          },
          {
            "name": "StandardGMInd",
            "dataType": "string",
            "sourceColumn": "StandardGMInd"
          },
          {
            "name": "IntercompanySCOGSInd",
            "dataType": "string",
            "sourceColumn": "IntercompanySCOGSInd"
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = SynapseDW,",
                "    Inventory_vwDimSalesMeasures = Source{[Schema=\"Inventory\",Item=\"vwDimSalesMeasures\"]}[Data]",
                "in",
                "    Inventory_vwDimSalesMeasures"
              ]
            }
          }
        ]
      },
      {
        "name": "FactInventoryProduction",
        "columns": [
          {
            "name": "Units",
            "dataType": "double",
            "sourceColumn": "Units"
          },
          {
            "name": "AsOfDateKey",
            "dataType": "int64",
            "sourceColumn": "AsOfDateKey"
          },
          {
            "name": "FacilityKey",
            "dataType": "string",
            "sourceColumn": "FacilityKey"
          },
          {
            "name": "ItemKey",
            "dataType": "string",
            "sourceColumn": "ItemKey"
          },
          {
            "name": "StyleKey",
            "dataType": "string",
            "sourceColumn": "StyleKey"
          },
          {
            "name": "SKUGlobal",
            "dataType": "string",
            "sourceColumn": "SKUGlobal"
          },
          {
            "name": "SCAGlobal",
            "dataType": "string",
            "sourceColumn": "SCAGlobal"
          },
          {
            "name": "FinancialMeasureKey",
            "dataType": "string",
            "sourceColumn": "FinancialMeasureKey"
          },
          {
            "name": "FinancialPlanTypeKey",
            "dataType": "string",
            "sourceColumn": "FinancialPlanTypeKey"
          },
          {
            "name": "CurrencyKey",
            "dataType": "string",
            "sourceColumn": "CurrencyKey"
          },
          {
            "name": "ShipperFlagKey",
            "dataType": "string",
            "sourceColumn": "ShipperFlagKey"
          },
          {
            "name": "BusinessKey",
            "dataType": "string",
            "sourceColumn": "BusinessKey"
          },
          {
            "name": "cb",
            "dataType": "int64",
            "sourceColumn": "cb"
          }
        ],
        "partitions": [
          {
            "name": "FactInventoryProductionTemplate",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "   Source = #\"SynapseDW\",",
                "   Inventory_mvwFactInventoryProduction = Source{[Schema=\"Inventory\",Item=\"mvwFactInventoryProduction\"]}[Data],",
                "   #\"Filtered Rows\" = Table.SelectRows(Inventory_mvwFactInventoryProduction ,each [AsOfDateKey] < 19000101)",
                "in",
                "    #\"Filtered Rows\""
              ]
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>let",
                  "   Source = #\"SynapseDW\",",
                  "   Inventory_mvwFactInventoryProduction = Source{[Schema=\"Inventory\",Item=\"mvwFactInventoryProduction\"]}[Data],",
                  "   #\"Filtered Rows\" = Table.SelectRows(Inventory_mvwFactInventoryProduction ,each [AsOfDateKey] < 19000101)",
                  "in",
                  "    #\"Filtered Rows\"</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "measures": [
          {
            "name": "Num SKU Produced",
            "expression": [
              " ",
              "CALCULATE(",
              "[_SKU_Count],CROSSFILTER(FactInventoryProduction[ItemKey],DimItem[ItemKey],Both),",
              " FactFinishedGoodsInventory[Units] > 0",
              " , 'Comparison'[Param] = \"Current\"",
              " )",
              "",
              "/*",
              "var a = CALCULATE(DISTINCTCOUNTNOBLANK(DimItem[SKUGlobal]),FactInventoryProduction[Units]>0)",
              "return IF(ISBLANK(a),0,a)*/"
            ],
            "formatString": "0"
          },
          {
            "name": "Units produced",
            "expression": " sum(FactInventoryProduction[Units])",
            "formatString": "0"
          },
          {
            "name": "Average SKU production",
            "expression": " divide([Units produced],[Num SKU produced],0)",
            "formatString": "0.0"
          }
        ]
      }
    ],
    "relationships": [
      {
        "name": "f1c4a535-519d-4e56-8292-36004d4fc165",
        "fromTable": "FactGoalsSkuCount",
        "fromColumn": "BusinessUnitKey",
        "toTable": "DimBusiness",
        "toColumn": "BusinessUnitKey"
      },
      {
        "name": "8e1f9c7f-dd95-4571-aab5-ec0c7981146c",
        "fromTable": "FactSelfReportedKPI",
        "fromColumn": "BusinessUnitKey",
        "toTable": "DimBusiness",
        "toColumn": "BusinessUnitKey"
      },
      {
        "name": "8023a434-90c0-45ad-aeee-0a8bc460cb8e",
        "fromTable": "FactFinishedGoodsPlan",
        "fromColumn": "AsOfDateKey",
        "toTable": "Calendar",
        "toColumn": "CalendarDateKey"
      },
      {
        "name": "7aa6bab1-866f-4211-9361-34d6f84f8ac3",
        "fromTable": "FactFinishedGoodsPlan",
        "fromColumn": "FacilityKey",
        "toTable": "DimFacility",
        "toColumn": "FacilityKey"
      },
      {
        "name": "aee4ebd4-4bcd-47fa-91c7-c31bcd94d92f",
        "toCardinality": "many",
        "fromTable": "DimComparisonsItems",
        "fromColumn": "Test",
        "toTable": "DimComparisons",
        "toColumn": "StartCalendarDateKey",
        "crossFilteringBehavior": "bothDirections"
      },
      {
        "name": "62db4b8c-6350-45ca-82e6-212a572f709c",
        "fromTable": "FactSales",
        "fromColumn": "AsOfDateKey",
        "toTable": "Calendar",
        "toColumn": "CalendarDateKey"
      },
      {
        "name": "e96d79f1-280b-49cc-a6a5-6bf39e120347",
        "fromTable": "FactSales",
        "fromColumn": "FinancialPlanTypeKey",
        "toTable": "DimFinancialPlanType",
        "toColumn": "FinancialPlanTypeKey"
      },
      {
        "name": "1b0991ba-223e-4cab-a15e-1beac248e8e0",
        "fromTable": "FactSales",
        "fromColumn": "FinancialMeasureKey",
        "toTable": "DimFinancialMeasure",
        "toColumn": "FinancialMeasureKey"
      },
      {
        "name": "4a70c3ee-fb3e-4fcb-9cd3-bb07269c00dc",
        "fromTable": "FactSales",
        "fromColumn": "FacilityKey",
        "toTable": "DimFacility",
        "toColumn": "FacilityKey"
      },
      {
        "name": "825ac0e4-35ca-40ff-8937-f3f6e546eb43",
        "fromTable": "FactSales",
        "fromColumn": "CustomerAccountKey",
        "toTable": "DimCustomer",
        "toColumn": "CustomerAccountKey"
      },
      {
        "name": "a371c150-b9d7-4a5b-9d86-596c14d74f98",
        "fromTable": "FactSales",
        "fromColumn": "BusinessKey",
        "toTable": "DimBusiness",
        "toColumn": "BusinessUnitKey"
      },
      {
        "name": "b2b08a12-0c3e-4145-95c8-d113d92161bf",
        "fromTable": "FactInventoryAvailability",
        "fromColumn": "FacilityKey",
        "toTable": "DimFacility",
        "toColumn": "FacilityKey"
      },
      {
        "name": "268d88ae-3f9a-41e2-a50a-430b0e53f8b1",
        "fromTable": "FactInventoryAvailability",
        "fromColumn": "ShipperFlagKey",
        "toTable": "DimShipperFlag",
        "toColumn": "ShipperFlagKey"
      },
      {
        "name": "af46a6db-2284-4610-bcf3-d103140509b9",
        "fromTable": "FactSelfReportedKPI",
        "fromColumn": "AsofDateKey",
        "toTable": "Calendar",
        "toColumn": "CalendarDateKey"
      },
      {
        "name": "00e8d3f5-5e5b-44f6-ba64-dbe8f96a4829",
        "fromTable": "FactInventoryAvailability",
        "fromColumn": "AsOfDateKey",
        "toTable": "Calendar",
        "toColumn": "CalendarDateKey"
      },
      {
        "name": "bcc877b2-2eb8-460e-8378-ed73569999c0",
        "fromTable": "FactFinishedGoodsInventory",
        "fromColumn": "FacilityKey",
        "toTable": "DimFacility",
        "toColumn": "FacilityKey"
      },
      {
        "name": "a1366cb1-14b8-4c1f-9a50-14a9b486a8d3",
        "fromTable": "FactFinishedGoodsInventory",
        "fromColumn": "FinancialPlanTypeKey",
        "toTable": "DimFinancialPlanType",
        "toColumn": "FinancialPlanTypeKey"
      },
      {
        "name": "548b518c-14cf-4d2a-8ec0-72853079238a",
        "fromTable": "FactFinishedGoodsInventory",
        "fromColumn": "FinancialMeasureKey",
        "toTable": "DimFinancialMeasure",
        "toColumn": "FinancialMeasureKey"
      },
      {
        "name": "641b92c0-c189-42ee-9180-59d4e89d104c",
        "fromTable": "FactFinishedGoodsInventory",
        "fromColumn": "ShipperFlagKey",
        "toTable": "DimShipperFlag",
        "toColumn": "ShipperFlagKey"
      },
      {
        "name": "feff1f61-83aa-4f25-b268-06114199ce02",
        "fromTable": "FactFinishedGoodsPlan",
        "fromColumn": "BusinessKey",
        "toTable": "DimBusiness",
        "toColumn": "BusinessUnitKey"
      },
      {
        "name": "5a21efc7-2d2a-4d02-83f8-52c371527998",
        "fromTable": "FactSCACustomer",
        "fromColumn": "ChainAccountDescBusID",
        "toTable": "FactSCAChainAccount",
        "toColumn": "ChainAccountDescBusId"
      },
      {
        "name": "2edef9ec-0820-4c07-9aaa-185116aeb6cb",
        "fromTable": "FactSCACustomer",
        "fromColumn": "SCAGlobal",
        "toTable": "FactSCAGlobal",
        "toColumn": "SCAGlobal"
      },
      {
        "name": "6656e697-2e6f-46a8-95c9-d96267959c5b",
        "fromTable": "FactFinishedGoodsPlan",
        "fromColumn": "FinancialPlanTypeKey",
        "toTable": "DimFinancialPlanType",
        "toColumn": "FinancialPlanTypeKey"
      },
      {
        "name": "5bc8e22c-5468-4ae7-a0a0-1a6916560b6c",
        "fromTable": "FactSales",
        "fromColumn": "SalesOrg",
        "toTable": "DimSalesOrg",
        "toColumn": "SalesOrgId"
      },
      {
        "name": "3466b534-fef8-4a53-9d37-8bd57ee6518c",
        "fromTable": "DimComparisonsItems",
        "fromColumn": "PhaseOutDateKey",
        "toTable": "Calendar",
        "toColumn": "CalendarDateKey"
      },
      {
        "name": "d551ed66-5dee-4ae0-8a8e-5dc05b6dc58d",
        "fromTable": "FactFinishedGoodsPlan",
        "fromColumn": "ItemKey",
        "toTable": "DimItem",
        "toColumn": "ItemKey"
      },
      {
        "name": "4d3584fe-9a16-4986-8712-db8d88872b63",
        "fromTable": "FactInventoryAvailability",
        "fromColumn": "ItemKey",
        "toTable": "DimItem",
        "toColumn": "ItemKey"
      },
      {
        "name": "b9c52e0f-75ac-4a04-84f4-3310ac0bee98",
        "fromTable": "DimItem",
        "fromColumn": "MarketingResp3",
        "toTable": "DimMarketingResponsibilityHierarchy",
        "toColumn": "MarketingResp4"
      },
      {
        "name": "5653db35-318c-4820-a345-dad7ba67a76a",
        "fromTable": "DimItem",
        "fromColumn": "SKUGlobal",
        "toTable": "DimWinningPortfolioSkuList",
        "toColumn": "SKUGlobal"
      },
      {
        "name": "38d0f85a-8d9b-4455-90e9-326e12ca2faa",
        "fromTable": "FactFinishedGoodsInventory",
        "fromColumn": "AsOfDateKey",
        "toTable": "Calendar",
        "toColumn": "CalendarDateKey"
      },
      {
        "name": "698710a9-6e1c-432c-8df9-3a5571521090",
        "fromTable": "FactFinishedGoodsInventory",
        "fromColumn": "BusinessKey",
        "toTable": "DimBusiness",
        "toColumn": "BusinessUnitKey"
      },
      {
        "name": "3c3bf93e-f417-44c9-bdb5-51f59f14190d",
        "fromTable": "FactFinishedGoodsReserves",
        "fromColumn": "BusinessKey",
        "toTable": "DimBusiness",
        "toColumn": "BusinessUnitKey"
      },
      {
        "name": "d730c9aa-6084-4f94-9d86-36af7b076dc2",
        "fromTable": "FactSCADivision",
        "fromColumn": "BusinessKey",
        "toTable": "DimBusiness",
        "toColumn": "BusinessUnitKey"
      },
      {
        "name": "5883f82b-7c89-42a8-b121-500600429c89",
        "fromTable": "DimItem",
        "fromColumn": "SCAGlobal",
        "toTable": "FactSCAGlobal",
        "toColumn": "SCAGlobal"
      },
      {
        "name": "135da67a-0d1f-4ae1-8bcc-b40240649635",
        "fromTable": "FactSales",
        "fromColumn": "ShipperFlagKey",
        "toTable": "DimShipperFlag",
        "toColumn": "ShipperFlagKey"
      },
      {
        "name": "b767b6e0-4933-4416-befa-f4fd1c3fe824",
        "fromTable": "FactSCADivision",
        "fromColumn": "SCAGlobal",
        "toTable": "FactSCAGlobal",
        "toColumn": "SCAGlobal",
        "crossFilteringBehavior": "bothDirections"
      },
      {
        "name": "317499ed-67de-459b-a4c1-6e2e39778f17",
        "fromTable": "FactSales",
        "fromColumn": "ItemKey",
        "toTable": "DimItem",
        "toColumn": "ItemKey"
      },
      {
        "name": "53290326-b019-4d56-8bd5-64ea5580af12",
        "fromTable": "FactInventoryProduction",
        "fromColumn": "AsOfDateKey",
        "toTable": "Calendar",
        "toColumn": "CalendarDateKey"
      },
      {
        "name": "e791ad57-b1ee-48fb-9dce-d3804f841047",
        "fromTable": "FactInventoryProduction",
        "fromColumn": "BusinessKey",
        "toTable": "DimBusiness",
        "toColumn": "BusinessUnitKey"
      },
      {
        "name": "1ceb412d-66f8-4439-b99c-63927817df18",
        "fromTable": "FactInventoryProduction",
        "fromColumn": "FacilityKey",
        "toTable": "DimFacility",
        "toColumn": "FacilityKey"
      },
      {
        "name": "6ed8396a-f9a0-4d70-bd5c-e1115e62d306",
        "fromTable": "FactInventoryProduction",
        "fromColumn": "FinancialMeasureKey",
        "toTable": "DimFinancialMeasure",
        "toColumn": "FinancialMeasureKey"
      },
      {
        "name": "1c149482-5d5d-43fd-a187-7dac21e17022",
        "fromTable": "FactInventoryProduction",
        "fromColumn": "FinancialPlanTypeKey",
        "toTable": "DimFinancialPlanType",
        "toColumn": "FinancialPlanTypeKey"
      },
      {
        "name": "b9d8f1b6-facd-448f-b0b5-2f74398f6f8d",
        "fromTable": "FactInventoryProduction",
        "fromColumn": "ShipperFlagKey",
        "toTable": "DimShipperFlag",
        "toColumn": "ShipperFlagKey"
      },
      {
        "name": "ede0f82e-7c5b-4ed4-937b-351c6a6ec259",
        "fromTable": "FactInventoryProduction",
        "fromColumn": "ItemKey",
        "toTable": "DimItem",
        "toColumn": "ItemKey"
      },
      {
        "name": "323825f2-abdc-4958-a96e-95273a4ae04b",
        "fromTable": "FactFinishedGoodsInventory",
        "fromColumn": "ItemKey",
        "toTable": "DimItem",
        "toColumn": "ItemKey"
      },
      {
        "name": "34ac11c0-47ac-4eef-9ecb-dd5bb8171ccd",
        "fromTable": "FactSCACustomer",
        "fromColumn": "BusinessKey",
        "toTable": "DimBusiness",
        "toColumn": "BusinessUnitKey"
      },
      {
        "name": "de17bb71-fb3f-449b-b1f9-3c8f6e09e6ba",
        "fromTable": "FactSCACustomer",
        "fromColumn": "CustomerAccountKey",
        "toTable": "DimCustomer",
        "toColumn": "CustomerAccountKey"
      },
      {
        "name": "17c9ba9b-f578-48b6-9fe7-0c406c90f698",
        "fromTable": "FactFinishedGoodsReserves",
        "fromColumn": "AsOfDateKey",
        "toTable": "Calendar",
        "toColumn": "CalendarDateKey"
      },
      {
        "name": "c950b839-66cb-4f5a-85d9-cf6f82c32771",
        "fromTable": "FactFinishedGoodsReserves",
        "fromColumn": "FacilityKey",
        "toTable": "DimFacility",
        "toColumn": "FacilityKey"
      },
      {
        "name": "5235a303-fbd3-4cac-af77-c6aca0099b9d",
        "fromTable": "FactFinishedGoodsReserves",
        "fromColumn": "ItemKey",
        "toTable": "DimItem",
        "toColumn": "ItemKey"
      },
      {
        "name": "7993c557-2860-4284-87d7-77e53b7d2b67",
        "fromTable": "FactFinishedGoodsInventory",
        "fromColumn": "SKULCAKey",
        "toTable": "DimSKULifeCycle",
        "toColumn": "SKULCAKey"
      },
      {
        "name": "1911dc9e-ed46-46e1-90c9-9c3af3b0de4e",
        "fromTable": "DimItem",
        "fromColumn": "CurrentClassCode3",
        "toTable": "DimClassification",
        "toColumn": "LCAValue"
      },
      {
        "name": "26ec9e23-756d-4299-8a98-1269e9daadb0",
        "fromTable": "FactInventoryAvailability",
        "fromColumn": "BusinessKey",
        "toTable": "DimBusiness",
        "toColumn": "BusinessUnitKey"
      }
    ],
    "annotations": [
      {
        "name": "ClientCompatibilityLevel",
        "value": "600"
      }
    ]
  },
  "id": "SemanticModel"
}