{
  "name": "SemanticModel",
  "compatibilityLevel": 1500,
  "model": {
    "culture": "en-US",
    "discourageImplicitMeasures": true,
    "dataSources": [
      {
        "type": "structured",
        "name": "SQL Server HBIDW",
        "connectionDetails": {
          "protocol": "tds",
          "address": {
            "server": "BIPAOSQL.res.hbi.net",
            "database": "HBIDW"
          },
          "authentication": null,
          "query": null
        },
        "credential": {
          "AuthenticationKind": "Windows",
          "kind": "SQL",
          "path": "bipaosql.res.hbi.net;HBIDW",
          "Username": "hbires\\naulagan",
          "EncryptConnection": false,
          "PrivacySetting": "Organizational"
        }
      },
      {
        "type": "structured",
        "name": "SQL Server EDM",
        "connectionDetails": {
          "protocol": "tds",
          "address": {
            "server": "BIPAOSQL.res.hbi.net",
            "database": "EDM"
          },
          "authentication": null,
          "query": null
        },
        "credential": {
          "AuthenticationKind": "Windows",
          "kind": "SQL",
          "path": "bipaosql.res.hbi.net;EDM",
          "Username": "hbires\\naulagan",
          "EncryptConnection": false,
          "PrivacySetting": "Organizational"
        }
      },
      {
        "type": "structured",
        "name": "Azure Synapse",
        "connectionDetails": {
          "protocol": "tds",
          "address": {
            "server": "hbi-qa01-analytics-dwsrv.database.windows.net",
            "database": "hbiqa01dw"
          },
          "authentication": null,
          "query": null
        },
        "credential": {
          "AuthenticationKind": "UsernamePassword",
          "kind": "SQL",
          "path": "hbi-qa01-analytics-dwsrv.database.windows.net;hbiqa01dw",
          "Username": "AASReader",
          "EncryptConnection": true,
          "PrivacySetting": "Organizational"
        }
      }
    ],
    "tables": [
      {
        "name": "Product",
        "columns": [
          {
            "name": "Division_Group",
            "dataType": "string",
            "sourceColumn": "Division_Group"
          },
          {
            "name": "Style_Num",
            "dataType": "string",
            "sourceColumn": "Style_Num"
          },
          {
            "name": "Brand_Name",
            "dataType": "string",
            "sourceColumn": "Brand_Name"
          },
          {
            "name": "Category_Desc",
            "dataType": "string",
            "sourceColumn": "Category_Desc"
          },
          {
            "name": "Color_Category_Desc",
            "dataType": "string",
            "sourceColumn": "Color_Category_Desc"
          },
          {
            "name": "Fabrication",
            "dataType": "string",
            "sourceColumn": "Fabrication"
          },
          {
            "name": "Marketing_Resp_3",
            "dataType": "string",
            "sourceColumn": "Marketing_Resp_3"
          },
          {
            "name": "Merchandising_putup",
            "dataType": "string",
            "sourceColumn": "Merchandising_putup"
          },
          {
            "name": "Product_Line_Desc",
            "dataType": "string",
            "sourceColumn": "Product_Line_Desc"
          },
          {
            "name": "Representative_Style_Num",
            "dataType": "string",
            "sourceColumn": "Representative_Style_Num"
          },
          {
            "name": "Silhouette",
            "dataType": "string",
            "sourceColumn": "Silhouette"
          },
          {
            "name": "Subbrand_Desc",
            "dataType": "string",
            "sourceColumn": "Subbrand_Desc"
          },
          {
            "name": "Subcategory_Desc",
            "dataType": "string",
            "sourceColumn": "Subcategory_Desc"
          },
          {
            "name": "Brand_Group_Desc",
            "dataType": "string",
            "sourceColumn": "Brand_Group_Desc"
          },
          {
            "name": "Co_Brander_Desc",
            "dataType": "string",
            "sourceColumn": "Co_Brander_Desc"
          },
          {
            "name": "Product_Group_Desc",
            "dataType": "string",
            "sourceColumn": "Product_Group_Desc"
          },
          {
            "name": "Brand_Ownership_Group_Desc",
            "dataType": "string",
            "sourceColumn": "Brand_Ownership_Group_Desc"
          },
          {
            "name": "Gender_Age_Desc",
            "dataType": "string",
            "sourceColumn": "Gender_Age_Desc"
          },
          {
            "name": "Gender_Desc",
            "dataType": "string",
            "sourceColumn": "Gender_Desc"
          },
          {
            "name": "Primary_Channel_Desc",
            "dataType": "string",
            "sourceColumn": "Primary_Channel_Desc"
          },
          {
            "name": "Fiber_Type_Desc",
            "dataType": "string",
            "sourceColumn": "Fiber_Type_Desc"
          },
          {
            "name": "Fiber_Finish_Desc",
            "dataType": "string",
            "sourceColumn": "Fiber_Finish_Desc"
          },
          {
            "name": "Business_Segment_Hierarchy_id",
            "dataType": "int64",
            "sourceColumn": "Business_Segment_Hierarchy_id"
          },
          {
            "name": "Business_seg_Desc",
            "dataType": "string",
            "sourceColumn": "Business_seg_Desc"
          },
          {
            "name": "Sbu_Desc",
            "dataType": "string",
            "sourceColumn": "Sbu_Desc"
          },
          {
            "name": "Dummy_Style_Ind",
            "dataType": "string",
            "sourceColumn": "Dummy_Style_Ind"
          },
          {
            "name": "Gender_Sort",
            "dataType": "int64",
            "sourceColumn": "Gender_Sort"
          },
          {
            "name": "Gender_Age_Sort",
            "dataType": "int64",
            "sourceColumn": "Gender_Age_Sort"
          },
          {
            "name": "Gender_Age_Parent_Desc",
            "dataType": "string",
            "sourceColumn": "Gender_Age_Parent_Desc"
          },
          {
            "name": "Gender_Age_Parent_Sort",
            "dataType": "int64",
            "sourceColumn": "Gender_Age_Parent_Sort"
          },
          {
            "name": "SubBrand_Collection",
            "dataType": "string",
            "sourceColumn": "SubBrand_Collection"
          },
          {
            "name": "Cup_Size",
            "dataType": "string",
            "sourceColumn": "Cup_Size"
          },
          {
            "name": "Size_Code",
            "dataType": "string",
            "sourceColumn": "Size_Code"
          },
          {
            "name": "Size_Desc",
            "dataType": "string",
            "sourceColumn": "Size_Desc"
          },
          {
            "name": "x_Size",
            "dataType": "string",
            "sourceColumn": "x_Size"
          },
          {
            "name": "Color_Name",
            "dataType": "string",
            "sourceColumn": "Color_Name"
          },
          {
            "name": "Attribution_Code",
            "dataType": "string",
            "sourceColumn": "Attribution_Code"
          },
          {
            "name": "Garm_Per_Pkg_Qty",
            "dataType": "double",
            "sourceColumn": "Garm_Per_Pkg_Qty"
          },
          {
            "name": "Pack_code",
            "dataType": "string",
            "sourceColumn": "Pack_code"
          },
          {
            "name": "Current_Std_Cost",
            "dataType": "double",
            "sourceColumn": "Current_Std_Cost"
          },
          {
            "name": "Color_Shade",
            "dataType": "string",
            "sourceColumn": "Color_Shade"
          },
          {
            "name": "Color_Code",
            "dataType": "string",
            "sourceColumn": "Color_Code"
          },
          {
            "name": "Color_Mnemon_Code",
            "dataType": "string",
            "sourceColumn": "Color_Mnemon_Code"
          },
          {
            "name": "Size_Mnemon_Code",
            "dataType": "string",
            "sourceColumn": "Size_Mnemon_Code"
          },
          {
            "name": "Size_Num",
            "dataType": "string",
            "sourceColumn": "Size_Num"
          },
          {
            "name": "Capacity_Group",
            "dataType": "string",
            "sourceColumn": "Capacity_Group"
          },
          {
            "name": "UPC_Code",
            "dataType": "string",
            "sourceColumn": "UPC_Code"
          },
          {
            "name": "Style_Group",
            "dataType": "string",
            "sourceColumn": "Style_Group"
          },
          {
            "name": "Inv_Disposition_Route",
            "dataType": "string",
            "sourceColumn": "Inv_Disposition_Route"
          },
          {
            "name": "Class_Code_LV1",
            "dataType": "int64",
            "sourceColumn": "Class_Code_LV1"
          },
          {
            "name": "Class_Code_LV1_Desc",
            "dataType": "string",
            "sourceColumn": "Class_Code_LV1_Desc",
            "sortByColumn": "Class_Code_LV1"
          },
          {
            "name": "Class_Code_LV2",
            "dataType": "int64",
            "sourceColumn": "Class_Code_LV2"
          },
          {
            "name": "Class_Code_LV2_Desc",
            "dataType": "string",
            "sourceColumn": "Class_Code_LV2_Desc",
            "sortByColumn": "Class_Code_LV2"
          },
          {
            "name": "Class_Code_LV3",
            "dataType": "int64",
            "sourceColumn": "Class_Code_LV3"
          },
          {
            "name": "Class_Code_LV3_Desc",
            "dataType": "string",
            "sourceColumn": "Class_Code_LV3_Desc",
            "sortByColumn": "Class_Code_LV3"
          },
          {
            "name": "Classification_Code_Hier_ID",
            "dataType": "int64",
            "sourceColumn": "Classification_Code_Hier_ID"
          },
          {
            "name": "SAP_GRID_VALUE",
            "dataType": "string",
            "sourceColumn": "SAP_GRID_VALUE"
          },
          {
            "name": "SAP_Material_Num",
            "dataType": "string",
            "sourceColumn": "SAP_Material_Num"
          },
          {
            "name": "Legecy_Class_Code",
            "dataType": "string",
            "sourceColumn": "Legecy_Class_Code"
          },
          {
            "name": "Legecy_Class_Description",
            "dataType": "string",
            "sourceColumn": "Legecy_Class_Description"
          },
          {
            "name": "SAP_Profit_Center_num",
            "dataType": "string",
            "sourceColumn": "SAP_Profit_Center_num"
          },
          {
            "name": "Lrp_Style",
            "dataType": "string",
            "sourceColumn": "Lrp_Style"
          },
          {
            "name": "Dim_Item_id",
            "dataType": "double",
            "sourceColumn": "Dim_Item_id"
          },
          {
            "name": "Master_Grmt_Style",
            "dataType": "string",
            "sourceColumn": "Master_Grmt_Style"
          },
          {
            "name": "Selling_Style",
            "dataType": "string",
            "sourceColumn": "Selling_Style"
          },
          {
            "name": "Projected_Obsolete_Date",
            "dataType": "dateTime",
            "sourceColumn": "Projected_Obsolete_Date"
          },
          {
            "name": "Style_Desc",
            "dataType": "string",
            "sourceColumn": "Style_Desc"
          },
          {
            "name": "Range_CD",
            "dataType": "string",
            "sourceColumn": "Range_CD"
          },
          {
            "name": "Range_Desc",
            "dataType": "string",
            "sourceColumn": "Range_Desc"
          },
          {
            "name": "Item_Create_Date",
            "dataType": "dateTime",
            "isHidden": true,
            "sourceColumn": "Item_Create_Date"
          },
          {
            "name": "Division_Code",
            "dataType": "string",
            "sourceColumn": "Division_Code"
          },
          {
            "name": "Division_Desc",
            "dataType": "string",
            "sourceColumn": "Division_Desc"
          },
          {
            "type": "calculated",
            "name": "Partial Percent",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": " RELATED('Disposal SKU'[Perc])",
            "formatString": "0%;-0%;0%"
          },
          {
            "type": "calculated",
            "name": "No Regrets Flag",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "IF(ISBLANK(RELATED('Disposal SKU'[Partial])),\"N\",\"Y\")"
          },
          {
            "type": "calculated",
            "name": "ChampionBrand Flag",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "if('Product'[Brand_Name]=\"Champion\",\"Champion\",\"Other Brands\")"
          },
          {
            "name": "SKUGlobal",
            "dataType": "string",
            "sourceColumn": "SKUGlobal"
          },
          {
            "name": "SKUCount",
            "dataType": "string",
            "sourceColumn": "SKUCount"
          },
          {
            "type": "calculated",
            "name": "LCA Disco Date",
            "dataType": "dateTime",
            "isDataTypeInferred": true,
            "isHidden": true,
            "expression": [
              "",
              "VAR skuisactive =",
              "    CALCULATE (",
              "        SUMX ( 'Product', IF ( ISBLANK ( RELATED ( LCA[obsolete_date] ) ), 1, 0 ) ),",
              "        ALLEXCEPT ( 'Product', 'Product'[SKUGlobal] )",
              "    ) > 0",
              "RETURN",
              "    IF ( skuisactive, BLANK (), RELATED ( LCA[obsolete_date] ) )",
              ""
            ],
            "formatString": "Short Date",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"DateTimeShortDatePattern\" />"
              }
            ]
          },
          {
            "type": "calculated",
            "name": "LCA Reason Code",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "VAR skuisactive =",
              "    CALCULATE (",
              "        SUMX ( 'Product', IF ( ISBLANK ( RELATED ( LCA[reason_code] ) ), 1, 0 ) ),",
              "        ALLEXCEPT ( 'Product', 'Product'[SKUGlobal] )",
              "    ) > 0",
              "RETURN",
              "    IF ( skuisactive, BLANK (), RELATED ( LCA[reason_code] ) )",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "LCA Disposition Route",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "VAR skuisactive =",
              "    CALCULATE (",
              "        SUMX ( 'Product', IF ( ISBLANK ( RELATED ( LCA[disposition_route] ) ), 1, 0 ) ),",
              "        ALLEXCEPT ( 'Product', 'Product'[SKUGlobal] )",
              "    ) > 0",
              "RETURN",
              "    IF ( skuisactive, BLANK (), RELATED ( LCA[disposition_route] ) )",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "LCA Notes",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "VAR skuisactive =",
              "    CALCULATE (",
              "        SUMX ( 'Product', IF ( ISBLANK ( RELATED ( LCA[notes] ) ), 1, 0 ) ),",
              "        ALLEXCEPT ( 'Product', 'Product'[SKUGlobal] )",
              "    ) > 0",
              "RETURN",
              "    IF ( skuisactive, BLANK (), RELATED ( LCA[notes] ) )",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "Selling Type",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "IF(ISBLANK(RELATED(SellingType[SellingType])), \"UNMAPPED\",RELATED(SellingType[SellingType]))"
          },
          {
            "type": "calculated",
            "name": "XYZ Rolling 12M",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "VAR NumOfDays = 364",
              "VAR LastDay =",
              "CALCULATE (",
              "\tMAX ( 'Calendar'[Sequential Day Number] ),",
              "    'Calendar'[LastWeekInd] = \"Y\"",
              ")",
              "VAR FirstDay = LastDay- NumOfDays",
              "VAR CalendarTable = ",
              "        CALCULATETABLE( ",
              "        VALUES('Calendar'[Fiscal_Mth]),",
              "        'Calendar'[Sequential Day Number] >= FirstDay",
              "        && 'Calendar'[Sequential Day Number] <= LastDay",
              "    )",
              "",
              "VAR CalcTable =",
              "    ADDCOLUMNS (",
              "        CalendarTable, ",
              "        \"SalesByMonth\", ",
              "        CALCULATE(",
              "            [Pre-incentive Sales $],",
              "            ALLEXCEPT('Product', 'Product'[SKUGlobal])",
              "        )",
              "    )",
              "VAR Variation =",
              "    DIVIDE (",
              "        STDEVX.P ( CalcTable, [SalesByMonth] ),",
              "        AVERAGEX ( CalcTable, [SalesByMonth] )",
              "    )",
              "RETURN",
              "SWITCH(TRUE(),",
              "ISBLANK ( Variation ), \"No Sales\",",
              "Variation > 0.5, \"Z\",",
              "Variation > 0.2, \"Y\",",
              "Variation > 0, \"X\",",
              "\"Negative COV\"",
              ")"
            ]
          },
          {
            "type": "calculated",
            "name": "XYZ Rolling 12M COV",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "VAR NumOfDays = 364",
              "VAR LastDay =",
              "CALCULATE (",
              "\tMAX ( 'Calendar'[Sequential Day Number] ),",
              "    'Calendar'[LastWeekInd] = \"Y\"",
              ")",
              "VAR FirstDay = LastDay- NumOfDays",
              "VAR CalendarTable = ",
              "        CALCULATETABLE( ",
              "        VALUES('Calendar'[Fiscal_Mth]),",
              "        'Calendar'[Sequential Day Number] >= FirstDay",
              "        && 'Calendar'[Sequential Day Number] <= LastDay",
              "    )",
              "",
              "VAR CalcTable =",
              "    ADDCOLUMNS (",
              "        CalendarTable, ",
              "        \"SalesByMonth\", ",
              "        CALCULATE(",
              "            [Pre-incentive Sales $],",
              "            ALLEXCEPT('Product', 'Product'[SKUGlobal])",
              "        )",
              "    )",
              "VAR Variation =",
              "    DIVIDE (",
              "        STDEVX.P ( CalcTable, [SalesByMonth] ),",
              "        AVERAGEX ( CalcTable, [SalesByMonth] )",
              "    )",
              "RETURN",
              "Variation"
            ],
            "formatString": "#,0.000"
          },
          {
            "type": "calculated",
            "name": "XYZ All Time",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "VAR CalcTable =",
              "    ADDCOLUMNS (",
              "        VALUES('Calendar'[Fiscal_Mth]), ",
              "        \"SalesByMonth\", ",
              "        CALCULATE(",
              "            [Pre-incentive Sales $],",
              "            ALLEXCEPT('Product', 'Product'[SKUGlobal])",
              "        )",
              "    )",
              "VAR Variation =",
              "    DIVIDE (",
              "        STDEVX.P ( CalcTable, [SalesByMonth] ),",
              "        AVERAGEX ( CalcTable, [SalesByMonth] )",
              "    )",
              "RETURN",
              "SWITCH(TRUE(),",
              "ISBLANK ( Variation ), \"No Sales\",",
              "Variation > 0.5, \"Z\",",
              "Variation > 0.2, \"Y\",",
              "Variation > 0, \"X\",",
              "\"Negative COV\"",
              ")"
            ]
          },
          {
            "type": "calculated",
            "name": "Sales All Time",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              " ",
              "CALCULATE(",
              "[Pre-incentive Sales $],",
              "ALLEXCEPT('Product', 'Product'[SKUGlobal])",
              ")"
            ]
          },
          {
            "type": "calculated",
            "name": "HBI ABC",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "SWITCH(TRUE(), ",
              "'Product'[Sbu_Desc] IN {\"HA Apparel\", \"HA Bras N Things\", \"HA Sheridan\",\"Champion Europe\", \"MFB Europe\"}, BLANK(),",
              "LEFT('Product'[Sbu_Desc],4) = \"HEI-\", BLANK(),",
              "AND(ISBLANK( RELATED( 'SKU Statistics'[HBI ABC Class] ) ), DATEDIFF('Product'[First Inventory Date],NOW(),DAY) < 181), \"No Sales & New\",",
              "ISBLANK( RELATED( 'SKU Statistics'[HBI ABC Class] ) ), \"No Sales & Established\",",
              "RELATED( 'SKU Statistics'[HBI ABC Class] )",
              ")"
            ]
          },
          {
            "type": "calculated",
            "name": "Division ABC",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "SWITCH(TRUE(), ",
              "'Product'[Sbu_Desc] IN {\"HA Apparel\", \"HA Bras N Things\", \"HA Sheridan\",\"Champion Europe\", \"MFB Europe\"}, BLANK(),",
              "LEFT('Product'[Sbu_Desc],4) = \"HEI-\", BLANK(),",
              "AND(ISBLANK( RELATED( 'SKU Statistics'[Division ABC Class] ) ), DATEDIFF('Product'[First Inventory Date],NOW(),DAY) < 181), \"No Sales & New\",",
              "ISBLANK( RELATED( 'SKU Statistics'[Division ABC Class] ) ), \"No Sales & Established\",",
              "RELATED( 'SKU Statistics'[Division ABC Class] )",
              ")"
            ]
          },
          {
            "type": "calculated",
            "name": "HBI ABC Percentile",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "SWITCH(TRUE(), ",
              "'Product'[Sbu_Desc] IN {\"HA Apparel\", \"HA Bras N Things\", \"HA Sheridan\",\"Champion Europe\", \"MFB Europe\"}, BLANK(),",
              "LEFT('Product'[Sbu_Desc],4) = \"HEI-\", BLANK(),",
              "ISBLANK( RELATED( 'SKU Statistics'[HBICumulativePercentage] ) ), 1,",
              "RELATED( 'SKU Statistics'[HBICumulativePercentage] )",
              ")"
            ],
            "formatString": "0.00%;-0.00%;0.00%"
          },
          {
            "type": "calculated",
            "name": "Division ABC Percentile",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "SWITCH(TRUE(), ",
              "'Product'[Sbu_Desc] IN {\"HA Apparel\", \"HA Bras N Things\", \"HA Sheridan\",\"Champion Europe\", \"MFB Europe\"}, BLANK(),",
              "LEFT('Product'[Sbu_Desc],4) = \"HEI-\", BLANK(),",
              "ISBLANK( RELATED( 'SKU Statistics'[DivisionCumulativePercentage] ) ), 1,",
              "RELATED( 'SKU Statistics'[DivisionCumulativePercentage] )",
              ")"
            ],
            "formatString": "0.00%;-0.00%;0.00%"
          },
          {
            "type": "calculated",
            "name": "HBI ABC Decile",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "SWITCH(TRUE(),",
              "'Product'[Sbu_Desc] IN {\"HA Apparel\", \"HA Bras N Things\", \"HA Sheridan\",\"Champion Europe\", \"MFB Europe\"}, BLANK(),",
              "LEFT('Product'[Sbu_Desc],4) = \"HEI-\", BLANK(),",
              "'Product'[HBI ABC] = \"No Sales & New\", \"No Sales & New\",",
              "'Product'[HBI ABC] = \"No Sales & Established\", \"No Sales & Established\",",
              "'Product'[HBI ABC Percentile] > .9, \"10\",",
              "'Product'[HBI ABC Percentile] > .8, \"9\",",
              "'Product'[HBI ABC Percentile] > .7, \"8\",",
              "'Product'[HBI ABC Percentile] > .6, \"7\",",
              "'Product'[HBI ABC Percentile] > .5, \"6\",",
              "'Product'[HBI ABC Percentile] > .4, \"5\",",
              "'Product'[HBI ABC Percentile] > .3, \"4\",",
              "'Product'[HBI ABC Percentile] > .2, \"3\",",
              "'Product'[HBI ABC Percentile] > .1, \"2\",",
              "\"1\"",
              ")"
            ],
            "sortByColumn": "HBI ABC Decile Sort"
          },
          {
            "type": "calculated",
            "name": "Division ABC Decile",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "SWITCH(TRUE(),",
              "'Product'[Sbu_Desc] IN {\"HA Apparel\", \"HA Bras N Things\", \"HA Sheridan\",\"Champion Europe\", \"MFB Europe\"}, BLANK(),",
              "LEFT('Product'[Sbu_Desc],4) = \"HEI-\", BLANK(),",
              "'Product'[Division ABC] = \"No Sales & New\", \"No Sales & New\",",
              "'Product'[Division ABC] = \"No Sales & Established\", \"No Sales & Established\",",
              "'Product'[Division ABC Percentile] > .9, \"10\",",
              "'Product'[Division ABC Percentile] > .8, \"9\",",
              "'Product'[Division ABC Percentile] > .7, \"8\",",
              "'Product'[Division ABC Percentile] > .6, \"7\",",
              "'Product'[Division ABC Percentile] > .5, \"6\",",
              "'Product'[Division ABC Percentile] > .4, \"5\",",
              "'Product'[Division ABC Percentile] > .3, \"4\",",
              "'Product'[Division ABC Percentile] > .2, \"3\",",
              "'Product'[Division ABC Percentile] > .1, \"2\",",
              "\"1\"",
              ")"
            ],
            "sortByColumn": "Division ABC Decile Sort"
          },
          {
            "type": "calculated",
            "name": "HBI ABC Rank",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "SWITCH(TRUE(), ",
              "'Product'[Sbu_Desc] IN {\"HA Apparel\", \"HA Bras N Things\", \"HA Sheridan\",\"Champion Europe\", \"MFB Europe\"}, BLANK(),",
              "LEFT('Product'[Sbu_Desc],4) = \"HEI-\", BLANK(),",
              "ISBLANK( RELATED( 'SKU Statistics'[HBIRank] ) ), -1,",
              "RELATED( 'SKU Statistics'[HBIRank] )",
              ")"
            ],
            "formatString": "#,0"
          },
          {
            "type": "calculated",
            "name": "Division ABC Rank",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "SWITCH(TRUE(), ",
              "'Product'[Sbu_Desc] IN {\"HA Apparel\", \"HA Bras N Things\", \"HA Sheridan\",\"Champion Europe\", \"MFB Europe\"}, BLANK(),",
              "LEFT('Product'[Sbu_Desc],4) = \"HEI-\", BLANK(),",
              "ISBLANK( RELATED( 'SKU Statistics'[DivisionRank] ) ), -1,",
              "RELATED( 'SKU Statistics'[DivisionRank] )",
              ")"
            ],
            "formatString": "#,0"
          },
          {
            "type": "calculated",
            "name": "LCA Disco Date Fiscal Year",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "isHidden": true,
            "expression": [
              "",
              "LOOKUPVALUE('Calendar'[Fiscal Yr], 'Calendar'[Day Date], 'Product'[LCA Disco Date])"
            ]
          },
          {
            "type": "calculated",
            "name": "LCA Disco Date Fiscal Qtr",
            "dataType": "string",
            "isDataTypeInferred": true,
            "isHidden": true,
            "expression": [
              "",
              "LOOKUPVALUE('Calendar'[Fiscal Qtr], 'Calendar'[Day Date], 'Product'[LCA Disco Date])"
            ]
          },
          {
            "type": "calculated",
            "name": "LCA Disco Date Fiscal Month",
            "dataType": "string",
            "isDataTypeInferred": true,
            "isHidden": true,
            "expression": [
              "",
              "LOOKUPVALUE('Calendar'[Fiscal Month Name], 'Calendar'[Day Date], 'Product'[LCA Disco Date])"
            ]
          },
          {
            "type": "calculated",
            "name": "First Inventory Date",
            "dataType": "dateTime",
            "isDataTypeInferred": true,
            "expression": "RELATED('SKU Dates'[SKU Global First Inventory Date])",
            "formatString": "Short Date",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"DateTimeShortDatePattern\" />"
              }
            ]
          },
          {
            "type": "calculated",
            "name": "Last Inventory Date",
            "dataType": "dateTime",
            "isDataTypeInferred": true,
            "expression": "RELATED('SKU Dates'[SKU Global Last Inventory Date])",
            "formatString": "Short Date",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"DateTimeShortDatePattern\" />"
              }
            ]
          },
          {
            "type": "calculated",
            "name": "First Ship Date",
            "dataType": "dateTime",
            "isDataTypeInferred": true,
            "expression": "RELATED('SKU Dates'[SKU Global First Ship Date])"
          },
          {
            "type": "calculated",
            "name": "Last Ship Date",
            "dataType": "dateTime",
            "isDataTypeInferred": true,
            "expression": [
              "RELATED('SKU Dates'[SKU Global Last Ship Date])",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "First Inventory Year",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "IF (",
              "    ISBLANK (",
              "        LOOKUPVALUE (",
              "            'Calendar'[Fiscal Yr],",
              "            'Calendar'[As of Date], 'Product'[First Inventory Date]",
              "        )",
              "    ),",
              "    YEAR ( 'Product'[First Inventory Date] ),",
              "    LOOKUPVALUE (",
              "        'Calendar'[Fiscal Yr],",
              "        'Calendar'[As of Date], 'Product'[First Inventory Date]",
              "    )",
              ")",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "First Inventory Month",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "IF (",
              "    ISBLANK (",
              "        LOOKUPVALUE (",
              "            'Calendar'[Fiscal Month Name],",
              "            'Calendar'[As of Date], 'Product'[First Inventory Date]",
              "        )",
              "    ),",
              "    FORMAT ( 'Product'[First Inventory Date], \"mmm\" ),",
              "    LOOKUPVALUE (",
              "        'Calendar'[Fiscal Month Name],",
              "        'Calendar'[As of Date], 'Product'[First Inventory Date]",
              "    )",
              ")",
              ""
            ],
            "sortByColumn": "First Inventory Month Num"
          },
          {
            "type": "calculated",
            "name": "First Inventory Month Num",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "isHidden": true,
            "expression": [
              "",
              "IF (",
              "    ISBLANK (",
              "        LOOKUPVALUE (",
              "            'Calendar'[Fiscal Month Num],",
              "            'Calendar'[As of Date], 'Product'[First Inventory Date]",
              "        )",
              "    ),",
              "    MONTH ( 'Product'[First Inventory Date] ),",
              "    LOOKUPVALUE (",
              "        'Calendar'[Fiscal Month Num],",
              "        'Calendar'[As of Date], 'Product'[First Inventory Date]",
              "    )",
              ")",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "First Ship Year",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "IF (",
              "    ISBLANK (",
              "        LOOKUPVALUE (",
              "            'Calendar'[Fiscal Yr],",
              "            'Calendar'[As of Date], 'Product'[First Ship Date]",
              "        )",
              "    ),",
              "    YEAR ( 'Product'[First Ship Date] ),",
              "    LOOKUPVALUE (",
              "        'Calendar'[Fiscal Yr],",
              "        'Calendar'[As of Date], 'Product'[First Ship Date]",
              "    )",
              ")",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "First Ship Month",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "IF (",
              "    ISBLANK (",
              "        LOOKUPVALUE (",
              "            'Calendar'[Fiscal Month Name],",
              "            'Calendar'[As of Date], 'Product'[First Ship Date]",
              "        )",
              "    ),",
              "    FORMAT ( 'Product'[First Ship Date], \"mmm\" ),",
              "    LOOKUPVALUE (",
              "        'Calendar'[Fiscal Month Name],",
              "        'Calendar'[As of Date], 'Product'[First Ship Date]",
              "    )",
              ")"
            ],
            "sortByColumn": "First Ship Month Num"
          },
          {
            "type": "calculated",
            "name": "First Ship Month Num",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "isHidden": true,
            "expression": [
              "",
              "IF (",
              "    ISBLANK (",
              "        LOOKUPVALUE (",
              "            'Calendar'[Fiscal Month Num],",
              "            'Calendar'[As of Date], 'Product'[First Ship Date]",
              "        )",
              "    ),",
              "    MONTH ( 'Product'[First Ship Date] ),",
              "    LOOKUPVALUE (",
              "        'Calendar'[Fiscal Month Num],",
              "        'Calendar'[As of Date], 'Product'[First Ship Date]",
              "    )",
              ")"
            ]
          },
          {
            "type": "calculated",
            "name": "Last Inventory Year",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "IF (",
              "    ISBLANK (",
              "        LOOKUPVALUE (",
              "            'Calendar'[Fiscal Yr],",
              "            'Calendar'[As of Date], 'Product'[Last Inventory Date]",
              "        )",
              "    ),",
              "    YEAR ( 'Product'[Last Inventory Date] ),",
              "    LOOKUPVALUE (",
              "        'Calendar'[Fiscal Yr],",
              "        'Calendar'[As of Date], 'Product'[Last Inventory Date]",
              "    )",
              ")"
            ]
          },
          {
            "type": "calculated",
            "name": "Last Inventory Month",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "IF (",
              "    ISBLANK (",
              "        LOOKUPVALUE (",
              "            'Calendar'[Fiscal Month Name],",
              "            'Calendar'[As of Date], 'Product'[Last Inventory Date]",
              "        )",
              "    ),",
              "    FORMAT ( 'Product'[Last Inventory Date], \"mmm\" ),",
              "    LOOKUPVALUE (",
              "        'Calendar'[Fiscal Month Name],",
              "        'Calendar'[As of Date], 'Product'[Last Inventory Date]",
              "    )",
              ")"
            ],
            "sortByColumn": "Last Inventory Month Num"
          },
          {
            "type": "calculated",
            "name": "Last Inventory Month Num",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "isHidden": true,
            "expression": [
              "",
              "IF (",
              "    ISBLANK (",
              "        LOOKUPVALUE (",
              "            'Calendar'[Fiscal Month Num],",
              "            'Calendar'[As of Date], 'Product'[Last Inventory Date]",
              "        )",
              "    ),",
              "    MONTH ( 'Product'[Last Inventory Date] ),",
              "    LOOKUPVALUE (",
              "        'Calendar'[Fiscal Month Num],",
              "        'Calendar'[As of Date], 'Product'[Last Inventory Date]",
              "    )",
              ")"
            ]
          },
          {
            "type": "calculated",
            "name": "Last Ship Year",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "IF (",
              "    ISBLANK (",
              "        LOOKUPVALUE (",
              "            'Calendar'[Fiscal Yr],",
              "            'Calendar'[As of Date], 'Product'[Last Ship Date]",
              "        )",
              "    ),",
              "    YEAR ( 'Product'[Last Ship Date] ),",
              "    LOOKUPVALUE (",
              "        'Calendar'[Fiscal Yr],",
              "        'Calendar'[As of Date], 'Product'[Last Ship Date]",
              "    )",
              ")"
            ]
          },
          {
            "type": "calculated",
            "name": "Last Ship Month",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "IF (",
              "    ISBLANK (",
              "        LOOKUPVALUE (",
              "            'Calendar'[Fiscal Month Name],",
              "            'Calendar'[As of Date], 'Product'[Last Ship Date]",
              "        )",
              "    ),",
              "    FORMAT ( 'Product'[Last Ship Date], \"mmm\" ),",
              "    LOOKUPVALUE (",
              "        'Calendar'[Fiscal Month Name],",
              "        'Calendar'[As of Date], 'Product'[Last Ship Date]",
              "    )",
              ")"
            ],
            "sortByColumn": "Last Ship Month Num"
          },
          {
            "type": "calculated",
            "name": "Last Ship Month Num",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "isHidden": true,
            "expression": [
              "",
              "IF (",
              "    ISBLANK (",
              "        LOOKUPVALUE (",
              "            'Calendar'[Fiscal Month Num],",
              "            'Calendar'[As of Date], 'Product'[Last Ship Date]",
              "        )",
              "    ),",
              "    MONTH ( 'Product'[Last Ship Date] ),",
              "    LOOKUPVALUE (",
              "        'Calendar'[Fiscal Month Num],",
              "        'Calendar'[As of Date], 'Product'[Last Ship Date]",
              "    )",
              ")"
            ]
          },
          {
            "type": "calculated",
            "name": "SKU Sales Duration",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "RELATED('SKU Dates'[SKU Sales Duration])\t"
          },
          {
            "type": "calculated",
            "name": "SKU Inventory Duration",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "RELATED('SKU Dates'[SKU Inventory Duration])"
          },
          {
            "type": "calculated",
            "name": "SKU FQ Sales Duration",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "SWITCH(",
              "    TRUE(),",
              "    ISBLANK('Product'[LCA Disco Date]),BLANK(),",
              "    ISBLANK('Product'[First Ship Date]),BLANK(),",
              "    DATEDIFF('Product'[First Ship Date], 'Product'[LCA Disco Date], DAY)",
              ")"
            ]
          },
          {
            "type": "calculated",
            "name": "SKU FQ Inventory Duration",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "SWITCH(",
              "    TRUE(),",
              "    ISBLANK('Product'[First Inventory Date]),BLANK(),",
              "    ISBLANK('Product'[LCA Disco Date]),BLANK(),",
              "    DATEDIFF('Product'[First Inventory Date], 'Product'[LCA Disco Date], DAY)",
              ")"
            ]
          },
          {
            "type": "calculated",
            "name": "HBI ABC Decile Sort",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "isHidden": true,
            "expression": [
              "",
              "SWITCH(TRUE(),",
              "ISBLANK('Product'[HBI ABC Percentile]), BLANK(),",
              "'Product'[HBI ABC] = \"No Sales & New\", 12,",
              "'Product'[HBI ABC] = \"No Sales & Established\", 11,",
              "'Product'[HBI ABC Percentile] > .9, 10,",
              "'Product'[HBI ABC Percentile] > .8, 9,",
              "'Product'[HBI ABC Percentile] > .7, 8,",
              "'Product'[HBI ABC Percentile] > .6, 7,",
              "'Product'[HBI ABC Percentile] > .5, 6,",
              "'Product'[HBI ABC Percentile] > .4, 5,",
              "'Product'[HBI ABC Percentile] > .3, 4,",
              "'Product'[HBI ABC Percentile] > .2, 3,",
              "'Product'[HBI ABC Percentile] > .1, 2,",
              "1",
              ")"
            ]
          },
          {
            "type": "calculated",
            "name": "Division ABC Decile Sort",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "isHidden": true,
            "expression": [
              "",
              "SWITCH(TRUE(),",
              "ISBLANK('Product'[Division ABC Percentile]), BLANK(),",
              "'Product'[Division ABC] = \"No Sales & New\", 12,",
              "'Product'[Division ABC] = \"No Sales & Established\", 11,",
              "'Product'[Division ABC Percentile] > .9, 10,",
              "'Product'[Division ABC Percentile] > .8, 9,",
              "'Product'[Division ABC Percentile] > .7, 8,",
              "'Product'[Division ABC Percentile] > .6, 7,",
              "'Product'[Division ABC Percentile] > .5, 6,",
              "'Product'[Division ABC Percentile] > .4, 5,",
              "'Product'[Division ABC Percentile] > .3, 4,",
              "'Product'[Division ABC Percentile] > .2, 3,",
              "'Product'[Division ABC Percentile] > .1, 2,",
              "1",
              ")",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "Newness",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "IF( DATEDIFF('Product'[First Inventory Date],NOW(),DAY) > 181,\"New\", \"Established\")",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "Winning Portfolio Flag",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "SWITCH(TRUE(),",
              "    AND(RELATED('WP SKU List'[Division]) = \"Retail Outlets\", RELATED('WP SKU List'[IsActive]) = \"Yes\"), \"R\",",
              "    AND(RELATED('WP SKU List'[Division]) <> \"Retail Outlets\", RELATED('WP SKU List'[IsActive]) = \"Yes\"), \"Y\",",
              "    \"N\"",
              ")"
            ]
          },
          {
            "type": "calculated",
            "name": "SKUGlobal Create Date",
            "dataType": "dateTime",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "RELATED('SKU Creates'[Create_Date])"
            ]
          },
          {
            "name": "SCAGlobal",
            "dataType": "string",
            "sourceColumn": "SCAGlobal"
          },
          {
            "type": "calculated",
            "name": "SBU_SCA",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "'Product'[Sbu_Desc] & \"_\" & 'Product'[SCAGlobal]"
            ]
          },
          {
            "type": "calculated",
            "name": "SKU Create Year",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "IF (",
              "    ISBLANK (",
              "        LOOKUPVALUE (",
              "            'Calendar'[Fiscal Yr],",
              "            'Calendar'[As of Date], 'Product'[SKU Create Date]",
              "        )",
              "    ),",
              "    YEAR ( 'Product'[SKU Create Date] ),",
              "    LOOKUPVALUE (",
              "        'Calendar'[Fiscal Yr],",
              "        'Calendar'[As of Date], 'Product'[SKU Create Date]",
              "    )",
              ")",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "SKU Create Month",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "IF (",
              "    ISBLANK (",
              "        LOOKUPVALUE (",
              "            'Calendar'[Fiscal Month Name],",
              "            'Calendar'[As of Date], 'Product'[SKU Create Date]",
              "        )",
              "    ),",
              "    FORMAT ( 'Product'[SKU Create Date], \"mmm\" ),",
              "    LOOKUPVALUE (",
              "        'Calendar'[Fiscal Month Name],",
              "        'Calendar'[As of Date], 'Product'[SKU Create Date]",
              "    )",
              ")",
              ""
            ],
            "sortByColumn": "SKU Create Month Num"
          },
          {
            "type": "calculated",
            "name": "SKU Create Month Num",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "isHidden": true,
            "expression": [
              "",
              "IF (",
              "    ISBLANK (",
              "        LOOKUPVALUE (",
              "            'Calendar'[Fiscal Month Num],",
              "            'Calendar'[As of Date], 'Product'[SKU Create Date]",
              "        )",
              "    ),",
              "    MONTH ( 'Product'[SKU Create Date] ),",
              "    LOOKUPVALUE (",
              "        'Calendar'[Fiscal Month Num],",
              "        'Calendar'[As of Date], 'Product'[SKU Create Date]",
              "    )",
              ")",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "SKU Create Date",
            "dataType": "dateTime",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "CALCULATE(",
              "    MIN( 'Product'[SKUGlobal Create Date]),",
              "    ALLEXCEPT('Product', 'Product'[SKUCount])",
              ")"
            ]
          },
          {
            "type": "calculated",
            "name": "SKU Create Decade",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "VAR Firstthree = LEFT('Product'[SKU Create Year], 3) ",
              "VAR Decade = Firstthree & \"0 - \"& Firstthree &\"9\" ",
              "RETURN",
              "IF(",
              "len(Firstthree) > 0, Decade",
              ")"
            ]
          },
          {
            "type": "calculated",
            "name": "Gender Age_ Product Group",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "'Product'[Gender_Age_Desc] & \" \" & 'Product'[Product_Group_Desc]"
            ]
          },
          {
            "type": "calculated",
            "name": "SCA First Ship Date",
            "dataType": "dateTime",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "RELATED('SKU Dates'[SCA Global First Ship Date])"
            ]
          },
          {
            "type": "calculated",
            "name": "SCA Last Ship Date",
            "dataType": "dateTime",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "RELATED('SKU Dates'[SCA Global Last Ship Date])"
            ]
          },
          {
            "type": "calculated",
            "name": "SCA First Inventory Date",
            "dataType": "dateTime",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "RELATED('SKU Dates'[SCA Global First Inventory Date])"
            ]
          },
          {
            "type": "calculated",
            "name": "SCA Last Inventory Date",
            "dataType": "dateTime",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "RELATED('SKU Dates'[SCA Global Last Inventory Date])"
            ]
          },
          {
            "type": "calculated",
            "name": "Lifecycle Status",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              " ",
              "VAR DiscoDateAge = DATEDIFF('Product'[LCA Disco Date],NOW(),MONTH)",
              "VAR FirstShipDateAge = DATEDIFF('Product'[First Ship Date],NOW(),MONTH)",
              "RETURN",
              "SWITCH(TRUE(),",
              "\t\t\t IF(ISBLANK(DiscoDateAge) && ISBLANK(FirstShipDateAge),TRUE(),FALSE()),\"New\",\t\t\t ",
              "\t\t\t IF(NOT(ISBLANK(DiscoDateAge)) && DiscoDateAge  >=0 &&  DiscoDateAge <= 12,TRUE(),FALSE()), \"Phase Out\",              ",
              "\t\t\t IF(NOT(ISBLANK(DiscoDateAge)) && DiscoDateAge > 12,TRUE(),FALSE()) , \"Obsolete\",                          \t\t\t ",
              "\t\t\t IF(NOT(ISBLANK(FirstShipDateAge)) && FirstShipDateAge >=0 && FirstShipDateAge <=6,TRUE(),FALSE()), \"New\",             ",
              "\t\t\t IF(NOT(ISBLANK(FirstShipDateAge)) && FirstShipDateAge > 6,TRUE(),FALSE()),\"CarryOver\",\t\t\t ",
              "\t\t\t ISBLANK(FirstShipDateAge),\"New\",             ",
              "\t\t\t Blank()",
              "\t\t\t )"
            ]
          },
          {
            "type": "calculated",
            "name": "DiscoDate Aging",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "VAR DiscoDateAge = DATEDIFF('Product'[LCA Disco Date],NOW(),MONTH)",
              "RETURN",
              "SWITCH(TRUE(),",
              "\t\tDiscoDateAge > 0 && DiscoDateAge <= 6, \"0-6 months\",",
              "\t\tDiscoDateAge > 6 && DiscoDateAge <= 12, \"6-12 months\",\t\t",
              "\t\tDiscoDateAge > 12 && DiscoDateAge <= 18, \"12-18 months\",\t\t",
              "\t\tDiscoDateAge > 18, \"Over 18 months\",",
              "\t\tBlank()",
              ")"
            ]
          },
          {
            "type": "calculated",
            "name": "Growth Team Dynamic Desc",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": " SWITCH(SELECTEDVALUE('Business Hierarchy'[Division]), \"socks\", MAX('Product'[Category_Desc]), \"Kid's UW\",  MAX('Product'[Category_Desc]),\"US Champion Male\",  MAX('Product'[Product_Group_Desc]),\"Bali Womens\",  MAX('Product'[Product_Group_Desc]),\"Playtex Womens\",  MAX('Product'[Product_Group_Desc]),\"US Champion Female\",  MAX('Product'[Product_Group_Desc]),\"Hanes Womens\",  MAX('Product'[Product_Group_Desc]),\"Polo\",  MAX('Product'[Product_Group_Desc]),\"Men's UW\",  MAX('Product'[Category_Desc]),\"Maidenform Womens\",  MAX('Product'[Product_Group_Desc]),\"Other Womens\",  MAX('Product'[Product_Group_Desc]),\"Canada - IW\",  MAX('Product'[Product_Group_Desc]),\"Hoisery\",  MAX('Product'[Category_Desc]),\"Hanes Apparel Consumer\",  MAX('Product'[Category_Desc]),\"Hanes Activewear Printwear\",  MAX('Product'[Category_Desc]),\"Mass Brands SA\",  MAX('Product'[Category_Desc]),\"Champion Europe\",  MAX('Product'[Product_Group_Desc]),\"HA Apparel\",  MAX('Product'[Product_Group_Desc]),\"HA Bras N Things\",  MAX('Product'[Product_Group_Desc]),\"HA Sheridan\",  MAX('Product'[Category_Desc]),max('Product'[Product_Group_Desc]))"
          },
          {
            "type": "calculated",
            "name": "Inventory Strategy",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "IF(ISBLANK(RELATED('SCA Strategy'[InventoryStrategy])), \"UNMAPPED\",RELATED('SCA Strategy'[InventoryStrategy]))"
          },
          {
            "type": "calculated",
            "name": "Style_Color",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "'Product'[Style_Num] & 'Product'[Color_Code]"
          },
          {
            "type": "calculated",
            "name": "Style_Color_Attribute",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "'Product'[Style_Num] & 'Product'[Color_Code] & 'Product'[Attribution_Code]"
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = Value.NativeQuery(#\"SQL Server HBIDW\", \"",
                "\tSelect",
                "      b.Division_Group",
                "\t  --,Dim_Style_Id",
                "      ,Style_Num",
                "      ,Brand_Name",
                "      ,Category_Desc",
                "      ,Color_Category_Desc",
                "      ,Fabrication",
                "      --,Marketing_Execution_Desc",
                "      --,Marketing_Lob_Group",
                "      --,Marketing_Resp_2",
                "      ,Marketing_Resp_3",
                "      ,Merchandising_putup",
                "      ,Product_Line_Desc",
                "      ,Representative_Style_Num",
                "      ,Silhouette",
                "      ,Subbrand_Desc",
                "      ,Subcategory_Desc",
                "      ,Brand_Group_Desc",
                "      ,Co_Brander_Desc",
                "      ,Product_Group_Desc",
                "      ,Brand_Ownership_Group_Desc",
                "      --,Skurat_Exception_Group_Code",
                "      --,Skurat_Exception_Group_Desc",
                "      --,Company_Code",
                "      ,Gender_Age_Desc",
                "      ,Gender_Desc",
                "      ,Primary_Channel_Desc",
                "      --,Lifestyle_Desc",
                "      ,Fiber_Type_Desc",
                "      ,Fiber_Finish_Desc",
                "      ,b.Business_Segment_Hierarchy_id",
                "      ,b.Business_seg_Desc",
                "      ,Sbu_Desc",
                "      ,Dummy_Style_Ind",
                "      ,Gender_Sort",
                "      ,Gender_Age_Sort",
                "      ,Gender_Age_Parent_Desc",
                "      ,Gender_Age_Parent_Sort",
                "      ,SubBrand_Collection",
                "      --,Item_id",
                "      --,SKU",
                "      ,Cup_Size",
                "      ,Size_Code",
                "      ,Size_Desc",
                "      ,x_Size",
                "      ,Color_Name",
                "      ,Attribution_Code",
                "      ,Garm_Per_Pkg_Qty",
                "      ,Pack_code",
                "      ,Current_Std_Cost",
                "      --,SKU_Desc",
                "      ,Color_Shade",
                "      ,Color_Code",
                "      ,Color_Mnemon_Code",
                "      ,Size_Mnemon_Code",
                "      ,Size_Num",
                "      ,Capacity_Group",
                "      ,UPC_Code",
                "      ,Style_Group",
                "      ,Inv_Disposition_Route",
                "      ,Class_Code_LV1",
                "      ,Class_Code_LV1_Desc",
                "      ,Class_Code_LV2",
                "      ,Class_Code_LV2_Desc",
                "      ,Class_Code_LV3",
                "      ,Class_Code_LV3_Desc",
                "      --,Reporting_Sort_Order_LV1",
                "      --,Reporting_Sort_Order_LV2",
                "      --,Reporting_Sort_Order_LV3",
                "      ,Classification_Code_Hier_ID",
                "      ,SAP_GRID_VALUE",
                "      ,SAP_Material_Num",
                "      --,Mfg_Style",
                "      ,Legecy_Class_Code",
                "      ,Legecy_Class_Description",
                "      ,SAP_Profit_Center_num",
                "      ,Lrp_Style",
                "      ,b.Dim_Item_id",
                "      ,Master_Grmt_Style",
                "      ,Selling_Style",
                "      ,Projected_Obsolete_Date",
                "      --,S3_SKU",
                "      ,Style_Desc",
                "      --,Style_Desc_2",
                "      ,Range_CD",
                "      ,Range_Desc",
                "      ,Item_Create_Date",
                "      ,Division_Code",
                "      ,Division_Desc",
                "\t  \t,CASE ",
                "\t\t\tWHEN b.Sbu_Desc = 'Socks' THEN CONCAT(b.Selling_Style , '_' , b.UPC_Code)",
                "\t\t\tWHEN b.Sbu_Desc IN ('HA Apparel', 'HA Sheridan', 'HA Bras N Things') THEN CONCAT(b.Division_Desc, b.Style_Num , '_' , b.Color_Code , '_' , b.Attribution_Code ) --HAA can have the same EAN between business units, so we use division desc to mimic how SKU count takes a count for each EAN in each BU; thus we only strip out size",
                "\t\t\tWHEN b.Sbu_Desc = 'Champion Europe' THEN CONCAT(b.Representative_Style_Num, '_', b.Color_Code) --rep style matches the style in the S3 SKU, which is the field used in SKU Count",
                "\t\t\tELSE CONCAT(b.Style_Num , '_' , b.Color_Code, '_', b.Attribution_Code )",
                "\t    END AS SCAGlobal",
                "\t  ,case ",
                "\t\twhen Sbu_Desc in ('Socks', 'HA Apparel', 'HA Sheridan', 'HA Bras N Things') then b.SKU",
                "\t\twhen Sbu_Desc = 'Alternative Apparel' then  b.Style_Num + '_' + b.Color_Code + '_' + Size_Code + '_'",
                "\t\twhen Sbu_Desc = 'Champion Europe' then b.S3_SKU",
                "\t\telse b.SKU_Desc",
                "\t   end as SKUGlobal",
                "--=======================================================================",
                "----------------SKU Count Logic provided by each business----------------",
                "--=======================================================================",
                "\t  ,CASE",
                "--------------Hanes Europe--------------------------------------------------------------------------------------------------------------",
                "\t\t\tWHEN c.SBU_Division_Group_desc = 'Hanes Europe' THEN --Check to see if S3 SKU is populated with 15 characters and can be used",
                "\t\t\t\tCASE",
                "\t\t\t\t\tWHEN len(b.S3_SKU) = 15 THEN --it can be used, and we need to remove the pack variant",
                "\t\t\t\t\t\tconcat( left(b.S3_SKU, 5) , '_' , --style",
                "\t\t\t\t\t\t\t\tleft( ",
                "\t\t\t\t\t\t\t\t\tright( b.S3_SKU , len( b.S3_SKU) - 10),",
                "\t\t\t\t\t\t\t\t\t3) --color",
                "\t\t\t\t\t\t\t\t,'_',",
                "\t\t\t\t\t\t\t\tleft( ",
                "\t\t\t\t\t\t\t\t\tright( b.S3_SKU , len( b.S3_SKU) - 13),",
                "\t\t\t\t\t\t\t\t\t3) --size",
                "\t\t\t\t\t\t\t  )",
                "\t\t\t\t\tWHEN b.Division_Group = 'dbag' --Germany SKU needs to use Color_Mnemon code",
                "\t\t\t\t\tTHEN concat(b.Style_Num , '_' , b.Color_Mnemon_Code , '_' , b.Size_Num , '_' , b.Cup_Size )",
                "\t\t\t\t\tELSE b.SKU_Desc",
                "\t\t\t\tEND",
                "",
                "-------------Socks-------------------------------------------------------------------------------------------------------------",
                "\t\t\tWHEN upper(",
                "\t\t\t\t\tCASE ",
                "\t\t\t\t\t\tWHEN c.strategic_business_unit_desc = '' OR c.strategic_business_unit_desc is null ",
                "\t\t\t\t\t\tTHEN b.Sbu_Desc",
                "\t\t\t\t\t\tELSE c.strategic_business_unit_desc",
                "\t\t\t\t\tEND",
                "\t\t\t\t) = 'SOCKS' ",
                "\t\t\tTHEN concat( b.Selling_Style , b.UPC_Code )",
                "",
                "---------Bookstore SA------------------------------------------------------------------------------------------------------------",
                "\t\t\tWHEN upper(",
                "\t\t\t\t\tCASE ",
                "\t\t\t\t\t\tWHEN c.SBU_Division_SubGroup_desc = '' OR c.SBU_Division_SubGroup_desc is null ",
                "\t\t\t\t\t\tTHEN b.Sbu_Desc",
                "\t\t\t\t\t\tELSE c.SBU_Division_SubGroup_desc",
                "\t\t\t\t\tEND",
                "\t\t\t\t) = 'BOOKSTORE SA' ",
                "\t\t\tTHEN ",
                "\t\t\t\tCASE",
                "\t\t\t\t\tWHEN upper(b.Attribution_Code) = 'UNMAPPED'",
                "\t\t\t\t\tTHEN b.SKU_Desc",
                "\t\t\t\t\tELSE 'SKIP'",
                "\t\t\t\tEND",
                "---------CHAMPION SA and LIFESTYLE BRANDS SA--------------------------------------------------------------------------------------",
                "\t\t\tWHEN upper(",
                "\t\t\t\t\tCASE ",
                "\t\t\t\t\t\tWHEN c.SBU_Division_SubGroup_desc = '' OR c.SBU_Division_SubGroup_desc is null ",
                "\t\t\t\t\t\tTHEN b.Sbu_Desc",
                "\t\t\t\t\t\tELSE c.SBU_Division_SubGroup_desc",
                "\t\t\t\t\tEND",
                "\t\t\t\t) IN ('CHAMPION SA','LIFESTYLE BRANDS SA')",
                "\t\t\tTHEN ",
                "\t\t\t\tCASE",
                "\t\t\t\t\tWHEN upper(b.Attribution_Code) = 'UNMAPPED' OR len(b.Attribution_Code)=6 OR b.Attribution_Code='------'",
                "\t\t\t\t\tTHEN b.SKU_Desc",
                "\t\t\t\t\tELSE 'SKIP'",
                "\t\t\t\tEND",
                "-----------Champion Europe uses S3 SKU only-------------------------------------------------------------------------------",
                "\t\t\tWHEN b.Division_Group = 'che'",
                "\t\t\tTHEN",
                "\t\t\t\tCASE --either there are three delimiters or - rarely - four delimiters; this will deal with both situations",
                "\t\t\t\t\tWHEN LEN(b.S3_SKU) - len(REPLACE(b.S3_SKU, '_', '')) = 3 --three delimiters",
                "\t\t\t\t\t\tTHEN concat (",
                "\t\t\t\t\t\tSUBSTRING",
                "\t\t\t\t\t\t(",
                "\t\t\t\t\t\t\tb.s3_sku,1,",
                "\t\t\t\t\t\t\tcharindex('_',b.s3_sku,charindex('_',b.s3_sku)+1)",
                "\t\t\t\t\t\t),",
                "\t\t\t\t\t\tSUBSTRING",
                "\t\t\t\t\t\t(",
                "\t\t\t\t\t\t\tb.s3_sku,charindex('_',b.s3_sku,charindex('_',b.s3_sku,charindex('_',b.s3_sku)+1)+1)+1,",
                "\t\t\t\t\t\t\tlen(b.s3_sku)",
                "\t\t\t\t\t\t)",
                "\t\t\t\t\t)",
                "\t\t\t\t\t",
                "\t\t\t\t\tWHEN LEN(s3_SKU) - len(REPLACE(S3_SKU, '_', '')) = 4 --four delimiters",
                "\t\t\t\t\t\tTHEN concat( ",
                "\t\t\t\t\t\t\t\tleft(b.S3_SKU, ",
                "\t\t\t\t\t\t\t\tcharindex('_', b.S3_SKU,",
                "\t\t\t\t\t\t\t\t\tcharindex('_', b.S3_SKU)+1) --find the second delimiter",
                "\t\t\t\t\t\t\t\t\t),",
                "\t\t\t\t\t\t\t\tright(b.S3_SKU,",
                "\t\t\t\t\t\t\t\tcharindex('_', b.S3_SKU,",
                "\t\t\t\t\t\t\t\t\tcharindex('_', b.S3_SKU,",
                "\t\t\t\t\t\t\t\t\t\tcharindex('_', b.S3_SKU,",
                "\t\t\t\t\t\t\t\t\t\t\tcharindex('_', b.S3_SKU)+1)+1)+1)+1",
                "\t\t\t\t\t\t\t\t)",
                "\t\t\t\t\t\t\t)",
                "\t\t\t\t\tELSE b.S3_SKU",
                "\t\t\t\tEND",
                "",
                "----------------AA and HAA use SKU, not SKU_Desc---------------------------------------------------------------------------------------",
                "\t\t\tWHEN b.Division_Group = 'aa' or c.SBU_Division_Group_desc = 'Hanes Australasia'",
                "\t\t\tTHEN b.SKU",
                "\t\t\tELSE",
                "\t\t\t\tCASE",
                "\t\t\t\t\tWHEN b.SKU_Desc = '' or b.SKU_Desc is null ",
                "\t\t\t\t\tTHEN b.SKU",
                "\t\t\t\t\tELSE b.SKU_Desc",
                "\t\t\t\tEND",
                "\t\tEND AS SKUCount",
                "--=======================================================================",
                "----------------END SKU COUNT--------------------------------------------",
                "--=======================================================================",
                "",
                "from (",
                "\tselect distinct dim_item_id ",
                "\tfrom dbo.Fact_Inventory ",
                "\twhere As_of_Date_int>=(20181228)",
                "\tunion ",
                "\tselect distinct dim_item_id ",
                "\tfrom dbo.fact_sales_sku",
                "\twhere As_of_Date_int>=(20181228)",
                "\t) a",
                "left join HBIDW.dbo.product_view b ",
                "\t\ton a.Dim_Item_id=b.Dim_Item_id",
                "left join EDM.dbo.Business_Seg_Hierarchy_Samba_vw c",
                "\t\ton b.Business_Segment_Hierarchy_id = c.business_seg_hierarchy_id",
                "where b.Dim_Item_id is not null",
                "",
                "\")",
                "in",
                "    Source"
              ]
            }
          }
        ],
        "measures": [
          {
            "name": "Min LCA Class",
            "expression": [
              "",
              "VAR minclasscode = MIN('Product'[Class_Code_LV3])",
              "VAR minclassdesc = LOOKUPVALUE('Historical Classifications'[Class_Code_LV3_Desc],'Historical Classifications'[Class_Code_LV3], minclasscode)",
              "RETURN",
              "minclassdesc"
            ]
          },
          {
            "name": "Selling Type Summarized",
            "expression": [
              "",
              "SELECTEDVALUE(",
              "    'Product'[Selling Type],",
              "    CONCATENATEX(SUMMARIZE('Product','Product'[Selling Type]), 'Product'[Selling Type], \", \",'Product'[Selling Type],ASC)",
              ")"
            ],
            "displayFolder": "SummarizedFields"
          },
          {
            "name": "LCA Class Summarized",
            "expression": [
              "",
              "SELECTEDVALUE(",
              "    'Product'[Class_Code_LV3_Desc],",
              "    CONCATENATEX(SUMMARIZE('Product','Product'[Class_Code_LV3_Desc]), 'Product'[Class_Code_LV3_Desc], \", \",'Product'[Class_Code_LV3_Desc],ASC)",
              ")"
            ],
            "displayFolder": "SummarizedFields"
          },
          {
            "name": "Winning Portfolio Flag Summarized",
            "expression": [
              "",
              "SELECTEDVALUE(",
              "    'Product'[Winning Portfolio Flag],",
              "    CONCATENATEX(SUMMARIZE('Product','Product'[Winning Portfolio Flag]), 'Product'[Winning Portfolio Flag], \", \",'Product'[Winning Portfolio Flag],ASC)",
              ")"
            ],
            "displayFolder": "SummarizedFields"
          },
          {
            "name": "Min First Inventory Date",
            "expression": [
              "",
              "MIN('Product'[First Inventory Date])"
            ],
            "displayFolder": "SummarizedFields"
          },
          {
            "name": "Max Last Ship Date",
            "expression": [
              "",
              "MAX('Product'[Last Ship Date])"
            ],
            "displayFolder": "SummarizedFields"
          },
          {
            "name": "Marketing Resp 4 Summarized",
            "expression": [
              "",
              "SELECTEDVALUE(",
              "    'Product'[Marketing_Resp_3],",
              "    CONCATENATEX(SUMMARIZE('Product','Product'[Marketing_Resp_3]), 'Product'[Marketing_Resp_3], \", \",'Product'[Marketing_Resp_3],ASC",
              ")",
              ")"
            ],
            "displayFolder": "SummarizedFields"
          },
          {
            "name": "Color Count",
            "expression": [
              "",
              "VAR MaxWeekEnd = MAX('Inventory'[As_of_Date_int])",
              "RETURN",
              "COUNTROWS(",
              "    CALCULATETABLE(",
              "        DISTINCT('Product'[Color_Code]),",
              "    CROSSFILTER(Inventory[Dim_Item_id],'Product'[Dim_Item_id],Both),",
              "    'Inventory'[units] > 0,",
              "\t'Calendar'[As of Date INT] = MaxWeekEnd",
              "    )",
              ")"
            ]
          },
          {
            "name": "Attribution Count",
            "expression": [
              "",
              "VAR MaxWeekEnd = MAX('Inventory'[As_of_Date_int])",
              "RETURN",
              "COUNTROWS(",
              "    CALCULATETABLE(",
              "        DISTINCT('Product'[Attribution_Code]),",
              "    CROSSFILTER(Inventory[Dim_Item_id],'Product'[Dim_Item_id],Both),",
              "    'Inventory'[units] > 0,",
              "\t'Calendar'[As of Date INT] = MaxWeekEnd",
              "    )",
              ")"
            ]
          }
        ],
        "hierarchies": [
          {
            "name": "Style Group",
            "levels": [
              {
                "name": "Style_Group",
                "ordinal": 0,
                "column": "Style_Group"
              },
              {
                "name": "Style_Num",
                "ordinal": 1,
                "column": "Style_Num"
              },
              {
                "name": "Color_Code",
                "ordinal": 2,
                "column": "Color_Code"
              },
              {
                "name": "Size_Code",
                "ordinal": 3,
                "column": "Size_Code"
              },
              {
                "name": "Attribution_Code",
                "ordinal": 4,
                "column": "Attribution_Code"
              }
            ]
          },
          {
            "name": "Current Classification",
            "levels": [
              {
                "name": "Class_Code_LV1_Desc",
                "ordinal": 0,
                "column": "Class_Code_LV1_Desc"
              },
              {
                "name": "Class_Code_LV2_Desc",
                "ordinal": 1,
                "column": "Class_Code_LV2_Desc"
              },
              {
                "name": "Class_Code_LV3_Desc",
                "ordinal": 2,
                "column": "Class_Code_LV3_Desc"
              }
            ]
          },
          {
            "name": "XYZ",
            "levels": [
              {
                "name": "XYZ Rolling 12M",
                "ordinal": 0,
                "column": "XYZ Rolling 12M"
              },
              {
                "name": "XYZ Rolling 12M COV",
                "ordinal": 1,
                "column": "XYZ Rolling 12M COV"
              }
            ]
          },
          {
            "name": "Discontinuation Date",
            "levels": [
              {
                "name": "LCA Disco Date Fiscal Year",
                "ordinal": 0,
                "column": "LCA Disco Date Fiscal Year"
              },
              {
                "name": "LCA Disco Date Fiscal Qtr",
                "ordinal": 1,
                "column": "LCA Disco Date Fiscal Qtr"
              },
              {
                "name": "LCA Disco Date Fiscal Month",
                "ordinal": 2,
                "column": "LCA Disco Date Fiscal Month"
              },
              {
                "name": "LCA Disco Date",
                "ordinal": 3,
                "column": "LCA Disco Date"
              }
            ]
          },
          {
            "name": "FirstInventoryDate",
            "levels": [
              {
                "name": "First Inventory Year",
                "ordinal": 0,
                "column": "First Inventory Year"
              },
              {
                "name": "First Inventory Month",
                "ordinal": 1,
                "column": "First Inventory Month"
              },
              {
                "name": "First Inventory Date",
                "ordinal": 2,
                "column": "First Inventory Date"
              }
            ]
          },
          {
            "name": "FirstShipDate",
            "levels": [
              {
                "name": "First Ship Year",
                "ordinal": 0,
                "column": "First Ship Year"
              },
              {
                "name": "First Ship Month",
                "ordinal": 1,
                "column": "First Ship Month"
              },
              {
                "name": "First Ship Date",
                "ordinal": 2,
                "column": "First Ship Date"
              }
            ]
          },
          {
            "name": "LastInventoryDate",
            "levels": [
              {
                "name": "Last Inventory Year",
                "ordinal": 0,
                "column": "Last Inventory Year"
              },
              {
                "name": "Last Inventory Month",
                "ordinal": 1,
                "column": "Last Inventory Month"
              },
              {
                "name": "Last Inventory Date",
                "ordinal": 2,
                "column": "Last Inventory Date"
              }
            ]
          },
          {
            "name": "LastShipDate",
            "levels": [
              {
                "name": "Last Ship Year",
                "ordinal": 0,
                "column": "Last Ship Year"
              },
              {
                "name": "Last Ship Month",
                "ordinal": 1,
                "column": "Last Ship Month"
              },
              {
                "name": "Last Ship Date",
                "ordinal": 2,
                "column": "Last Ship Date"
              }
            ]
          },
          {
            "name": "SKU Hierarchy",
            "levels": [
              {
                "name": "Style_Num",
                "ordinal": 0,
                "column": "Style_Num"
              },
              {
                "name": "Attribution_Code",
                "ordinal": 1,
                "column": "Attribution_Code"
              },
              {
                "name": "Color_Code",
                "ordinal": 2,
                "column": "Color_Code"
              },
              {
                "name": "Size_Num",
                "ordinal": 3,
                "column": "Size_Num"
              },
              {
                "name": "SKUGlobal",
                "ordinal": 4,
                "column": "SKUGlobal"
              }
            ]
          },
          {
            "name": "SKUCreateDate",
            "levels": [
              {
                "name": "SKU Create Year",
                "ordinal": 1,
                "column": "SKU Create Year"
              },
              {
                "name": "SKU Create Month",
                "ordinal": 2,
                "column": "SKU Create Month"
              },
              {
                "name": "SKU Create Date",
                "ordinal": 3,
                "column": "SKU Create Date"
              },
              {
                "name": "SKU Create Decade",
                "ordinal": 0,
                "column": "SKU Create Decade"
              }
            ]
          }
        ]
      },
      {
        "name": "Business Hierarchy",
        "columns": [
          {
            "name": "business_seg_hierarchy_id",
            "dataType": "int64",
            "sourceColumn": "business_seg_hierarchy_id"
          },
          {
            "name": "Division_id",
            "dataType": "int64",
            "isHidden": true,
            "sourceColumn": "Division_id"
          },
          {
            "name": "BusKey",
            "dataType": "string",
            "isHidden": true,
            "sourceColumn": "BusKey"
          },
          {
            "name": "business_seg_desc",
            "dataType": "string",
            "isHidden": true,
            "sourceColumn": "business_seg_desc"
          },
          {
            "name": "strategic_business_unit_desc",
            "dataType": "string",
            "isHidden": true,
            "sourceColumn": "strategic_business_unit_desc"
          },
          {
            "name": "SBU_Division_Group_desc",
            "dataType": "string",
            "isHidden": true,
            "sourceColumn": "SBU_Division_Group_desc"
          },
          {
            "name": "SBU_Division_Group_Sort",
            "dataType": "int64",
            "isHidden": true,
            "sourceColumn": "SBU_Division_Group_Sort"
          },
          {
            "name": "SBU_Division_SubGroup_desc",
            "dataType": "string",
            "isHidden": true,
            "sourceColumn": "SBU_Division_SubGroup_desc"
          },
          {
            "name": "SBU_Division_SubGroup_Sort",
            "dataType": "int64",
            "isHidden": true,
            "sourceColumn": "SBU_Division_SubGroup_Sort"
          },
          {
            "name": "SBU_Alt_Bus_Grouping_desc",
            "dataType": "string",
            "isHidden": true,
            "sourceColumn": "SBU_Alt_Bus_Grouping_desc"
          },
          {
            "name": "SBU_Alt_Bus_Grouping_Sort",
            "dataType": "int64",
            "isHidden": true,
            "sourceColumn": "SBU_Alt_Bus_Grouping_Sort"
          },
          {
            "name": "business_seg_order",
            "dataType": "int64",
            "isHidden": true,
            "sourceColumn": "business_seg_order"
          },
          {
            "name": "reporting_sort_order",
            "dataType": "int64",
            "isHidden": true,
            "sourceColumn": "reporting_sort_order"
          },
          {
            "name": "Division",
            "dataType": "string",
            "sourceColumn": "Division"
          },
          {
            "name": "Division_sort",
            "dataType": "int64",
            "isHidden": true,
            "sourceColumn": "Division_sort"
          },
          {
            "name": "Division_Group",
            "dataType": "string",
            "sourceColumn": "Division_Group"
          },
          {
            "name": "Division_Group_sort",
            "dataType": "int64",
            "isHidden": true,
            "sourceColumn": "Division_Group_sort"
          },
          {
            "name": "Business_Group",
            "dataType": "string",
            "sourceColumn": "Business_Group"
          },
          {
            "name": "business_seg_group_sort",
            "dataType": "int64",
            "isHidden": true,
            "sourceColumn": "business_seg_group_sort"
          },
          {
            "name": "Operator",
            "dataType": "string",
            "isHidden": true,
            "sourceColumn": "Operator"
          },
          {
            "name": "currency",
            "dataType": "string",
            "isHidden": true,
            "sourceColumn": "currency"
          },
          {
            "type": "calculated",
            "name": "Global Segment",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "SWITCH(TRUE(),",
              "'Business Hierarchy'[Business_Group] = \"Innerwear\", \"Global Innerwear\",",
              "'Business Hierarchy'[Business_Group] = \"Activewear\", \"Global Activewear\",",
              "OR('Business Hierarchy'[Business_Group] = \"Discontinued Operations\",'Business Hierarchy'[Division_Group] = \"Hanes Europe\"), \"Discontinued Operations\",",
              "'Business Hierarchy'[Business_Group] = \"Corporate\", \"Corporate\",",
              "'Business Hierarchy'[Division_Group] in {\"Canada-IW\", \"Hosiery Group\", \"Hanes Australasia\", \"Export\", \"Western Hemisphere\", \"Central America Export\"}, \"Global Innerwear\",",
              "'Business Hierarchy'[Division_Group] in {\"Canada-AW\", \"Champion Europe\", \"SE Asia Group\"}, \"Global Activewear\",",
              "\"Other\"",
              ")"
            ]
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = #\"SQL Server EDM\",",
                "    dbo_Business_Seg_Hierarchy_Samba_DIV_vw = Source{[Schema=\"dbo\",Item=\"Business_Seg_Hierarchy_Samba_DIV_vw\"]}[Data],",
                "    #\"Filtered Rows\" = Table.SelectRows(dbo_Business_Seg_Hierarchy_Samba_DIV_vw, each ([BusKey] <> \"12-156\" and [BusKey] <> \"9-9\"))",
                "in",
                "    #\"Filtered Rows\""
              ]
            }
          }
        ],
        "hierarchies": [
          {
            "name": "Business_Group Hierarchy",
            "levels": [
              {
                "name": "Business_Group",
                "ordinal": 0,
                "column": "Business_Group"
              },
              {
                "name": "Division_Group",
                "ordinal": 1,
                "column": "Division_Group"
              },
              {
                "name": "Division",
                "ordinal": 2,
                "column": "Division"
              }
            ]
          }
        ]
      },
      {
        "name": "Calendar",
        "dataCategory": "Time",
        "columns": [
          {
            "name": "Day Date",
            "dataType": "dateTime",
            "isKey": true,
            "sourceColumn": "Day Date"
          },
          {
            "name": "As of Date",
            "dataType": "dateTime",
            "sourceColumn": "As of Date"
          },
          {
            "name": "Day Date INT",
            "dataType": "int64",
            "sourceColumn": "Day Date INT"
          },
          {
            "name": "As of Date INT",
            "dataType": "int64",
            "sourceColumn": "As of Date INT"
          },
          {
            "name": "Fiscal Yr",
            "dataType": "int64",
            "sourceColumn": "Fiscal Yr"
          },
          {
            "name": "Fiscal_Qtr",
            "dataType": "int64",
            "sourceColumn": "Fiscal_Qtr"
          },
          {
            "name": "Fiscal_Mth",
            "dataType": "int64",
            "sourceColumn": "Fiscal_Mth"
          },
          {
            "name": "Fiscal_Wk",
            "dataType": "int64",
            "sourceColumn": "Fiscal_Wk"
          },
          {
            "name": "Fiscal_Wk_of_Yr",
            "dataType": "int64",
            "sourceColumn": "Fiscal_Wk_of_Yr"
          },
          {
            "name": "fiscal_wk_of_mth",
            "dataType": "int64",
            "sourceColumn": "fiscal_wk_of_mth"
          },
          {
            "name": "Fiscal Qtr Num",
            "dataType": "int64",
            "sourceColumn": "Fiscal Qtr Num"
          },
          {
            "name": "Fiscal Month Num",
            "dataType": "int64",
            "sourceColumn": "Fiscal Month Num"
          },
          {
            "name": "Fiscal Month Name",
            "dataType": "string",
            "sourceColumn": "Fiscal Month Name",
            "sortByColumn": "Fiscal Month Num"
          },
          {
            "type": "calculated",
            "name": "Fiscal Day in Year",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              " ",
              "VAR currentyear = 'Calendar'[Fiscal Yr]",
              "VAR currentday = 'Calendar'[Day Date]",
              "VAR tbl_currentyear = FILTER(ALL('Calendar'), 'Calendar'[Fiscal Yr] = currentyear)",
              "VAR tbl_lessthancurrentday = FILTER(tbl_currentyear,'Calendar'[Day Date] <= currentday)",
              "VAR dayrank = COUNTROWS(tbl_lessthancurrentday)",
              "RETURN",
              "dayrank"
            ]
          },
          {
            "type": "calculated",
            "name": "Fiscal Qtr",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": " \"Q\"&'Calendar'[Fiscal Qtr Num]"
          },
          {
            "type": "calculated",
            "name": "Has Fact Data",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "IF(SUMX(RELATEDTABLE('Inventory'),'Inventory'[dollars])>0,\"Y\",\"N\")"
          },
          {
            "type": "calculated",
            "name": "LLY Day Date",
            "dataType": "dateTime",
            "isDataTypeInferred": true,
            "expression": [
              " ",
              "VAR fiscaldayinyear = Calendar[Fiscal Day in Year]",
              "VAR LLYfiscalyear = VALUE('Calendar'[Fiscal Yr]) - 2",
              "VAR tbl_LLYdaydate = FILTER(ALL('Calendar'), Calendar[Fiscal Yr] = LLYfiscalyear && Calendar[Fiscal Day in Year] = fiscaldayinyear)",
              "VAR LLYdaydate = IF(COUNTROWS(tbl_LLYdaydate) = 1, MAXX(tbl_LLYdaydate, [Day Date]), DATE(2099,12,31))",
              "--in order to make LY calculations work, need 53rd week to be a date with zero sales, can't be blank date, otherwise it will return total sales with no date",
              "",
              "",
              "RETURN",
              "LLYdaydate"
            ]
          },
          {
            "type": "calculated",
            "name": "LM Day Date",
            "dataType": "dateTime",
            "isDataTypeInferred": true,
            "expression": [
              " ",
              "VAR fiscalmonth = 'Calendar'[Fiscal Month Num]",
              "VAR LMfiscalmonth = IF(fiscalmonth = 1, 12, fiscalmonth - 1)",
              "VAR LMfiscalyear = IF(fiscalmonth = 1, VALUE(Calendar[Fiscal Yr]) - 1, 'Calendar'[Fiscal Yr])",
              "VAR tbl_lmdaydate = FILTER(ALL('Calendar'), Calendar[Fiscal Yr] = LMfiscalyear && 'Calendar'[Fiscal Month Num] = LMfiscalmonth)",
              "VAR lmdaydate = MAXX(tbl_lmdaydate, [Day Date]) ",
              "--in order to make LY calculations work, need 53rd week to be a date with zero sales, can't be blank date, otherwise it will return total sales with no date",
              "",
              "RETURN",
              "lmdaydate"
            ]
          },
          {
            "type": "calculated",
            "name": "LY Day Date",
            "dataType": "dateTime",
            "isDataTypeInferred": true,
            "expression": [
              " ",
              "VAR fiscaldayinyear = Calendar[Fiscal Day in Year]",
              "VAR LYfiscalyear = VALUE(Calendar[Fiscal Yr]) - 1",
              "VAR tbl_lydaydate = FILTER(ALL('Calendar'), Calendar[Fiscal Yr] = LYfiscalyear && Calendar[Fiscal Day in Year] = fiscaldayinyear)",
              "VAR lydaydate = IF(COUNTROWS(tbl_lydaydate) = 1, MAXX(tbl_lydaydate, [Day Date]), DATE(2099,12,31)) ",
              "--in order to make LY calculations work, need 53rd week to be a date with zero sales, can't be blank date, otherwise it will return total sales with no date",
              "",
              "RETURN",
              "lydaydate"
            ]
          },
          {
            "type": "calculated",
            "name": "CurrentDate",
            "dataType": "int64",
            "isDataTypeInferred": false,
            "isHidden": true,
            "expression": "FORMAT(NOW(),\"YYYYMMDD\")"
          },
          {
            "type": "calculated",
            "name": "CurrentDayInd",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "IF('Calendar'[Day Date INT]='Calendar'[CurrentDate],\"Y\",\"N\")"
          },
          {
            "type": "calculated",
            "name": "LastWeekInd",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "IF('Calendar'[Day Date INT]='Calendar'[Previous_Fiscal_Wk],\"Y\",\"N\")"
          },
          {
            "type": "calculated",
            "name": "WeekEndInd",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "IF('Calendar'[Day Date INT]='Calendar'[As of Date INT],\"Y\",\"N\")"
          },
          {
            "type": "calculated",
            "name": "FiscalMthEnd",
            "dataType": "dateTime",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "var FM = [Fiscal_Mth]",
              "",
              "Return",
              "CALCULATE(MAXX('Calendar',[As Of Date]), ALL('Calendar'),'Calendar'[Fiscal_Mth] = FM)"
            ]
          },
          {
            "type": "calculated",
            "name": "Previous_Fiscal_Mth",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "IF('Calendar'[Fiscal Month Num]<>1,'Calendar'[Fiscal_Mth]-1,'Calendar'[Fiscal_Mth]-89)"
          },
          {
            "type": "calculated",
            "name": "PreviousMonthEnding",
            "dataType": "dateTime",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "var previousFM = [Previous_Fiscal_Mth]",
              "",
              "Return",
              "CALCULATE(MAXX('Calendar',[As Of Date]), ALL('Calendar'),'Calendar'[Fiscal_Mth]= previousFM)"
            ]
          },
          {
            "type": "calculated",
            "name": "PreviousYearEnding",
            "dataType": "dateTime",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "var previousFY = 'Calendar'[Fiscal Yr]-1",
              "",
              "Return",
              "CALCULATE(MAXX('Calendar',[As Of Date]), ALL('Calendar'),'Calendar'[Fiscal Yr]= previousFY)"
            ]
          },
          {
            "type": "calculated",
            "name": "Previous_Fiscal_Qtr",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "IF('Calendar'[Fiscal Qtr Num]<>1,'Calendar'[Fiscal_QTR]-1,'Calendar'[Fiscal_QTR]-100-'Calendar'[Fiscal Qtr Num]+4)"
          },
          {
            "type": "calculated",
            "name": "PreviousQtrEnding",
            "dataType": "dateTime",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "var previousQtr = 'Calendar'[Previous_Fiscal_Qtr]",
              "",
              " ",
              "",
              "Return",
              "CALCULATE(MAXX('Calendar',[As Of Date]), ALL('Calendar'),'Calendar'[Fiscal_QTR]= previousQtr)"
            ]
          },
          {
            "type": "calculated",
            "name": "MonthEndInd",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": " IF('Calendar'[FiscalMthEnd] = 'Calendar'[Day Date],\"Y\",\"N\")"
          },
          {
            "type": "calculated",
            "name": "Sequential Day Number",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "isHidden": true,
            "expression": " INT('Calendar'[Day Date])"
          },
          {
            "type": "calculated",
            "name": "DateWithTransactions",
            "dataType": "boolean",
            "isDataTypeInferred": true,
            "isHidden": true,
            "expression": " AND('Calendar'[Day Date INT] <= MAX(Inventory[As_of_Date_int]), 'Calendar'[Day Date INT] <= MAX(Sales[As_of_Date_int]))",
            "formatString": "\"TRUE\";\"TRUE\";\"FALSE\""
          },
          {
            "type": "calculated",
            "name": "PreviousWeekEnding",
            "dataType": "dateTime",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "var previousFW = [Previous_Fiscal_Wk]",
              "",
              "Return",
              "CALCULATE(MAXX('Calendar',[As Of Date]), ALL('Calendar'),'Calendar'[As of Date INT] = previousFW)"
            ]
          },
          {
            "type": "calculated",
            "name": "Previous_Fiscal_Wk",
            "dataType": "int64",
            "isDataTypeInferred": false,
            "isHidden": true,
            "expression": "FORMAT(NOW()-WEEKDAY(Now()),\"YYYYMMDD\")"
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = #\"SQL Server HBIDW\",",
                "    dbo_Calendar_vw = Source{[Schema=\"dbo\",Item=\"Calendar_vw\"]}[Data],",
                "    #\"Filtered Rows\" = Table.SelectRows(dbo_Calendar_vw, each ([Fiscal_Yr] = 2017 or [Fiscal_Yr] = 2018 or [Fiscal_Yr] = 2019 or [Fiscal_Yr] = 2020 or [Fiscal_Yr] = 2021 or [Fiscal_Yr] = 2022 or [Fiscal_Yr] = 2023)),",
                "    #\"Removed Other Columns1\" = Table.SelectColumns(#\"Filtered Rows\",{\"Day_Date_int\", \"AS_of_Date_INT\", \"Fiscal_Yr\", \"Fiscal_Qtr\", \"Fiscal_Mth\", \"Fiscal_Wk\", \"Fiscal_Wk_of_Yr\", \"fiscal_wk_of_mth\"}),",
                "    #\"Duplicated Column\" = Table.DuplicateColumn(#\"Removed Other Columns1\", \"AS_of_Date_INT\", \"AS_of_Date_INT - Copy\"),",
                "    #\"Duplicated Column2\" = Table.DuplicateColumn(#\"Duplicated Column\", \"Day_Date_int\", \"Day_Date_int - Copy\"),",
                "    #\"Duplicated Column1\" = Table.DuplicateColumn(#\"Duplicated Column2\", \"Fiscal_Qtr\", \"Fiscal_Qtr - Copy\"),",
                "    #\"Duplicated Column4\" = Table.DuplicateColumn(#\"Duplicated Column1\", \"Fiscal_Mth\", \"Fiscal_Mth - Copy\"),",
                "    #\"Changed Type3\" = Table.TransformColumnTypes(#\"Duplicated Column4\",{{\"Day_Date_int - Copy\", type text}, {\"AS_of_Date_INT - Copy\", type text}}),",
                "    #\"Changed Type\" = Table.TransformColumnTypes(#\"Changed Type3\",{{\"AS_of_Date_INT - Copy\", type date}, {\"Day_Date_int - Copy\", type date}}),",
                "    #\"Changed Type5\" = Table.TransformColumnTypes(#\"Changed Type\",{{\"Fiscal_Wk_of_Yr\", Int64.Type}, {\"fiscal_wk_of_mth\", Int64.Type},{\"Fiscal_Mth - Copy\", Int64.Type},{\"Fiscal_Qtr - Copy\", Int64.Type}, {\"Fiscal_Yr\", Int64.Type}}),",
                "    #\"Renamed Columns\" = Table.RenameColumns(#\"Changed Type5\",{{\"Day_Date_int - Copy\", \"Day Date\"}, {\"AS_of_Date_INT - Copy\", \"As of Date\"}, {\"Day_Date_int\", \"Day Date INT\"}, {\"AS_of_Date_INT\", \"As of Date INT\"},{\"Fiscal_Qtr - Copy\", \"Fiscal Qtr Num\"},{\"Fiscal_Mth - Copy\", \"Fiscal Month Num\"},{\"Fiscal_Yr\", \"Fiscal Yr\"}}),",
                "    #\"Extracted Last Characters\" = Table.TransformColumns(#\"Renamed Columns\", {{\"Fiscal Qtr Num\", each Text.End(Text.From(_, \"en-US\"), 2), type text}}),",
                "    #\"Extracted Last Characters1\" = Table.TransformColumns(#\"Extracted Last Characters\", {{\"Fiscal Month Num\", each Text.End(Text.From(_, \"en-US\"), 2), type text}}),",
                "    #\"Changed Type1\" = Table.TransformColumnTypes(#\"Extracted Last Characters1\",{{\"Fiscal Qtr Num\", Int64.Type}, {\"Fiscal Month Num\", Int64.Type}}),",
                "    #\"Added Conditional Column1\" = Table.AddColumn(#\"Changed Type1\", \"Fiscal Month Name\", each if [Fiscal Month Num] = 1 then \"Jan\" else if [Fiscal Month Num] = 2 then \"Feb\" else if [Fiscal Month Num] = 3 then \"Mar\" else if [Fiscal Month Num] = 4 then \"Apr\" else if [Fiscal Month Num] = 5 then \"May\" else if [Fiscal Month Num] = 6 then \"Jun\" else if [Fiscal Month Num] = 7 then \"Jul\" else if [Fiscal Month Num] = 8 then \"Aug\" else if [Fiscal Month Num] = 9 then \"Sep\" else if [Fiscal Month Num] = 10 then \"Oct\" else if [Fiscal Month Num] = 11 then \"Nov\" else if [Fiscal Month Num] = 12 then \"Dec\" else null),",
                "    #\"Reordered Columns1\" = Table.ReorderColumns(#\"Added Conditional Column1\",{\"Day Date\", \"As of Date\" , \"Day Date INT\", \"As of Date INT\", \"Fiscal Yr\", \"Fiscal_Qtr\", \"Fiscal_Mth\", \"Fiscal_Wk\", \"Fiscal_Wk_of_Yr\", \"fiscal_wk_of_mth\"})",
                "in",
                "    #\"Reordered Columns1\""
              ]
            }
          }
        ],
        "measures": [
          {
            "name": "ShowValueForDates",
            "expression": [
              "",
              "VAR LastDateWithData =",
              "    CALCULATE (",
              "        MAX ( 'Sales'[As_of_Date_int] ),",
              "        REMOVEFILTERS ()",
              "    )",
              "VAR FirstDateVisible =",
              "    MIN ( 'Calendar'[Day Date INT] )",
              "VAR Result =",
              "    FirstDateVisible <= LastDateWithData",
              "RETURN",
              "    Result"
            ],
            "isHidden": true
          },
          {
            "name": "LastDateWithData",
            "expression": [
              "",
              "CALCULATE(",
              "    MAX(",
              "        MAX ( 'Sales'[As_of_Date_int] ),",
              "        MAX ( 'Inventory'[As_of_Date_int] )",
              "    ),",
              "    REMOVEFILTERS('Product'),",
              "    REMOVEFILTERS('Facility'),",
              "    REMOVEFILTERS('Business Hierarchy')",
              ")"
            ],
            "isHidden": true
          },
          {
            "name": "MaxSequentialNumber",
            "expression": [
              "",
              "LOOKUPVALUE('Calendar'[Sequential Day Number], 'Calendar'[Day Date INT], [LastDateWithData])"
            ],
            "isHidden": true
          }
        ],
        "hierarchies": [
          {
            "name": "Fiscal Calendar",
            "levels": [
              {
                "name": "Fiscal Yr",
                "ordinal": 0,
                "column": "Fiscal Yr"
              },
              {
                "name": "Fiscal Qtr",
                "ordinal": 1,
                "column": "Fiscal Qtr"
              },
              {
                "name": "Fiscal Month Name",
                "ordinal": 2,
                "column": "Fiscal Month Name"
              },
              {
                "name": "As of Date",
                "ordinal": 3,
                "column": "As of Date"
              },
              {
                "name": "Day Date",
                "ordinal": 4,
                "column": "Day Date"
              }
            ]
          }
        ]
      },
      {
        "name": "Facility",
        "columns": [
          {
            "name": "Dim_Facility_ID",
            "dataType": "int64",
            "sourceColumn": "Dim_Facility_ID"
          },
          {
            "name": "Facility_ID",
            "dataType": "double",
            "sourceColumn": "Facility_ID"
          },
          {
            "name": "Facility_Code",
            "dataType": "string",
            "sourceColumn": "Facility_Code"
          },
          {
            "name": "Facility_Name",
            "dataType": "string",
            "sourceColumn": "Facility_Name"
          },
          {
            "name": "Facility_Type",
            "dataType": "string",
            "sourceColumn": "Facility_Type"
          },
          {
            "name": "Division_Group",
            "dataType": "string",
            "sourceColumn": "Division_Group"
          },
          {
            "name": "SAP_Plant_Code",
            "dataType": "string",
            "sourceColumn": "SAP_Plant_Code"
          },
          {
            "name": "SAP_Stock_Category",
            "dataType": "string",
            "sourceColumn": "SAP_Stock_Category"
          },
          {
            "name": "GROUP_CODE",
            "dataType": "string",
            "sourceColumn": "GROUP_CODE"
          },
          {
            "name": "GROUP_NAME",
            "dataType": "string",
            "sourceColumn": "GROUP_NAME"
          },
          {
            "name": "COUNTRY",
            "dataType": "string",
            "sourceColumn": "COUNTRY"
          },
          {
            "name": "REGION",
            "dataType": "string",
            "sourceColumn": "REGION"
          },
          {
            "name": "FACILITY_CLUSTER",
            "dataType": "string",
            "sourceColumn": "FACILITY_CLUSTER"
          },
          {
            "name": "FACILITY_CATEGORY",
            "dataType": "string",
            "sourceColumn": "FACILITY_CATEGORY"
          },
          {
            "name": "FACILITY_GROUP",
            "dataType": "string",
            "sourceColumn": "FACILITY_GROUP"
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = #\"SQL Server HBIDW\",",
                "    dbo_Dim_Facility = Source{[Schema=\"dbo\",Item=\"Dim_Facility\"]}[Data]",
                "in",
                "    dbo_Dim_Facility"
              ]
            }
          }
        ],
        "hierarchies": [
          {
            "name": "Facility",
            "levels": [
              {
                "name": "Facility_Type",
                "ordinal": 0,
                "column": "Facility_Type"
              },
              {
                "name": "Facility_Name",
                "ordinal": 1,
                "column": "Facility_Name"
              }
            ]
          }
        ]
      },
      {
        "name": "Marketing Resp",
        "columns": [
          {
            "name": "marketing_level0_id",
            "dataType": "int64",
            "isHidden": true,
            "sourceColumn": "marketing_level0_id"
          },
          {
            "name": "Marketing_Resp_0",
            "dataType": "string",
            "isHidden": true,
            "sourceColumn": "Marketing_Resp_0"
          },
          {
            "name": "marketing_level1_id",
            "dataType": "int64",
            "isHidden": true,
            "sourceColumn": "marketing_level1_id"
          },
          {
            "name": "Marketing_Resp_1",
            "dataType": "string",
            "isHidden": true,
            "sourceColumn": "Marketing_Resp_1"
          },
          {
            "name": "marketing_level2_id",
            "dataType": "int64",
            "isHidden": true,
            "sourceColumn": "marketing_level2_id"
          },
          {
            "name": "Marketing_Resp_2",
            "dataType": "string",
            "isHidden": true,
            "sourceColumn": "Marketing_Resp_2"
          },
          {
            "name": "marketing_level3_id",
            "dataType": "int64",
            "isHidden": true,
            "sourceColumn": "marketing_level3_id"
          },
          {
            "name": "Marketing_Resp_3",
            "dataType": "string",
            "isHidden": true,
            "sourceColumn": "Marketing_Resp_3"
          },
          {
            "name": "marketing_level4_id",
            "dataType": "int64",
            "isHidden": true,
            "sourceColumn": "marketing_level4_id"
          },
          {
            "name": "Marketing_Resp_4",
            "dataType": "string",
            "isHidden": true,
            "sourceColumn": "Marketing_Resp_4"
          },
          {
            "type": "calculated",
            "name": "DTC Flag",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "IF('Marketing Resp'[Marketing_Resp_0] = \"Dave Thompson\", \"DTC\", \"Not DTC\")"
            ]
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = #\"SQL Server EDM\",",
                "    dbo_marketing_hierarchy_vw = Source{[Schema=\"dbo\",Item=\"marketing_hierarchy_vw\"]}[Data]",
                "in",
                "    dbo_marketing_hierarchy_vw"
              ]
            }
          }
        ],
        "hierarchies": [
          {
            "name": "Marketing Resp Hierarchy",
            "levels": [
              {
                "name": "Marketing_Resp_0",
                "ordinal": 0,
                "column": "Marketing_Resp_0"
              },
              {
                "name": "Marketing_Resp_1",
                "ordinal": 1,
                "column": "Marketing_Resp_1"
              },
              {
                "name": "Marketing_Resp_2",
                "ordinal": 2,
                "column": "Marketing_Resp_2"
              },
              {
                "name": "Marketing_Resp_3",
                "ordinal": 3,
                "column": "Marketing_Resp_3"
              },
              {
                "name": "Marketing_Resp_4",
                "ordinal": 4,
                "column": "Marketing_Resp_4"
              }
            ]
          }
        ]
      },
      {
        "name": "Inventory",
        "columns": [
          {
            "name": "Dim_Facility_id",
            "dataType": "int64",
            "isHidden": true,
            "sourceColumn": "Dim_Facility_id"
          },
          {
            "name": "business_segment_hierarchy_id",
            "dataType": "int64",
            "sourceColumn": "business_segment_hierarchy_id"
          },
          {
            "name": "As_of_Date_int",
            "dataType": "int64",
            "isHidden": true,
            "sourceColumn": "As_of_Date_int"
          },
          {
            "name": "Currency",
            "dataType": "string",
            "isHidden": true,
            "sourceColumn": "currency"
          },
          {
            "name": "units",
            "dataType": "double",
            "isHidden": true,
            "sourceColumn": "units"
          },
          {
            "name": "packages",
            "dataType": "double",
            "isHidden": true,
            "sourceColumn": "packages"
          },
          {
            "name": "dollars",
            "dataType": "double",
            "sourceColumn": "dollars"
          },
          {
            "name": "Dim_Item_SCD_id",
            "dataType": "int64",
            "isHidden": true,
            "sourceColumn": "Dim_Item_SCD_id"
          },
          {
            "type": "calculated",
            "name": "Aging Buckets",
            "dataType": "string",
            "isDataTypeInferred": true,
            "isHidden": true,
            "expression": [
              "SWITCH(TRUE(),",
              "'Inventory'[Day_Duration]< 181, \"(0-6 mos) 0-180 days\", ",
              "'Inventory'[Day_Duration]< 212, \"(6 mos) 181-211 days\", ",
              "'Inventory'[Day_Duration]< 243, \"(7 mos) 212-242 days\", ",
              "'Inventory'[Day_Duration]< 274, \"(8 mos) 243-273 days\", ",
              "'Inventory'[Day_Duration]< 305, \"(9 mos) 274-304 days\", ",
              "'Inventory'[Day_Duration]< 336, \"(10 mos) 305-335 days\", ",
              "'Inventory'[Day_Duration]< 361, \"(11 mos) 336-360 days\", ",
              "'Inventory'[Day_Duration]< 391, \"(12 mos) 361-390 days\", ",
              "'Inventory'[Day_Duration]< 421, \"(13 mos) 391-420 days\", ",
              "'Inventory'[Day_Duration]< 451, \"(14 mos) 421-450 days\", ",
              "'Inventory'[Day_Duration]< 481, \"(15 mos) 451-480 days\", ",
              "'Inventory'[Day_Duration]< 511, \"(16 mos) 481-510 days\", ",
              "'Inventory'[Day_Duration]< 541, \"(17 mos) 511-540 days\", ",
              "'Inventory'[Day_Duration]< 571, \"(18 mos) 541-570 days\", ",
              "'Inventory'[Day_Duration]< 601, \"(19 mos) 571-600 days\", ",
              "'Inventory'[Day_Duration]< 631, \"(20 mos) 601-630 days\", ",
              "'Inventory'[Day_Duration]< 661, \"(21 mos) 631-660 days\", ",
              "'Inventory'[Day_Duration]< 691, \"(22 mos) 661-690 days\", ",
              "'Inventory'[Day_Duration]< 721, \"(23 mos) 691-720 days\", ",
              "'Inventory'[Day_Duration]> 720, \"(24 mos) 0ver 721 days\", ",
              "BLANK())"
            ]
          },
          {
            "name": "Dim_Item_id",
            "dataType": "int64",
            "isHidden": true,
            "sourceColumn": "Dim_Item_id",
            "formatString": "0"
          },
          {
            "name": "Day_Duration",
            "dataType": "int64",
            "sourceColumn": "Day_Duration"
          }
        ],
        "partitions": [
          {
            "name": "InventoryTemplate",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = #\"SQL Server HBIDW\",",
                "    dbo_InventorySKU_Fact_Sales_Vw = Source{[Schema=\"dbo\",Item=\"InventorySKU_Fact_Inventory_Vw\"]}[Data],",
                "    #\"Filtered Rows\" = Table.SelectRows(dbo_InventorySKU_Fact_Sales_Vw, each [AS_OF_DATE_INT] < 19000101)",
                "in",
                "    #\"Filtered Rows\""
              ]
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>let",
                  "    Source = #\"SQL Server HBIDW\",",
                  "    dbo_InventorySKU_Fact_Sales_Vw = Source{[Schema=\"dbo\",Item=\"InventorySKU_Fact_Inventory_Vw\"]}[Data],",
                  "    #\"Filtered Rows\" = Table.SelectRows(dbo_InventorySKU_Fact_Sales_Vw, each [AS_OF_DATE_INT] < 19000101)",
                  "in",
                  "    #\"Filtered Rows\"</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "measures": [
          {
            "name": "P12 No Regrets $",
            "expression": [
              " ",
              "",
              "CALCULATE (",
              "    SUMX( 'Inventory',",
              "        VAR LocationisRetail = Inventory[business_segment_hierarchy_id] = 8",
              "        VAR IncludeinRetail = RELATED('Disposal SKU'[Include Retail Store Inventory?]) = \"Y\"",
              "        VAR IdentifiedbyRetail = RELATED('Disposal SKU'[Division]) = \"Retail Outlets\"",
              "        RETURN",
              "        SWITCH(TRUE(),",
              "        AND(LocationisRetail,IncludeinRetail), Inventory[dollars], --sum dollars for SKUs identified by Retail Outlet team, where inventory is in a retail store",
              "        NOT(OR(IdentifiedbyRetail,LocationisRetail)), Inventory[dollars], --otherwise, sum dollars for SKUs that were not identified by Retail Outlet team (note: duplicate SKUs assigned to Marketing, not Retail Stores)",
              "        BLANK())",
              "    ),",
              "        NOT ( ISBLANK ( 'Disposal SKU'[Perc] ) ),",
              "        'Calendar'[Day Date] = DATE ( 2021, 01, 02 )",
              ")"
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "displayFolder": "No Regrets",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "P12 No Regrets Units",
            "expression": [
              " ",
              "",
              "CALCULATE (",
              "    SUMX( 'Inventory',",
              "        VAR LocationisRetail = Inventory[business_segment_hierarchy_id] = 8",
              "        VAR IncludeinRetail = RELATED('Disposal SKU'[Include Retail Store Inventory?]) = \"Y\"",
              "        VAR IdentifiedbyRetail = RELATED('Disposal SKU'[Division]) = \"Retail Outlets\"",
              "        RETURN",
              "        SWITCH(TRUE(),",
              "        AND(LocationisRetail,IncludeinRetail), Inventory[packages], --sum packages for SKUs identified by Retail Outlet team, where inventory is in a retail store",
              "        NOT(OR(IdentifiedbyRetail,LocationisRetail)), Inventory[packages], --otherwise, sum packages for SKUs that were not identified by Retail Outlet team (note: duplicate SKUs assigned to Marketing, not Retail Stores)",
              "        BLANK())",
              "    ),",
              "        NOT ( ISBLANK ( 'Disposal SKU'[Perc] ) ),",
              "        'Calendar'[Day Date] = DATE ( 2021, 01, 02 )",
              ")"
            ],
            "formatString": "#,0",
            "displayFolder": "No Regrets"
          },
          {
            "name": "No Regrets Target Units",
            "expression": [
              " ",
              "",
              "CALCULATE (",
              "    SUMX( 'Inventory',",
              "        VAR LocationisRetail = Inventory[business_segment_hierarchy_id] = 8",
              "        VAR IncludeinRetail = RELATED('Disposal SKU'[Include Retail Store Inventory?]) = \"Y\"",
              "        VAR IdentifiedbyRetail = RELATED('Disposal SKU'[Division]) = \"Retail Outlets\"",
              "        VAR PartialPercent = RELATED('Disposal SKU'[Perc])",
              "        RETURN",
              "        SWITCH(TRUE(),",
              "        AND(LocationisRetail,IncludeinRetail), Inventory[packages] * PartialPercent, --sum dollars for SKUs identified by Retail Outlet team, where inventory is in a retail store",
              "        NOT(OR(IdentifiedbyRetail,LocationisRetail)), Inventory[packages] * PartialPercent, --otherwise, sum dollars for SKUs that were not identified by Retail Outlet team and not in a retail store (note: duplicate SKUs assigned to Marketing, not Retail Stores)",
              "        BLANK())",
              "    ),",
              "        NOT ( ISBLANK ( 'Disposal SKU'[Perc] ) ),",
              "        'Calendar'[Day Date] = DATE ( 2021, 01, 02 )",
              ")"
            ],
            "formatString": "#,0",
            "displayFolder": "No Regrets"
          },
          {
            "name": "No Regrets Target $",
            "expression": [
              " ",
              "",
              "CALCULATE (",
              "    SUMX( 'Inventory',",
              "        VAR LocationisRetail = Inventory[business_segment_hierarchy_id] = 8",
              "        VAR IncludeinRetail = RELATED('Disposal SKU'[Include Retail Store Inventory?]) = \"Y\"",
              "        VAR IdentifiedbyRetail = RELATED('Disposal SKU'[Division]) = \"Retail Outlets\"",
              "        VAR PartialPercent = RELATED('Disposal SKU'[Perc])",
              "        RETURN",
              "        SWITCH(TRUE(),",
              "        AND(LocationisRetail,IncludeinRetail), Inventory[dollars] * PartialPercent, --sum dollars for SKUs identified by Retail Outlet team, where inventory is in a retail store",
              "        NOT(OR(IdentifiedbyRetail,LocationisRetail)), Inventory[dollars] * PartialPercent, --otherwise, sum dollars for SKUs that were not identified by Retail Outlet team and not in a retail store (note: duplicate SKUs assigned to Marketing, not Retail Stores)",
              "        BLANK())",
              "    ),",
              "        NOT ( ISBLANK ( 'Disposal SKU'[Perc] ) ),",
              "        'Calendar'[Day Date] = DATE ( 2021, 01, 02 )",
              ")"
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "displayFolder": "No Regrets",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "No Regrets Target Ending Balance $",
            "expression": [
              " ",
              "[P12 No Regrets $] - [No Regrets Target $]"
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "displayFolder": "No Regrets",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "No Regrets Target Ending Balance Units",
            "expression": [
              " ",
              "[P12 No Regrets Units] - [No Regrets Target Units]"
            ],
            "formatString": "#,0",
            "displayFolder": "No Regrets"
          },
          {
            "name": "SKU Count",
            "expression": [
              " ",
              "VAR MaxWeekEnd = ",
              "CALCULATE(",
              "MAX('Inventory'[As_of_Date_int]),",
              "    REMOVEFILTERS('Product'),",
              "    REMOVEFILTERS('Facility'),",
              "    REMOVEFILTERS('Business Hierarchy')",
              ")",
              "RETURN",
              "COUNTROWS(",
              "    CALCULATETABLE(",
              "        DISTINCT('Product'[SKUCount]),",
              "    CROSSFILTER(Inventory[Dim_Item_id],'Product'[Dim_Item_id],Both),",
              "    'Inventory'[units] > 0,",
              "\t'Calendar'[As of Date INT] = MaxWeekEnd",
              "    )",
              ")",
              "--CALCULATE( ",
              "-- DISTINCTCOUNTNOBLANK(Inventory[SKUCount]),",
              "-- Inventory[units] > 0",
              "--)",
              ""
            ],
            "formatString": "#,0",
            "displayFolder": "SKUCount\\Total"
          },
          {
            "name": "DOMESTIC Current Week OPC Cumulative Reduction $",
            "expression": [
              " ",
              "CALCULATE([No Regrets Target $], KEEPFILTERS('Business Hierarchy'[Business_Group] <> \"International\")) * [DOMESTIC Current Week OPC Cumulative Reduction FRACTION]"
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "displayFolder": "No Regrets",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "DOMESTIC Current Week OPC Cumulative Reduction FRACTION",
            "expression": [
              " ",
              "",
              "--IF(SELECTEDVALUE( 'Business Hierarchy'[Business_Group]) = \"International\", 0,       --This was included to save on processing time.",
              "    VAR SelectedMonthNum =",
              "        SELECTEDVALUE ( 'Calendar'[Fiscal Month Num], 1 )",
              "    VAR SelectedYear =     ",
              "        SELECTEDVALUE( 'Calendar'[Fiscal Yr] )",
              "    VAR MonthFraction =",
              "        SWITCH(TRUE(), ",
              "        SelectedMonthNum=1,0,                    --66% needs to be spread across Feb-June and the remaining 34% across Jul-Sep.",
              "        SelectedMonthNum=2,.132,",
              "        SelectedMonthNum=3,.264,",
              "        SelectedMonthNum=4,.396,",
              "        SelectedMonthNum=5,.528,",
              "        SelectedMonthNum=6,.660,",
              "        SelectedMonthNum=7,.773,",
              "        SelectedMonthNum=8,.886,",
              "        SelectedMonthNum=9,1,",
              "        SelectedMonthNum=10,0,",
              "        SelectedMonthNum=11,0,",
              "        SelectedMonthNum=12,0)",
              "        ",
              "    VAR WeeksinSelectedMonth =",
              "        CALCULATE (",
              "            MAX ( 'Calendar'[fiscal_wk_of_mth] ),",
              "            'Calendar'[Fiscal Yr] = SelectedYear,",
              "            'Calendar'[Fiscal Month Num] = selectedMonthNum",
              "        )",
              "    VAR MaxWeekinYear = MAX('Calendar'[Fiscal_Wk_of_Yr])",
              "    VAR WeekFraction66 = ",
              "        IF((SelectedMonthNum>1) && (SelectedMonthNum<7),  (MaxWeekinYear - 5)*(.66/21))   --There are 21 weeks in Feb-Jun and 66% needs to be spread.  Subtract 5 weeks ",
              "    VAR WeekFraction34=                                 --for Jan being 0 and multiply by the weekly fraction.",
              "        IF((SelectedMonthNum>6) && (SelectedMonthNum<10), .66+(MaxWeekinYear - 26)*(.34/13))    --There are 13 weeks Jul-Sep and 34% needs to be spread.   Subtract 26 weeks",
              "    VAR WeekFraction  =                                                 --for Jan being 0 and multiply by the weekly fraction.",
              "        SWITCH(TRUE(),",
              "                SelectedYear <> 2021, 0,",
              "                SelectedMonthNum < 7, Weekfraction66, ",
              "                SelectedMonthNum < 10, WeekFraction34,",
              "                1",
              "        )        --If Feb-Jun, use the 66% Fraction otherwise, use the 34% Fraction.",
              "    RETURN",
              "    ",
              "    WeekFraction",
              "--)"
            ],
            "displayFolder": "No Regrets"
          },
          {
            "name": "DOMESTIC Current Week OPC Cumulative Reduction Units",
            "expression": [
              " ",
              "CALCULATE([No Regrets Target Units], KEEPFILTERS('Business Hierarchy'[Business_Group] <> \"International\")) * [DOMESTIC Current Week OPC Cumulative Reduction FRACTION]"
            ],
            "formatString": "#,0",
            "displayFolder": "No Regrets"
          },
          {
            "name": "INTL Current Week OPC Cumulative Reduction Units FRACTION",
            "expression": [
              " ",
              "VAR SelectedMonthNum    =   SELECTEDVALUE ( 'Calendar'[Fiscal Month Num], 1 )",
              "VAR SelectedYear        =   SELECTEDVALUE( 'Calendar'[Fiscal Yr] )",
              "VAR MonthFraction       =   IF ( SelectedMonthNum = 1, 0, ( SelectedMonthNum - 1 ) / 11 )",
              "VAR WeeksinSelectedMonth =",
              "                            CALCULATE (",
              "                                MAX ( 'Calendar'[fiscal_wk_of_mth] ),",
              "                                'Calendar'[Fiscal Yr] = SelectedYear,",
              "                                'Calendar'[Fiscal Month Num] = selectedMonthNum",
              "                            )",
              "VAR WeekFraction        = ",
              "                            DIVIDE( ",
              "                                MonthFraction,",
              "                                WeeksinSelectedMonth,",
              "                                0)",
              "VAR MaxWeekinYear       = MAX('Calendar'[Fiscal_Wk_of_Yr])",
              "RETURN",
              "IF(SelectedMonthNum     = 1, 0, (MaxWeekinYear - 5) / 47)",
              ""
            ],
            "displayFolder": "No Regrets"
          },
          {
            "name": "INTL Current Week OPC Cumulative Reduction $",
            "expression": [
              " ",
              "CALCULATE([No Regrets Target $], KEEPFILTERS ('Business Hierarchy'[Business_Group] = \"International\")) * [INTL Current Week OPC Cumulative Reduction Units FRACTION]"
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "displayFolder": "No Regrets",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "INTL Current Week OPC Cumulative Reduction Units",
            "expression": [
              " ",
              "CALCULATE([No Regrets Target Units], KEEPFILTERS('Business Hierarchy'[Business_Group] = \"International\")) * [INTL Current Week OPC Cumulative Reduction Units FRACTION]"
            ],
            "formatString": "#,0",
            "displayFolder": "No Regrets"
          },
          {
            "name": "Current Week No Regrets $",
            "expression": [
              " ",
              "",
              "VAR SKUCurrentWeek = MAX('Inventory'[As_of_Date_int])",
              "VAR TotalCurrentWeek = CALCULATE(MAX(Inventory[As_of_Date_int]), ALL('Product')) ",
              "VAR SKUMaxWeek = CALCULATE(MAX(Inventory[As_of_Date_int]),ALL('Calendar'))",
              "VAR TotalMaxWeek = CALCULATE(MAX(Inventory[As_of_Date_int]), ALL('Product'),ALL('Calendar')) ",
              "VAR CalFilter = MAX('Calendar'[Day Date INT])",
              "VAR IsFutureDate = CalFilter>TotalCurrentWeek",
              "VAR IsSoldOut = ISBLANK( SKUCurrentWeek )",
              "VAR WasSoldOut = TotalMaxWeek > SKUMaxWeek",
              "VAR FinalSoldOut = OR(AND(IsFutureDate, WasSoldOut), IsSoldOut)",
              "RETURN",
              "IF(IsFutureDate,BLANK(),",
              "CALCULATE (",
              "        SUMX( 'Inventory',",
              "            VAR LocationisRetail = Inventory[business_segment_hierarchy_id] = 8",
              "            VAR IncludeinRetail = RELATED('Disposal SKU'[Include Retail Store Inventory?]) = \"Y\"",
              "            VAR IdentifiedbyRetail = RELATED('Disposal SKU'[Division]) = \"Retail Outlets\"",
              "            RETURN",
              "            IF(FinalSoldOut,0,",
              "                SWITCH(TRUE(),",
              "                AND(LocationisRetail,IncludeinRetail), Inventory[dollars], --sum dollars for SKUs identified by Retail Outlet team, where inventory is in a retail store",
              "                NOT(OR(IdentifiedbyRetail,LocationisRetail)), Inventory[dollars], --otherwise, sum dollars for SKUs that were not identified by Retail Outlet team (note: duplicate SKUs assigned to Marketing, not Retail Stores)",
              "                BLANK())",
              "            )",
              "        ),",
              "            NOT ( ISBLANK ( 'Disposal SKU'[Perc] ) ), --To make sure we are not calculating anything that is not in the Disposal table",
              "            'Inventory'[As_of_Date_int] = SKUCurrentWeek,",
              "            ALL('Calendar')",
              "    )",
              ")"
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "displayFolder": "No Regrets",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "Current Week Gross Reduction $",
            "expression": [
              " ",
              "VAR P12 = [P12 No Regrets $]",
              "VAR CW = [Current Week No Regrets $]",
              "VAR GrossReduction = P12 - CW",
              "VAR Target = [No Regrets Target $]",
              "",
              "RETURN",
              "GrossReduction"
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "displayFolder": "No Regrets",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "Current Week Cumulative Reduction $",
            "expression": [
              " ",
              "IF([FutureDate?], BLANK(),",
              "    SUMX(",
              "        CALCULATETABLE(VALUES(Inventory[Dim_Item_id]),  ALL('Calendar')), --list of all Items to iterate through, not just the current week items",
              "        VAR P12 = [P12 No Regrets $]",
              "        VAR CW = [Current Week No Regrets $]",
              "        VAR GrossReduction = P12 - CW",
              "        VAR Target = [No Regrets Target $]",
              "        RETURN",
              "        MIN(GrossReduction, Target)",
              "    )",
              ")"
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "displayFolder": "No Regrets",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "Current Week Cumulative Reduction $ %",
            "expression": [
              " ",
              "DIVIDE([Current Week Cumulative Reduction $],[No Regrets Target $])"
            ],
            "formatString": "0%;-0%;0%",
            "displayFolder": "No Regrets"
          },
          {
            "name": "Current Week No Regrets Units",
            "expression": [
              " ",
              "",
              "VAR SKUCurrentWeek = MAX('Inventory'[As_of_Date_int])",
              "VAR TotalCurrentWeek = CALCULATE(MAX(Inventory[As_of_Date_int]), ALL('Product')) ",
              "VAR SKUMaxWeek = CALCULATE(MAX(Inventory[As_of_Date_int]),ALL('Calendar'))",
              "VAR TotalMaxWeek = CALCULATE(MAX(Inventory[As_of_Date_int]), ALL('Product'),ALL('Calendar')) ",
              "VAR CalFilter = MAX('Calendar'[Day Date INT])",
              "VAR IsFutureDate = CalFilter>TotalCurrentWeek",
              "VAR IsSoldOut = ISBLANK( SKUCurrentWeek )",
              "VAR WasSoldOut = TotalMaxWeek > SKUMaxWeek",
              "VAR FinalSoldOut = OR(AND(IsFutureDate, WasSoldOut), IsSoldOut)",
              "RETURN",
              "IF(IsFutureDate,BLANK(),",
              "CALCULATE (",
              "        SUMX( 'Inventory',",
              "            VAR LocationisRetail = Inventory[business_segment_hierarchy_id] = 8",
              "            VAR IncludeinRetail = RELATED('Disposal SKU'[Include Retail Store Inventory?]) = \"Y\"",
              "            VAR IdentifiedbyRetail = RELATED('Disposal SKU'[Division]) = \"Retail Outlets\"",
              "            RETURN",
              "            IF(FinalSoldOut,0,",
              "                SWITCH(TRUE(),",
              "                AND(LocationisRetail,IncludeinRetail), Inventory[packages], --sum dollars for SKUs identified by Retail Outlet team, where inventory is in a retail store",
              "                NOT(OR(IdentifiedbyRetail,LocationisRetail)), Inventory[packages], --otherwise, sum dollars for SKUs that were not identified by Retail Outlet team (note: duplicate SKUs assigned to Marketing, not Retail Stores)",
              "                BLANK())",
              "            )",
              "        ),",
              "            NOT ( ISBLANK ( 'Disposal SKU'[Perc] ) ), --To make sure we are not calculating anything that is not in the Disposal table",
              "            'Inventory'[As_of_Date_int] = SKUCurrentWeek,",
              "            ALL('Calendar')",
              "    )",
              ")"
            ],
            "formatString": "#,0",
            "displayFolder": "No Regrets"
          },
          {
            "name": "Current Week Cumulative Reduction Units",
            "expression": [
              " ",
              "IF([FutureDate?], BLANK(),",
              "    SUMX(",
              "        CALCULATETABLE(VALUES(Inventory[Dim_Item_id]),  ALL('Calendar')), --list of all Items to iterate through, not just the current week items",
              "        VAR P12 = [P12 No Regrets Units]",
              "        VAR CW = [Current Week No Regrets Units]",
              "        VAR GrossReduction = P12 - CW",
              "        VAR Target = [No Regrets Target Units]",
              "        RETURN",
              "        MIN(GrossReduction, Target)",
              "    )",
              ")"
            ],
            "formatString": "#,0",
            "displayFolder": "No Regrets"
          },
          {
            "name": "Current Week Cumulative Reduction Units %",
            "expression": [
              " ",
              "DIVIDE([Current Week Cumulative Reduction Units],[No Regrets Target Units])"
            ],
            "formatString": "0%;-0%;0%",
            "displayFolder": "No Regrets"
          },
          {
            "name": "Current Week No Regrets Left To Dispose $",
            "expression": [
              " ",
              "[No Regrets Target $] - [Current Week Cumulative Reduction $]"
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "displayFolder": "No Regrets",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "Current Week No Regrets Left To Dispose Units",
            "expression": [
              " ",
              "[No Regrets Target Units] - [Current Week Cumulative Reduction Units]"
            ],
            "formatString": "#,0",
            "displayFolder": "No Regrets"
          },
          {
            "name": "TOTAL Current Week OPC Cumulative Reduction $",
            "expression": [
              " ",
              "[DOMESTIC Current Week OPC Cumulative Reduction $] + [INTL Current Week OPC Cumulative Reduction $]"
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "displayFolder": "No Regrets",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "TOTAL Current Week OPC Cumulative Reduction Units",
            "expression": [
              " ",
              "[DOMESTIC Current Week OPC Cumulative Reduction Units] + [INTL Current Week OPC Cumulative Reduction Units]"
            ],
            "formatString": "#,0",
            "displayFolder": "No Regrets"
          },
          {
            "name": "Delta vs. Plan ($M)",
            "expression": "[Current Week Cumulative Reduction $] - [TOTAL Current Week OPC Cumulative Reduction $]",
            "formatString": "\\$#,0.00;(\\$#,0.00);\\$#,0.00",
            "displayFolder": "No Regrets",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\" Accuracy=\"2\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "Delta vs. Plan ($M) Conditional",
            "expression": [
              "",
              "IF(",
              "ROUND( [Current Week Cumulative Reduction $], -1 ) >= ",
              "ROUND( [TOTAL Current Week OPC Cumulative Reduction $], -1),",
              "1,0",
              ")"
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "displayFolder": "No Regrets",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "FutureDate?",
            "expression": [
              " ",
              "VAR TotalCurrentWeek = CALCULATE(MAX(Inventory[As_of_Date_int]), ALL('Product'),All(Facility),All('Business Hierarchy')) ",
              "VAR CalFilter = MAX('Calendar'[Day Date INT])",
              "VAR IsFutureDate = CalFilter>TotalCurrentWeek",
              "RETURN",
              "IsFutureDate"
            ],
            "displayFolder": "No Regrets"
          },
          {
            "name": "Current Week Gross Reduction Units",
            "expression": [
              " ",
              "VAR P12 = [P12 No Regrets Units]",
              "VAR CW = [Current Week No Regrets Units]",
              "VAR GrossReduction = P12 - CW",
              "VAR Target = [No Regrets Target Units]",
              "",
              "RETURN",
              "GrossReduction"
            ],
            "formatString": "#,0",
            "displayFolder": "No Regrets"
          },
          {
            "name": "Latest Week Cumulative Reduction $",
            "expression": [
              " ",
              "VAR TotalMaxWeek = CALCULATE(MAX(Inventory[As_of_Date_int]), ALL('Product'), ALL('Calendar'))",
              "RETURN",
              "IF([FutureDate?],",
              "    CALCULATE([Current Week Cumulative Reduction $], 'Calendar'[As of Date INT] = TotalMaxWeek, ALL('Calendar'))",
              ")"
            ],
            "formatString": "\\$#,0.00;(\\$#,0.00);\\$#,0.00",
            "displayFolder": "No Regrets",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\" Accuracy=\"2\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "Latest Week No Regrets $",
            "expression": [
              " ",
              "VAR TotalMaxWeek = CALCULATE(MAX(Inventory[As_of_Date_int]), ALL('Product'), ALL('Calendar'))",
              "RETURN",
              "IF([FutureDate?],",
              "    CALCULATE([Current Week No Regrets $], 'Calendar'[As of Date INT] = TotalMaxWeek, ALL('Calendar'))",
              ")"
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "displayFolder": "No Regrets",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "Remaining To Clear ($M)",
            "expression": " [No Regrets Target $] - [Current Week Cumulative Reduction $]",
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "displayFolder": "No Regrets",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "SKU Sold Out?",
            "expression": [
              " ",
              "VAR SKUCurrentWeek = MAX('Inventory'[As_of_Date_int])",
              "VAR TotalCurrentWeek = CALCULATE(MAX(Inventory[As_of_Date_int]), ALL('Product')) ",
              "VAR SKUMaxWeek = CALCULATE(MAX(Inventory[As_of_Date_int]),ALL('Calendar'))",
              "VAR TotalMaxWeek = CALCULATE(MAX(Inventory[As_of_Date_int]), ALL('Product'),ALL('Calendar')) ",
              "VAR CalFilter = MAX('Calendar'[Day Date INT])",
              "VAR IsFutureDate = CalFilter>TotalCurrentWeek",
              "VAR IsSoldOut = ISBLANK( SKUCurrentWeek )",
              "VAR WasSoldOut = TotalMaxWeek > SKUMaxWeek",
              "VAR FinalSoldOut = OR(AND(IsFutureDate, WasSoldOut), IsSoldOut)",
              "VAR FinalMaxWeek = IF(IsFutureDate, SKUMaxWeek, SKUCurrentWeek)",
              "RETURN",
              "FinalSoldOut"
            ],
            "displayFolder": "No Regrets"
          },
          {
            "name": "Partial Reduction Target Met?",
            "expression": "IF([Remaining To Clear ($M)]>0,\"N\",\"Y\")",
            "isHidden": true,
            "displayFolder": "No Regrets"
          },
          {
            "name": "Finished Good Packages",
            "expression": [
              "",
              "VAR MaxWeekEnd =",
              "        MAX ( 'Inventory'[As_of_Date_int])",
              "RETURN",
              "CALCULATE(",
              "    SUM(Inventory[packages]), ",
              "    'Calendar'[As of Date INT] = MaxWeekEnd",
              ")"
            ],
            "formatString": "#,0",
            "displayFolder": "Finished Goods\\Total"
          },
          {
            "name": "Finished Good Dollars",
            "expression": [
              "",
              "VAR MaxWeekEnd =",
              "        MAX ( 'Inventory'[As_of_Date_int])",
              "RETURN",
              "CALCULATE(",
              "    SUM(Inventory[dollars]), ",
              "    'Calendar'[As of Date INT] = MaxWeekEnd",
              ")"
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "displayFolder": "Finished Goods\\Total",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "Finished Good Units",
            "expression": [
              "",
              "VAR MaxWeekEnd =",
              "        MAX ( 'Inventory'[As_of_Date_int])",
              "RETURN",
              "CALCULATE(",
              "    SUM(Inventory[units]), ",
              "    'Calendar'[As of Date INT] = MaxWeekEnd",
              ")"
            ],
            "formatString": "#,0",
            "displayFolder": "Finished Goods\\Total"
          },
          {
            "name": "Reduction Target Met Flag",
            "expression": [
              "",
              "SWITCH(TRUE(),",
              "    ISBLANK([Current Week No Regrets Left To Dispose $]), BLANK(),",
              "    OR (",
              "            [Current Week No Regrets Left To Dispose $] <= 0,",
              "            [Current Week No Regrets Left To Dispose Units] <= 0",
              "    ),",
              "        \"Y\",",
              "    \"N\"",
              ")"
            ],
            "displayFolder": "No Regrets"
          },
          {
            "name": "SKUCount LY",
            "expression": [
              " ",
              " CALCULATE(",
              "    [SKU Count],",
              " FILTER(",
              "     ALL('Calendar'),",
              "     CONTAINS(",
              "            VALUES(Calendar[LY Day Date]),'Calendar'[LY Day Date],'Calendar'[Day Date]",
              "        )",
              "    )",
              " )"
            ],
            "formatString": "#,0",
            "displayFolder": "SKUCount\\LY"
          },
          {
            "name": "SKUCount vs LY",
            "expression": [
              " ",
              "[SKU Count] - [SKUCount LY]"
            ],
            "formatString": "#,0",
            "displayFolder": "SKUCount\\LY"
          },
          {
            "name": "SKUCount vs LY %",
            "expression": [
              " ",
              "IF(ISBLANK([SKUCount vs LY]),BLANK(), DIVIDE([SKU Count], [SKUCount LY]) -1)"
            ],
            "formatString": "0%;-0%;0%",
            "displayFolder": "SKUCount\\LY"
          },
          {
            "name": "SKUCount Add vs LME",
            "expression": [
              " ",
              "//Get List of Items for comparison period",
              "VAR Prior_SKUs =",
              "    CALCULATETABLE (",
              "        DISTINCT ( 'Product'[SKUCount] ),",
              "        CROSSFILTER ( Inventory[Dim_Item_id], 'Product'[Dim_Item_id], BOTH ),",
              "        'Inventory'[units] > 0,",
              "        FILTER (",
              "            ALL ( 'Calendar' ),",
              "            CONTAINS (",
              "                VALUES ( 'Calendar'[PreviousMonthEnding] ),",
              "                'Calendar'[PreviousMonthEnding], 'Calendar'[Day Date]",
              "            )",
              "        )",
              "    ) ",
              "//Get List of SKUs for Selected week",
              "VAR Current_SKUs =",
              "    CALCULATETABLE (",
              "        DISTINCT ( 'Product'[SKUCount] ),",
              "        CROSSFILTER ( Inventory[Dim_Item_id], 'Product'[Dim_Item_id], BOTH ),",
              "        'Inventory'[units] > 0",
              "    ) ",
              "//Get the list of SKUs added in Current",
              "VAR except_skus =",
              "    EXCEPT ( Current_SKUs, Prior_SKUs )",
              "VAR except_skus_count =",
              "    COUNTROWS ( except_skus )",
              "RETURN",
              "    except_skus_count",
              ""
            ],
            "formatString": "#,0",
            "displayFolder": "SKUCount\\LME"
          },
          {
            "name": "SKUCount Drop vs LME",
            "expression": [
              " ",
              "//Get List of Items for comparison period",
              "VAR Prior_SKUs =",
              "    CALCULATETABLE (",
              "        DISTINCT ( 'Product'[SKUCount] ),",
              "        CROSSFILTER ( Inventory[Dim_Item_id], 'Product'[Dim_Item_id], BOTH ),",
              "        'Inventory'[units] > 0,",
              "        FILTER (",
              "            ALL ( 'Calendar' ),",
              "            CONTAINS (",
              "                VALUES ( 'Calendar'[PreviousMonthEnding] ),",
              "                'Calendar'[PreviousMonthEnding], 'Calendar'[Day Date]",
              "            )",
              "        )",
              "    ) //Get List of SKUs for Selected week",
              "VAR Current_SKUs =",
              "    CALCULATETABLE (",
              "        DISTINCT ( 'Product'[SKUCount] ),",
              "        CROSSFILTER ( Inventory[Dim_Item_id], 'Product'[Dim_Item_id], BOTH ),",
              "        'Inventory'[units] > 0",
              "    ) //Get the list of SKUs added in Current",
              "VAR except_skus =",
              "    EXCEPT ( Prior_SKUs, Current_SKUs )",
              "VAR except_skus_count =",
              "    COUNTROWS ( except_skus )",
              "RETURN",
              "    except_skus_count",
              ""
            ],
            "formatString": "#,0",
            "displayFolder": "SKUCount\\LME"
          },
          {
            "name": "SKUCount Add vs LYE",
            "expression": [
              "",
              "//Get List of Items for comparison period",
              "VAR Prior_SKUs =",
              "    CALCULATETABLE (",
              "        DISTINCT ( 'Product'[SKUCount] ),",
              "        CROSSFILTER ( Inventory[Dim_Item_id], 'Product'[Dim_Item_id], BOTH ),",
              "        'Inventory'[units] > 0,",
              "        FILTER (",
              "            ALL ( 'Calendar' ),",
              "            CONTAINS (",
              "                VALUES ( Calendar[PreviousYearEnding] ),",
              "                'Calendar'[PreviousYearEnding], 'Calendar'[Day Date]",
              "            )",
              "        )",
              "    ) ",
              "//Get List of SKUs for Selected week",
              "VAR Current_SKUs =",
              "    CALCULATETABLE (",
              "        DISTINCT ( 'Product'[SKUCount] ),",
              "        CROSSFILTER ( Inventory[Dim_Item_id], 'Product'[Dim_Item_id], BOTH ),",
              "        'Inventory'[units] > 0",
              "    ) ",
              "//Get the list of SKUs added in Current",
              "VAR except_skus =",
              "    EXCEPT ( Current_SKUs, Prior_SKUs )",
              "VAR except_skus_count =",
              "    COUNTROWS ( except_skus )",
              "RETURN",
              "    except_skus_count",
              ""
            ],
            "formatString": "#,0",
            "displayFolder": "SKUCount\\LYE"
          },
          {
            "name": "SKUCount Drop vs LYE",
            "expression": [
              "",
              "//Get List of Items for comparison period",
              "VAR Prior_SKUs =",
              "    CALCULATETABLE (",
              "        DISTINCT ( 'Product'[SKUCount] ),",
              "        CROSSFILTER ( Inventory[Dim_Item_id], 'Product'[Dim_Item_id], BOTH ),",
              "        'Inventory'[units] > 0,",
              "        FILTER (",
              "            ALL ( 'Calendar' ),",
              "            CONTAINS (",
              "                VALUES ( Calendar[PreviousYearEnding] ),",
              "                'Calendar'[PreviousYearEnding], 'Calendar'[Day Date]",
              "            )",
              "        )",
              "    ) //Get List of SKUs for Selected week",
              "VAR Current_SKUs =",
              "    CALCULATETABLE (",
              "        DISTINCT ( 'Product'[SKUCount] ),",
              "        CROSSFILTER ( Inventory[Dim_Item_id], 'Product'[Dim_Item_id], BOTH ),",
              "        'Inventory'[units] > 0",
              "    ) //Get the list of SKUs added in Current",
              "VAR except_skus =",
              "    EXCEPT ( Prior_SKUs, Current_SKUs )",
              "VAR except_skus_count =",
              "    COUNTROWS ( except_skus )",
              "RETURN",
              "    except_skus_count",
              ""
            ],
            "formatString": "#,0",
            "displayFolder": "SKUCount\\LYE"
          },
          {
            "name": "SKUCount Add vs LY",
            "expression": [
              " ",
              "//Get List of Items for comparison period",
              "VAR Prior_SKUs =",
              "    CALCULATETABLE (",
              "        DISTINCT ( 'Product'[SKUCount] ),",
              "        CROSSFILTER ( Inventory[Dim_Item_id], 'Product'[Dim_Item_id], BOTH ),",
              "        'Inventory'[units] > 0,",
              "        FILTER (",
              "            ALL ( 'Calendar' ),",
              "            CONTAINS (",
              "                VALUES ( 'Calendar'[LY Day Date] ),",
              "                'Calendar'[LY Day Date], 'Calendar'[Day Date]",
              "            )",
              "        )",
              "    ) ",
              "//Get List of SKUs for Selected week",
              "VAR Current_SKUs =",
              "    CALCULATETABLE (",
              "        DISTINCT ( 'Product'[SKUCount] ),",
              "        CROSSFILTER ( Inventory[Dim_Item_id], 'Product'[Dim_Item_id], BOTH ),",
              "        'Inventory'[units] > 0",
              "    ) ",
              "//Get the list of SKUs added in Current",
              "VAR except_skus =",
              "    EXCEPT ( Current_SKUs, Prior_SKUs )",
              "VAR except_skus_count =",
              "    COUNTROWS ( except_skus )",
              "RETURN",
              "    except_skus_count",
              ""
            ],
            "formatString": "#,0",
            "displayFolder": "SKUCount\\LY"
          },
          {
            "name": "SKUCount Drop vs LY",
            "expression": [
              " ",
              "//Get List of Items for comparison period",
              "VAR Prior_SKUs =",
              "    CALCULATETABLE (",
              "        DISTINCT ( 'Product'[SKUCount] ),",
              "        CROSSFILTER ( Inventory[Dim_Item_id], 'Product'[Dim_Item_id], BOTH ),",
              "        'Inventory'[units] > 0,",
              "        FILTER (",
              "            ALL ( 'Calendar' ),",
              "            CONTAINS (",
              "                VALUES ( 'Calendar'[LY Day Date] ),",
              "                'Calendar'[LY Day Date], 'Calendar'[Day Date]",
              "            )",
              "        )",
              "    ) //Get List of SKUs for Selected week",
              "VAR Current_SKUs =",
              "    CALCULATETABLE (",
              "        DISTINCT ( 'Product'[SKUCount] ),",
              "        CROSSFILTER ( Inventory[Dim_Item_id], 'Product'[Dim_Item_id], BOTH ),",
              "        'Inventory'[units] > 0",
              "    ) //Get the list of SKUs added in Current",
              "VAR except_skus =",
              "    EXCEPT ( Prior_SKUs, Current_SKUs )",
              "VAR except_skus_count =",
              "    COUNTROWS ( except_skus )",
              "RETURN",
              "    except_skus_count",
              ""
            ],
            "formatString": "#,0",
            "displayFolder": "SKUCount\\LY"
          },
          {
            "name": "SKUCount Change vs LME",
            "expression": [
              " [SKUCount Add vs LME]-[SKUCount Drop vs LME]",
              ""
            ],
            "formatString": "#,0",
            "displayFolder": "SKUCount\\LME"
          },
          {
            "name": "SKUCount Change vs LYE",
            "expression": " [SKUCount Add vs LYE]-[SKUCount Drop vs LYE]",
            "formatString": "#,0",
            "displayFolder": "SKUCount\\LYE"
          },
          {
            "name": "SKUCount Change vs LY",
            "expression": "[SKUCount Add vs LY]-[SKUCount Drop vs LY]",
            "formatString": "#,0",
            "displayFolder": "SKUCount\\LY"
          },
          {
            "name": "SKUCount LME",
            "expression": [
              " ",
              " CALCULATE(",
              "    [SKU Count],",
              " FILTER(",
              "     ALL('Calendar'),",
              "     CONTAINS(",
              "            VALUES('Calendar'[PreviousMonthEnding]),'Calendar'[PreviousMonthEnding],'Calendar'[Day Date]",
              "        )",
              "    )",
              " )",
              ""
            ],
            "formatString": "#,0",
            "displayFolder": "SKUCount\\LME"
          },
          {
            "name": "SKUCount vs LME %",
            "expression": [
              " ",
              "IF(ISBLANK([SKU Count]),BLANK(),DIVIDE([SKU Count], [SKUCount LME])-1)"
            ],
            "formatString": "0%;-0%;0%",
            "displayFolder": "SKUCount\\LME"
          },
          {
            "name": "SKUCount LYE",
            "expression": [
              " ",
              " CALCULATE(",
              "    [SKU Count],",
              " FILTER(",
              "     ALL('Calendar'),",
              "     CONTAINS(",
              "            VALUES('Calendar'[PreviousYearEnding]),'Calendar'[PreviousYearEnding],'Calendar'[Day Date]",
              "        )",
              "    )",
              " )"
            ],
            "formatString": "#,0",
            "displayFolder": "SKUCount\\LYE"
          },
          {
            "name": "SKUCount vs LYE %",
            "expression": [
              " ",
              "IF(ISBLANK([SKU Count]),BLANK(),DIVIDE([SKU Count], [SKUCount LYE]))"
            ],
            "formatString": "0%;-0%;0%",
            "displayFolder": "SKUCount\\LYE"
          },
          {
            "name": "SKUCount Change vs LYE %",
            "expression": [
              " ",
              "IF(ISBLANK([SKU Count]),BLANK(),DIVIDE( [SKUCount Change vs LYE], [SKUCount LYE]))"
            ],
            "formatString": "0%;-0%;0%",
            "displayFolder": "SKUCount\\LYE"
          },
          {
            "name": "SKUCount Change vs LYE(ABS)",
            "expression": "ABS( [SKUCount Add vs LYE]-[SKUCount Drop vs LYE])",
            "formatString": "#,0",
            "displayFolder": "SKUCount\\LYE"
          },
          {
            "name": "SKUCount Change vs LYE %(ABS)",
            "expression": [
              " ",
              "IF(ISBLANK([SKU Count]),BLANK(),DIVIDE( [SKUCount Change vs LYE(ABS)], [SKUCount LYE]))"
            ],
            "formatString": "0%;-0%;0%",
            "displayFolder": "SKUCount\\LYE"
          },
          {
            "name": "Current Week No Regrets Left To Dispose $ %",
            "expression": [
              "",
              "DIVIDE([Current Week No Regrets Left To Dispose $],[No Regrets Target $])",
              ""
            ],
            "formatString": "0%;-0%;0%",
            "displayFolder": "No Regrets"
          },
          {
            "name": "SKUCount Drop vs LYE(neg)",
            "expression": "[SKUCount Drop vs LYE]*-1 ",
            "formatString": "#,0",
            "displayFolder": "SKUCount\\LYE"
          },
          {
            "name": "SKUCount Drop vs LME(neg)",
            "expression": " [SKUCount Drop vs LME]*-1",
            "formatString": "#,0",
            "displayFolder": "SKUCount\\LME"
          },
          {
            "name": "SKUCount Drop vs LY(neg)",
            "expression": " [SKUCount Drop vs LY]*-1",
            "formatString": "#,0",
            "displayFolder": "SKUCount\\LY"
          },
          {
            "name": "SKUCount LME vs LYE",
            "expression": " [SKUCount LME]-[SKUCount LYE]",
            "formatString": "#,0",
            "displayFolder": "SKUCount\\LME"
          },
          {
            "name": "SKUCount NR Left to Dispose vs LYE",
            "expression": " [SKUCount LYE]-[SKUCount Change vs LYE(ABS)]",
            "formatString": "#,0",
            "displayFolder": "No Regrets"
          },
          {
            "name": "SKUCount NR Left to Dispose vs LYE %",
            "expression": " DIVIDE([SKUCount NR Left to Dispose vs LYE],[SKUCount LYE])",
            "formatString": "0%;-0%;0%",
            "displayFolder": "No Regrets"
          },
          {
            "name": "SKUCount LME vs LYE %",
            "expression": " Divide([SKUCount LME],[SKUCount LYE])-1",
            "formatString": "0%;-0%;0%",
            "displayFolder": "SKUCount\\LME"
          },
          {
            "name": "Global SKU Count",
            "expression": " [SKU Count] + [SRE_SKU Count]",
            "formatString": "#,0",
            "displayFolder": "GlobalKPIs\\SKUCount"
          },
          {
            "name": "Global SKU Count LME",
            "expression": [
              "",
              "[SKUCount LME] + [SRE_SKUCount LME]"
            ],
            "formatString": "#,0",
            "displayFolder": "GlobalKPIs\\SKUCount"
          },
          {
            "name": "Global SKU Count LYE",
            "expression": " [SRE_SKUCount LYE] + [SKUCount LYE]",
            "formatString": "#,0",
            "displayFolder": "GlobalKPIs\\SKUCount"
          },
          {
            "name": "Global SKU Count LME vs LYE",
            "expression": " [Global SKU Count LME] - [Global SKU Count LYE]",
            "formatString": "#,0",
            "displayFolder": "GlobalKPIs\\SKUCount"
          },
          {
            "name": "Global SKU Count LME vs LYE %",
            "expression": " Divide([Global SKU Count LME],[Global SKU Count LYE])-1",
            "formatString": "#,0%;-#,0%;#,0%",
            "displayFolder": "GlobalKPIs\\SKUCount"
          },
          {
            "name": "SKU Count Units Binary Flag",
            "expression": [
              "",
              "VAR TotalUnits_SKUDateFacility = ",
              "CALCULATE (",
              "    SUMX(",
              "        Inventory,",
              "        Inventory[units]",
              "    ),",
              "    ALLEXCEPT (",
              "        'Inventory',",
              "        'Inventory'[Dim_Item_id],",
              "        Inventory[As_of_Date_int],",
              "        'Inventory'[business_segment_hierarchy_id]",
              "    )",
              ")",
              "VAR MaxUnits_SKUDateFacility = ",
              "CALCULATE (",
              "    MAX(Inventory[units]),",
              "    ALLEXCEPT (",
              "        'Inventory',",
              "        'Inventory'[Dim_Item_id],",
              "        Inventory[As_of_Date_int],",
              "        'Inventory'[business_segment_hierarchy_id]",
              "    )",
              ")",
              "VAR Result = ",
              "SWITCH(TRUE(),",
              "    TotalUnits_SKUDateFacility > 0 , \"Total Positive Units (counted)\",",
              "    MaxUnits_SKUDateFacility < 0, \"Total Negative Units (not counted)\",",
              "    \"Total Negative Units, but at least one positive facility (counted)\"",
              ")",
              "RETURN",
              "Result"
            ],
            "displayFolder": "SKUCount\\Total"
          },
          {
            "name": "Finished Good Dollars Turns (2pt)",
            "expression": [
              "",
              "VAR TwelveMonthsCOGS = ",
              "IF (",
              "    [ShowValueForDates],",
              "    VAR NumOfDays = 362",
              "    VAR LastDay =",
              "    CALCULATE([MaxSequentialNumber],",
              "        CROSSFILTER(Inventory[As_of_Date_int], 'Calendar'[Day Date INT], Both)",
              "    )",
              "    VAR FirstDay = LastDay- NumOfDays",
              "    VAR Result =",
              "        CALCULATE (",
              "            [Pre-incentive COGS $],",
              "            REMOVEFILTERS('Calendar'),",
              "            'Calendar'[Sequential Day Number] >=FirstDay",
              "                && 'Calendar'[Sequential Day Number] <= LastDay",
              "        )",
              "",
              "    RETURN",
              "    Result",
              "",
              ")",
              "VAR CurrentMonthInv = [Finished Good Dollars]",
              "VAR LastYearInv =",
              "    VAR CalendarIsFiltered =",
              "        ISFILTERED ( 'calendar' )",
              "    VAR MaxDate =",
              "        LOOKUPVALUE (",
              "            'Calendar'[LY Day Date],",
              "            'Calendar'[Day Date INT], [LastDateWithData]",
              "        )",
              "    RETURN",
              "        IF (",
              "            CalendarIsFiltered && [ShowValueForDates],",
              "            CALCULATE (",
              "                [Finished Good Dollars],",
              "                FILTER (",
              "                    ALL ( 'Calendar' ),",
              "                    CONTAINS (",
              "                        VALUES ( 'Calendar'[LY Day Date] ),",
              "                        'Calendar'[LY Day Date], 'Calendar'[Day Date]",
              "                    )",
              "                )",
              "            ),",
              "            CALCULATE ( [Finished Good Dollars] , 'Calendar'[Day Date] = MaxDate )",
              "        )",
              "",
              "VAR AvgInv = ",
              "    IF (",
              "        [ShowValueForDates],",
              "            (CurrentMonthInv + LastYearInv) / 2",
              "    )",
              "",
              "VAR Result = DIVIDE(TwelveMonthsCOGS, AvgInv)",
              "",
              "RETURN",
              "Result"
            ],
            "formatString": "#,0.00",
            "displayFolder": "Statistics\\Turns"
          },
          {
            "name": "Finished Good Dollars Turns (2pt) Average Inventory",
            "expression": [
              "",
              "VAR TwelveMonthsCOGS = ",
              "IF (",
              "    [ShowValueForDates],",
              "    VAR NumOfDays = 362",
              "    VAR LastDay =",
              "    CALCULATE(        ",
              "        MAX ( 'Calendar'[Sequential Day Number] ),",
              "        CROSSFILTER(Inventory[As_of_Date_int], 'Calendar'[Day Date INT], Both)",
              "    )",
              "    VAR FirstDay = LastDay- NumOfDays",
              "    VAR Result =",
              "        CALCULATE (",
              "            [Pre-incentive COGS $],",
              "            REMOVEFILTERS('Calendar'),",
              "            'Calendar'[Sequential Day Number] >=FirstDay",
              "                && 'Calendar'[Sequential Day Number] <= LastDay",
              "        )",
              "",
              "    RETURN",
              "    Result",
              "",
              ")",
              "VAR CurrentMonthInv = [Finished Good Dollars]",
              "VAR LastYearInv =",
              "    VAR CalendarIsFiltered =",
              "        ISFILTERED ( 'calendar' )",
              "    VAR MaxDate =",
              "        LOOKUPVALUE (",
              "            'Calendar'[LY Day Date],",
              "            'Calendar'[Day Date INT], [LastDateWithData]",
              "        )",
              "    RETURN",
              "        IF (",
              "            CalendarIsFiltered && [ShowValueForDates],",
              "            CALCULATE (",
              "                [Finished Good Dollars],",
              "                FILTER (",
              "                    ALL ( 'Calendar' ),",
              "                    CONTAINS (",
              "                        VALUES ( 'Calendar'[LY Day Date] ),",
              "                        'Calendar'[LY Day Date], 'Calendar'[Day Date]",
              "                    )",
              "                )",
              "            ),",
              "            CALCULATE ( [Finished Good Dollars] , 'Calendar'[Day Date] = MaxDate )",
              "        )",
              "",
              "VAR AvgInv = ",
              "    IF (",
              "        [ShowValueForDates],",
              "            (CurrentMonthInv + LastYearInv) / 2",
              "    )",
              "",
              "VAR Result = DIVIDE(TwelveMonthsCOGS, AvgInv)",
              "",
              "RETURN",
              "AvgInv"
            ],
            "formatString": "\\$#,0.00;(\\$#,0.00);\\$#,0.00",
            "displayFolder": "Statistics\\Turns",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\" Accuracy=\"2\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "Finished Good Dollars Turns (2pt) 12M COGS",
            "expression": [
              "",
              "VAR TwelveMonthsCOGS = ",
              "IF (",
              "    [ShowValueForDates],",
              "    VAR NumOfDays = 362",
              "    VAR LastDay =",
              "    CALCULATE([MaxSequentialNumber],",
              "        CROSSFILTER(Inventory[As_of_Date_int], 'Calendar'[Day Date INT], Both)",
              "    )",
              "    VAR FirstDay = LastDay- NumOfDays",
              "    VAR Result =",
              "        CALCULATE (",
              "            [Pre-incentive COGS $],",
              "            REMOVEFILTERS('Calendar'),",
              "            'Calendar'[Sequential Day Number] >=FirstDay",
              "                && 'Calendar'[Sequential Day Number] <= LastDay",
              "        )",
              "",
              "    RETURN",
              "    Result",
              "",
              ")",
              "VAR CurrentMonthInv = [Finished Good Dollars]",
              "VAR LastYearInv =",
              "    VAR CalendarIsFiltered =",
              "        ISFILTERED ( 'calendar' )",
              "    VAR MaxDate =",
              "        LOOKUPVALUE (",
              "            'Calendar'[LY Day Date],",
              "            'Calendar'[Day Date INT], [LastDateWithData]",
              "        )",
              "    RETURN",
              "        IF (",
              "            CalendarIsFiltered && [ShowValueForDates],",
              "            CALCULATE (",
              "                [Finished Good Dollars],",
              "                FILTER (",
              "                    ALL ( 'Calendar' ),",
              "                    CONTAINS (",
              "                        VALUES ( 'Calendar'[LY Day Date] ),",
              "                        'Calendar'[LY Day Date], 'Calendar'[Day Date]",
              "                    )",
              "                )",
              "            ),",
              "            CALCULATE ( [Finished Good Dollars] , 'Calendar'[Day Date] = MaxDate )",
              "        )",
              "",
              "VAR AvgInv = ",
              "    IF (",
              "        [ShowValueForDates],",
              "            (CurrentMonthInv + LastYearInv) / 2",
              "    )",
              "",
              "VAR Result = DIVIDE(TwelveMonthsCOGS, AvgInv)",
              "",
              "RETURN",
              "TwelveMonthsCOGS"
            ],
            "formatString": "\\$#,0.00;(\\$#,0.00);\\$#,0.00",
            "displayFolder": "Statistics\\Turns",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\" Accuracy=\"2\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "Finished Good Dollars GMROI (2pt)",
            "expression": [
              "",
              "VAR TwelveMonthsGrossMargin = ",
              "IF (",
              "    [ShowValueForDates],",
              "    VAR NumOfDays = 362",
              "    VAR LastDay =",
              "    CALCULATE([MaxSequentialNumber],",
              "        CROSSFILTER(Inventory[As_of_Date_int], 'Calendar'[Day Date INT], Both)",
              "    )",
              "    VAR FirstDay = LastDay- NumOfDays",
              "    VAR Result =",
              "        CALCULATE (",
              "            [Pre-incentive Gross Margin $],",
              "            REMOVEFILTERS('Calendar'),",
              "            'Calendar'[Sequential Day Number] >=FirstDay",
              "                && 'Calendar'[Sequential Day Number] <= LastDay",
              "        )",
              "",
              "    RETURN",
              "    Result",
              "",
              ")",
              "VAR CurrentMonthInv = [Finished Good Dollars]",
              "VAR LastYearInv =",
              "    VAR CalendarIsFiltered =",
              "        ISFILTERED ( 'calendar' )",
              "    VAR MaxDate =",
              "        LOOKUPVALUE (",
              "            'Calendar'[LY Day Date],",
              "            'Calendar'[Day Date INT], [LastDateWithData]",
              "        )",
              "    RETURN",
              "        IF (",
              "            CalendarIsFiltered && [ShowValueForDates],",
              "            CALCULATE (",
              "                [Finished Good Dollars],",
              "                FILTER (",
              "                    ALL ( 'Calendar' ),",
              "                    CONTAINS (",
              "                        VALUES ( 'Calendar'[LY Day Date] ),",
              "                        'Calendar'[LY Day Date], 'Calendar'[Day Date]",
              "                    )",
              "                )",
              "            ),",
              "            CALCULATE ( [Finished Good Dollars] , 'Calendar'[Day Date] = MaxDate )",
              "        )",
              "",
              "VAR AvgInv = ",
              "    IF (",
              "        [ShowValueForDates],",
              "            (CurrentMonthInv + LastYearInv) / 2",
              "    )",
              "",
              "VAR Result = DIVIDE(TwelveMonthsGrossMargin, AvgInv)",
              "",
              "RETURN",
              "Result"
            ],
            "formatString": "#,0.00",
            "displayFolder": "Statistics\\GMROI"
          },
          {
            "name": "Finished Good Dollars GMROI (2pt) 12M GM",
            "expression": [
              "",
              "VAR TwelveMonthsGrossMargin = ",
              "IF (",
              "    [ShowValueForDates],",
              "    VAR NumOfDays = 362",
              "    VAR LastDay =",
              "    CALCULATE([MaxSequentialNumber],",
              "        CROSSFILTER(Inventory[As_of_Date_int], 'Calendar'[Day Date INT], Both)",
              "    )",
              "    VAR FirstDay = LastDay- NumOfDays",
              "    VAR Result =",
              "        CALCULATE (",
              "            [Pre-incentive Gross Margin $],",
              "            REMOVEFILTERS('Calendar'),",
              "            'Calendar'[Sequential Day Number] >=FirstDay",
              "                && 'Calendar'[Sequential Day Number] <= LastDay",
              "        )",
              "",
              "    RETURN",
              "    Result",
              "",
              ")",
              "VAR CurrentMonthInv = [Finished Good Dollars]",
              "VAR LastYearInv =",
              "    VAR CalendarIsFiltered =",
              "        ISFILTERED ( 'calendar' )",
              "    VAR MaxDate =",
              "        LOOKUPVALUE (",
              "            'Calendar'[LY Day Date],",
              "            'Calendar'[Day Date INT], [LastDateWithData]",
              "        )",
              "    RETURN",
              "        IF (",
              "            CalendarIsFiltered && [ShowValueForDates],",
              "            CALCULATE (",
              "                [Finished Good Dollars],",
              "                FILTER (",
              "                    ALL ( 'Calendar' ),",
              "                    CONTAINS (",
              "                        VALUES ( 'Calendar'[LY Day Date] ),",
              "                        'Calendar'[LY Day Date], 'Calendar'[Day Date]",
              "                    )",
              "                )",
              "            ),",
              "            CALCULATE ( [Finished Good Dollars] , 'Calendar'[Day Date] = MaxDate )",
              "        )",
              "",
              "VAR AvgInv = ",
              "    IF (",
              "        [ShowValueForDates],",
              "            (CurrentMonthInv + LastYearInv) / 2",
              "    )",
              "",
              "VAR Result = DIVIDE(TwelveMonthsGrossMargin, AvgInv)",
              "",
              "RETURN",
              "TwelveMonthsGrossMargin"
            ],
            "formatString": "\\$#,0.00;(\\$#,0.00);\\$#,0.00",
            "displayFolder": "Statistics\\GMROI",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\" Accuracy=\"2\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "Finished Good Dollars / Last 12 M Pre-incentive Sales Ratio",
            "expression": [
              "",
              "VAR TwelveMonthsSales = ",
              "IF (",
              "    [ShowValueForDates],",
              "    VAR NumOfDays = 362",
              "    VAR LastDay =",
              "    CALCULATE([MaxSequentialNumber],",
              "        CROSSFILTER(Inventory[As_of_Date_int], 'Calendar'[Day Date INT], Both)",
              "    )",
              "    VAR FirstDay = LastDay- NumOfDays",
              "    VAR Result =",
              "        CALCULATE (",
              "            [Pre-incentive Sales $],",
              "            REMOVEFILTERS('Calendar'),",
              "            'Calendar'[Sequential Day Number] >=FirstDay",
              "                && 'Calendar'[Sequential Day Number] <= LastDay",
              "        )",
              "",
              "    RETURN",
              "    Result",
              "",
              ")",
              "VAR CurrentMonthInv = [Finished Good Dollars]",
              "VAR LastYearInv =",
              "    VAR CalendarIsFiltered =",
              "        ISFILTERED ( 'calendar' )",
              "    VAR MaxDate =",
              "        LOOKUPVALUE (",
              "            'Calendar'[LY Day Date],",
              "            'Calendar'[Day Date INT], [LastDateWithData]",
              "        )",
              "    RETURN",
              "        IF (",
              "            CalendarIsFiltered && [ShowValueForDates],",
              "            CALCULATE (",
              "                [Finished Good Dollars],",
              "                FILTER (",
              "                    ALL ( 'Calendar' ),",
              "                    CONTAINS (",
              "                        VALUES ( 'Calendar'[LY Day Date] ),",
              "                        'Calendar'[LY Day Date], 'Calendar'[Day Date]",
              "                    )",
              "                )",
              "            ),",
              "            CALCULATE ( [Finished Good Dollars] , 'Calendar'[Day Date] = MaxDate )",
              "        )",
              "",
              "VAR AvgInv = ",
              "    IF (",
              "        [ShowValueForDates],",
              "            (CurrentMonthInv + LastYearInv) / 2",
              "    )",
              "",
              "VAR Result = DIVIDE(AvgInv, TwelveMonthsSales)",
              "",
              "RETURN",
              "Result"
            ],
            "formatString": "#,0.0",
            "displayFolder": "Statistics\\SalesRatio"
          },
          {
            "name": "Finished Good Dollars DIO (2pt)",
            "expression": [
              "",
              "VAR TwelveMonthsCOGS = ",
              "IF (",
              "    [ShowValueForDates],",
              "    VAR NumOfDays = 362",
              "    VAR LastDay =",
              "    CALCULATE([MaxSequentialNumber],",
              "        CROSSFILTER(Inventory[As_of_Date_int], 'Calendar'[Day Date INT], Both)",
              "    )",
              "    VAR FirstDay = LastDay- NumOfDays",
              "    VAR Result =",
              "        CALCULATE (",
              "            [Pre-incentive COGS $],",
              "            REMOVEFILTERS('Calendar'),",
              "            'Calendar'[Sequential Day Number] >=FirstDay",
              "                && 'Calendar'[Sequential Day Number] <= LastDay",
              "        )",
              "",
              "    RETURN",
              "    Result",
              "",
              ")",
              "VAR CurrentMonthInv = [Finished Good Dollars]",
              "VAR LastYearInv =",
              "    VAR CalendarIsFiltered =",
              "        ISFILTERED ( 'calendar' )",
              "    VAR MaxDate =",
              "        LOOKUPVALUE (",
              "            'Calendar'[LY Day Date],",
              "            'Calendar'[Day Date INT], [LastDateWithData]",
              "        )",
              "    RETURN",
              "        IF (",
              "            CalendarIsFiltered && [ShowValueForDates],",
              "            CALCULATE (",
              "                [Finished Good Dollars],",
              "                FILTER (",
              "                    ALL ( 'Calendar' ),",
              "                    CONTAINS (",
              "                        VALUES ( 'Calendar'[LY Day Date] ),",
              "                        'Calendar'[LY Day Date], 'Calendar'[Day Date]",
              "                    )",
              "                )",
              "            ),",
              "            CALCULATE ( [Finished Good Dollars] , 'Calendar'[Day Date] = MaxDate )",
              "        )",
              "",
              "VAR AvgInv = ",
              "    IF (",
              "        [ShowValueForDates],",
              "            (CurrentMonthInv + LastYearInv) / 2",
              "    )",
              "",
              "VAR Result = DIVIDE(AvgInv,TwelveMonthsCOGS) * 364",
              "",
              "RETURN",
              "Result"
            ],
            "formatString": "#,0.0",
            "displayFolder": "Statistics\\Turns"
          },
          {
            "name": "Sum of 2021 Ambition",
            "expression": [
              "",
              "SUM('SKUCount Goals'[2021 Ambition])"
            ],
            "formatString": "#,0.00",
            "displayFolder": "SKUCount\\Ambitions"
          },
          {
            "name": "vs 2021 Ambition",
            "expression": [
              "",
              "[Global SKU Count] - [Sum of 2021 Ambition]",
              ""
            ],
            "formatString": "#,0",
            "displayFolder": "SKUCount\\Ambitions"
          },
          {
            "name": "vs 2021 Ambition %",
            "expression": [
              "",
              "DIVIDE([vs 2021 Ambition], [Sum of 2021 Ambition])"
            ],
            "formatString": "0%;-0%;0%",
            "displayFolder": "SKUCount\\Ambitions"
          },
          {
            "name": "SKU Count Ambition Formatting",
            "expression": [
              "",
              "SWITCH(TRUE(),",
              "[vs 2021 Ambition %] > .1, 3,",
              "[vs 2021 Ambition %] > 0, 2,",
              "1",
              ")"
            ],
            "formatString": "0",
            "displayFolder": "SKUCount\\Ambitions"
          },
          {
            "name": "Finished Good Dollars per SKU",
            "expression": [
              "",
              "DIVIDE([Finished Good Dollars], [SKU Count])"
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "displayFolder": "Statistics\\Per SKU",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "Pre-incentive Sales Dollars per SKU",
            "expression": [
              "",
              "VAR CalendarIsFiltered =",
              "    ISFILTERED ( 'calendar' )",
              "VAR MaxDate =",
              "    LOOKUPVALUE (",
              "        'Calendar'[LY Day Date],",
              "        'Calendar'[Day Date INT], [LastDateWithData]",
              "    )",
              "VAR TwelveMonthsSales = ",
              "\tIF  (",
              "\t\t\t[ShowValueForDates],",
              "\t\t\tVAR NumOfDays = 362",
              "\t\t\tVAR LastDay = [MaxSequentialNumber]",
              "\t\t\tVAR FirstDay = LastDay- NumOfDays",
              "\t\t\tVAR Result =",
              "\t\t\t\tCALCULATE ",
              "\t\t\t\t\t\t(",
              "\t\t\t\t\t\t\t[Pre-incentive Sales $],",
              "\t\t\t\t\t\t\tREMOVEFILTERS('Calendar'),",
              "\t\t\t\t\t\t\t'Calendar'[Sequential Day Number] >=FirstDay",
              "\t\t\t\t\t\t\t\t&& 'Calendar'[Sequential Day Number] <= LastDay",
              "\t\t\t\t\t\t)",
              "\t\t\tRETURN",
              "\t\t\tResult",
              "\t\t)",
              "\t\t",
              "VAR CurrentMonthSKUCount = [SKU Count]",
              "",
              "VAR LastYearSKUCount = ",
              "   IF (",
              "        CalendarIsFiltered && [ShowValueForDates],",
              "        CALCULATE (",
              "            [SKU Count],",
              "            FILTER (",
              "                ALL ( 'Calendar' ),",
              "                CONTAINS (",
              "                    VALUES ( 'Calendar'[LY Day Date] ),",
              "                    'Calendar'[LY Day Date], 'Calendar'[Day Date]",
              "                )",
              "            )",
              "        ),",
              "        CALCULATE ( [SKU Count] , 'Calendar'[Day Date] = MaxDate )",
              "    )",
              "",
              "VAR AvgSKUCount = (CurrentMonthSKUCount + LastYearSKUCount) / 2\t\t",
              "",
              "VAR Result = DIVIDE(TwelveMonthsSales, AvgSKUCount)",
              "",
              "RETURN",
              "Result"
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "displayFolder": "Statistics\\Per SKU",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "Pre-incentive Gross Margin Dollars per SKU",
            "expression": [
              "",
              "VAR CalendarIsFiltered =",
              "    ISFILTERED ( 'calendar' )",
              "VAR MaxDate =",
              "    LOOKUPVALUE (",
              "        'Calendar'[LY Day Date],",
              "        'Calendar'[Day Date INT], [LastDateWithData]",
              "    )",
              "VAR TwelveMonthsSales = ",
              "\tIF  (",
              "\t\t\t[ShowValueForDates],",
              "\t\t\tVAR NumOfDays = 362",
              "\t\t\tVAR LastDay = [MaxSequentialNumber]",
              "\t\t\tVAR FirstDay = LastDay- NumOfDays",
              "\t\t\tVAR Result =",
              "\t\t\t\tCALCULATE ",
              "\t\t\t\t\t\t(",
              "\t\t\t\t\t\t\t[Pre-incentive Gross Margin $],",
              "\t\t\t\t\t\t\tREMOVEFILTERS('Calendar'),",
              "\t\t\t\t\t\t\t'Calendar'[Sequential Day Number] >=FirstDay",
              "\t\t\t\t\t\t\t\t&& 'Calendar'[Sequential Day Number] <= LastDay",
              "\t\t\t\t\t\t)",
              "\t\t\tRETURN",
              "\t\t\tResult",
              "\t\t)",
              "\t\t",
              "VAR CurrentMonthSKUCount = [SKU Count]",
              "",
              "VAR LastYearSKUCount = ",
              "   IF (",
              "        CalendarIsFiltered && [ShowValueForDates],",
              "        CALCULATE (",
              "            [SKU Count],",
              "            FILTER (",
              "                ALL ( 'Calendar' ),",
              "                CONTAINS (",
              "                    VALUES ( 'Calendar'[LY Day Date] ),",
              "                    'Calendar'[LY Day Date], 'Calendar'[Day Date]",
              "                )",
              "            )",
              "        ),",
              "        CALCULATE ( [SKU Count] , 'Calendar'[Day Date] = MaxDate )",
              "    )",
              "",
              "VAR AvgSKUCount = (CurrentMonthSKUCount + LastYearSKUCount) / 2\t\t",
              "",
              "VAR Result = DIVIDE(TwelveMonthsSales, AvgSKUCount)",
              "",
              "RETURN",
              "Result"
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "displayFolder": "Statistics\\Per SKU",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "Finished Good Dollars (Millions)",
            "expression": [
              " ",
              "SWITCH(TRUE(),",
              "    SEARCH(\"%\", SELECTEDVALUE('_Scenario'[Scenario]),,0)>0, [Finished Good Dollars],",
              "    DIVIDE([Finished Good Dollars], 1000000)",
              ")"
            ],
            "formatString": "\\$#,0.0;(\\$#,0.0);\\$#,0.0",
            "displayFolder": "Finished Goods\\Total",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\" Accuracy=\"1\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "Finished Good Packages (Millions)",
            "expression": [
              " ",
              "SWITCH(TRUE(),",
              "    SEARCH(\"%\", SELECTEDVALUE('_Scenario'[Scenario]),,0)>0, [Finished Good Packages],",
              "    DIVIDE([Finished Good Packages], 1000000)",
              ")"
            ],
            "formatString": "#,0",
            "displayFolder": "Finished Goods\\Total"
          },
          {
            "name": "Finished Good Units (Millions)",
            "expression": [
              " ",
              "SWITCH(TRUE(),",
              "    SEARCH(\"%\", SELECTEDVALUE('_Scenario'[Scenario]),,0)>0, [Finished Good Units],",
              "    DIVIDE([Finished Good Units], 1000000)",
              ")"
            ],
            "formatString": "#,0",
            "displayFolder": "Finished Goods\\Total"
          },
          {
            "name": "Finished Good Dollars LY",
            "expression": [
              " ",
              "    VAR CalendarIsFiltered =",
              "        ISFILTERED ( 'calendar' )",
              "    VAR MaxDate =",
              "        LOOKUPVALUE (",
              "            'Calendar'[LY Day Date],",
              "            'Calendar'[Day Date INT], [LastDateWithData]",
              "        )",
              "    RETURN",
              "        IF (",
              "            CalendarIsFiltered && [ShowValueForDates],",
              "            CALCULATE (",
              "                [Finished Good Dollars],",
              "                FILTER (",
              "                    ALL ( 'Calendar' ),",
              "                    CONTAINS (",
              "                        VALUES ( 'Calendar'[LY Day Date] ),",
              "                        'Calendar'[LY Day Date], 'Calendar'[Day Date]",
              "                    )",
              "                )",
              "            ),",
              "            CALCULATE ( [Finished Good Dollars] , 'Calendar'[Day Date] = MaxDate )",
              "        )",
              ""
            ],
            "formatString": "\\$#,0.0;(\\$#,0.0);\\$#,0.0",
            "displayFolder": "Finished Goods\\LY",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\" Accuracy=\"1\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "Finished Good Packages LY",
            "expression": [
              " ",
              "    VAR CalendarIsFiltered =",
              "        ISFILTERED ( 'calendar' )",
              "    VAR MaxDate =",
              "        LOOKUPVALUE (",
              "            'Calendar'[LY Day Date],",
              "            'Calendar'[Day Date INT], [LastDateWithData]",
              "        )",
              "    RETURN",
              "        IF (",
              "            CalendarIsFiltered && [ShowValueForDates],",
              "            CALCULATE (",
              "                [Finished Good Packages],",
              "                FILTER (",
              "                    ALL ( 'Calendar' ),",
              "                    CONTAINS (",
              "                        VALUES ( 'Calendar'[LY Day Date] ),",
              "                        'Calendar'[LY Day Date], 'Calendar'[Day Date]",
              "                    )",
              "                )",
              "            ),",
              "            CALCULATE ( [Finished Good Packages] , 'Calendar'[Day Date] = MaxDate )",
              "        )",
              ""
            ],
            "formatString": "#,0",
            "displayFolder": "Finished Goods\\LY"
          },
          {
            "name": "Finished Good Units LY",
            "expression": [
              " ",
              "    VAR CalendarIsFiltered =",
              "        ISFILTERED ( 'calendar' )",
              "    VAR MaxDate =",
              "        LOOKUPVALUE (",
              "            'Calendar'[LY Day Date],",
              "            'Calendar'[Day Date INT], [LastDateWithData]",
              "        )",
              "    RETURN",
              "        IF (",
              "            CalendarIsFiltered && [ShowValueForDates],",
              "            CALCULATE (",
              "                [Finished Good Units],",
              "                FILTER (",
              "                    ALL ( 'Calendar' ),",
              "                    CONTAINS (",
              "                        VALUES ( 'Calendar'[LY Day Date] ),",
              "                        'Calendar'[LY Day Date], 'Calendar'[Day Date]",
              "                    )",
              "                )",
              "            ),",
              "            CALCULATE ( [Finished Good Units] , 'Calendar'[Day Date] = MaxDate )",
              "        )",
              ""
            ],
            "formatString": "0",
            "displayFolder": "Finished Goods\\LY"
          },
          {
            "name": "WP Current $",
            "expression": [
              "",
              "    VAR MaxWeekEnd = MAX('Inventory'[As_of_Date_int])",
              "    VAR Stores = ",
              "    CALCULATE(",
              "        SUM(Inventory[dollars]),",
              "        ALL('Calendar'),",
              "        'Calendar'[As of Date INT] = MaxWeekEnd,",
              "        FILTER ('WP SKU List','WP SKU List'[IsActive] = \"Yes\"),",
              "        FILTER('Facility','Facility'[Facility_Type] = \"Retail Store\"),",
              "        FILTER('WP SKU List', 'WP SKU List'[Division] = \"Retail Outlets\")",
              "    )",
              "    VAR SBUs = ",
              "    CALCULATE(",
              "        SUM(Inventory[dollars]),",
              "        ALL('Calendar'),",
              "        'Calendar'[As of Date INT] = MaxWeekEnd,",
              "        FILTER ('WP SKU List','WP SKU List'[IsActive] = \"Yes\"),",
              "        FILTER('Facility','Facility'[Facility_Type] <> \"Retail Store\"),",
              "        FILTER('WP SKU List', NOT('WP SKU List'[Division]) IN {\"Retail Outlets\", \"Champion Europe\", \"HA Apparel\", \"HA Sheridan\", \"HA Bras N Things\"})",
              ")",
              "    VAR CHEU_HAA =",
              "    CALCULATE(",
              "        SUM(Inventory[dollars]),",
              "        ALL('Calendar'),",
              "        'Calendar'[As of Date INT] = MaxWeekEnd,",
              "        FILTER ('WP SKU List','WP SKU List'[IsActive] = \"Yes\"),",
              "        FILTER('WP SKU List', 'WP SKU List'[Division] IN {\"Champion Europe\", \"HA Apparel\", \"HA Sheridan\", \"HA Bras N Things\"})",
              ")",
              "",
              "    RETURN",
              "Stores + SBUs + CHEU_HAA"
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "displayFolder": "Winning Portfolio\\Actuals",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "WP Baseline $",
            "expression": [
              " ",
              "    VAR YearEnd = 20220101",
              "    VAR Stores = ",
              "    CALCULATE(",
              "        SUM(Inventory[dollars]),",
              "        ALL('Calendar'),",
              "        'Calendar'[As of Date INT] = YearEnd,",
              "        FILTER ('WP SKU List','WP SKU List'[IsActive] = \"Yes\"),",
              "        FILTER('Facility','Facility'[Facility_Type] = \"Retail Store\"),",
              "        FILTER('WP SKU List', 'WP SKU List'[Division] = \"Retail Outlets\")",
              "    )",
              "    VAR SBUs = ",
              "    CALCULATE(",
              "        SUM(Inventory[dollars]),",
              "        ALL('Calendar'),",
              "        'Calendar'[As of Date INT] = YearEnd,",
              "        FILTER ('WP SKU List','WP SKU List'[IsActive] = \"Yes\"),",
              "        FILTER('Facility','Facility'[Facility_Type] <> \"Retail Store\"),",
              "        FILTER('WP SKU List', NOT('WP SKU List'[Division]) IN {\"Retail Outlets\", \"Champion Europe\", \"HA Apparel\", \"HA Sheridan\", \"HA Bras N Things\"})",
              ")",
              "    VAR CHEU_HAA =",
              "    CALCULATE(",
              "        SUM(Inventory[dollars]),",
              "        ALL('Calendar'),",
              "        'Calendar'[As of Date INT] = YearEnd,",
              "        FILTER ('WP SKU List','WP SKU List'[IsActive] = \"Yes\"),",
              "        FILTER('WP SKU List', 'WP SKU List'[Division] IN {\"Champion Europe\", \"HA Apparel\", \"HA Sheridan\", \"HA Bras N Things\"})",
              ")",
              " ",
              "RETURN",
              "Stores + SBUs + CHEU_HAA"
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "displayFolder": "Winning Portfolio\\Actuals",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "WP Disposed $",
            "expression": [
              " ",
              "IF([ShowValueForDates],",
              "    [WP Baseline $] - [WP Current $]",
              ")"
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "displayFolder": "Winning Portfolio\\Actuals",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "WP Disposed $ %",
            "expression": [
              " ",
              "DIVIDE([WP Disposed $], [WP Baseline $])"
            ],
            "formatString": "0.0%;-0.0%;0.0%",
            "displayFolder": "Winning Portfolio\\Actuals"
          },
          {
            "name": "WP Current Units",
            "expression": [
              "",
              "    VAR MaxWeekEnd = MAX('Inventory'[As_of_Date_int])",
              "    VAR Stores = ",
              "    CALCULATE(",
              "        SUM(Inventory[units]),",
              "        ALL('Calendar'),",
              "        'Calendar'[As of Date INT] = MaxWeekEnd,",
              "        FILTER ('WP SKU List','WP SKU List'[IsActive] = \"Yes\"),",
              "        FILTER('Facility','Facility'[Facility_Type] = \"Retail Store\"),",
              "        FILTER('WP SKU List', 'WP SKU List'[Division] = \"Retail Outlets\")",
              "    )",
              "    VAR SBUs = ",
              "    CALCULATE(",
              "        SUM(Inventory[units]),",
              "        ALL('Calendar'),",
              "        'Calendar'[As of Date INT] = MaxWeekEnd,",
              "        FILTER ('WP SKU List','WP SKU List'[IsActive] = \"Yes\"),",
              "        FILTER('Facility','Facility'[Facility_Type] <> \"Retail Store\"),",
              "        FILTER('WP SKU List', NOT('WP SKU List'[Division]) IN {\"Retail Outlets\", \"Champion Europe\", \"HA Apparel\", \"HA Sheridan\", \"HA Bras N Things\"})",
              ")",
              "    VAR CHEU_HAA =",
              "    CALCULATE(",
              "        SUM(Inventory[units]),",
              "        ALL('Calendar'),",
              "        'Calendar'[As of Date INT] = MaxWeekEnd,",
              "        FILTER ('WP SKU List','WP SKU List'[IsActive] = \"Yes\"),",
              "        FILTER('WP SKU List', 'WP SKU List'[Division] IN {\"Champion Europe\", \"HA Apparel\", \"HA Sheridan\", \"HA Bras N Things\"})",
              ")",
              "",
              "    RETURN",
              "Stores + SBUs + CHEU_HAA"
            ],
            "formatString": "#,0",
            "displayFolder": "Winning Portfolio\\Actuals"
          },
          {
            "name": "WP Baseline Units",
            "expression": [
              " ",
              "        VAR YearEnd = 20220101",
              "    VAR Stores = ",
              "    CALCULATE(",
              "        SUM(Inventory[units]),",
              "        ALL('Calendar'),",
              "        'Calendar'[As of Date INT] = YearEnd,",
              "        FILTER ('WP SKU List','WP SKU List'[IsActive] = \"Yes\"),",
              "        FILTER('Facility','Facility'[Facility_Type] = \"Retail Store\"),",
              "        FILTER('WP SKU List', 'WP SKU List'[Division] = \"Retail Outlets\")",
              "    )",
              "    VAR SBUs = ",
              "    CALCULATE(",
              "        SUM(Inventory[units]),",
              "        ALL('Calendar'),",
              "        'Calendar'[As of Date INT] = YearEnd,",
              "        FILTER ('WP SKU List','WP SKU List'[IsActive] = \"Yes\"),",
              "        FILTER('Facility','Facility'[Facility_Type] <> \"Retail Store\"),",
              "        FILTER('WP SKU List', NOT('WP SKU List'[Division]) IN {\"Retail Outlets\", \"Champion Europe\", \"HA Apparel\", \"HA Sheridan\", \"HA Bras N Things\"})",
              ")",
              "    VAR CHEU_HAA =",
              "    CALCULATE(",
              "        SUM(Inventory[units]),",
              "        ALL('Calendar'),",
              "        'Calendar'[As of Date INT] = YearEnd,",
              "        FILTER ('WP SKU List','WP SKU List'[IsActive] = \"Yes\"),",
              "        FILTER('WP SKU List', 'WP SKU List'[Division] IN {\"Champion Europe\", \"HA Apparel\", \"HA Sheridan\", \"HA Bras N Things\"})",
              ")",
              " ",
              "RETURN",
              "Stores + SBUs + CHEU_HAA"
            ],
            "formatString": "#,0",
            "displayFolder": "Winning Portfolio\\Actuals"
          },
          {
            "name": "WP Disposed Units",
            "expression": [
              " ",
              "IF([ShowValueForDates],",
              "    [WP Baseline Units]- [WP Current Units]",
              ")"
            ],
            "formatString": "#,0",
            "displayFolder": "Winning Portfolio\\Actuals"
          },
          {
            "name": "WP Disposed Units %",
            "expression": [
              " ",
              "DIVIDE([WP Disposed Units], [WP Baseline Units])"
            ],
            "formatString": "0.0%;-0.0%;0.0%",
            "displayFolder": "Winning Portfolio\\Actuals"
          },
          {
            "name": "WP Current Pkgs",
            "expression": [
              "",
              "    VAR MaxWeekEnd = MAX('Inventory'[As_of_Date_int])",
              "    VAR Stores = ",
              "    CALCULATE(",
              "        SUM(Inventory[packages]),",
              "        ALL('Calendar'),",
              "        'Calendar'[As of Date INT] = MaxWeekEnd,",
              "        FILTER ('WP SKU List','WP SKU List'[IsActive] = \"Yes\"),",
              "        FILTER('Facility','Facility'[Facility_Type] = \"Retail Store\"),",
              "        FILTER('WP SKU List', 'WP SKU List'[Division] = \"Retail Outlets\")",
              "    )",
              "    VAR SBUs = ",
              "    CALCULATE(",
              "        SUM(Inventory[packages]),",
              "        ALL('Calendar'),",
              "        'Calendar'[As of Date INT] = MaxWeekEnd,",
              "        FILTER ('WP SKU List','WP SKU List'[IsActive] = \"Yes\"),",
              "        FILTER('Facility','Facility'[Facility_Type] <> \"Retail Store\"),",
              "        FILTER('WP SKU List', NOT('WP SKU List'[Division]) IN {\"Retail Outlets\", \"Champion Europe\", \"HA Apparel\", \"HA Sheridan\", \"HA Bras N Things\"})",
              ")",
              "    VAR CHEU_HAA =",
              "    CALCULATE(",
              "        SUM(Inventory[packages]),",
              "        ALL('Calendar'),",
              "        'Calendar'[As of Date INT] = MaxWeekEnd,",
              "        FILTER ('WP SKU List','WP SKU List'[IsActive] = \"Yes\"),",
              "        FILTER('WP SKU List', 'WP SKU List'[Division] IN {\"Champion Europe\", \"HA Apparel\", \"HA Sheridan\", \"HA Bras N Things\"})",
              ")",
              "",
              "    RETURN",
              "Stores + SBUs + CHEU_HAA"
            ],
            "formatString": "#,0",
            "displayFolder": "Winning Portfolio\\Actuals"
          },
          {
            "name": "WP Baseline Pkgs",
            "expression": [
              " ",
              "    VAR YearEnd = 20220101",
              "    VAR Stores = ",
              "    CALCULATE(",
              "        SUM(Inventory[packages]),",
              "        ALL('Calendar'),",
              "        'Calendar'[As of Date INT] = YearEnd,",
              "        FILTER ('WP SKU List','WP SKU List'[IsActive] = \"Yes\"),",
              "        FILTER('Facility','Facility'[Facility_Type] = \"Retail Store\"),",
              "        FILTER('WP SKU List', 'WP SKU List'[Division] = \"Retail Outlets\")",
              "    )",
              "    VAR SBUs = ",
              "    CALCULATE(",
              "        SUM(Inventory[packages]),",
              "        ALL('Calendar'),",
              "        'Calendar'[As of Date INT] = YearEnd,",
              "        FILTER ('WP SKU List','WP SKU List'[IsActive] = \"Yes\"),",
              "        FILTER('Facility','Facility'[Facility_Type] <> \"Retail Store\"),",
              "        FILTER('WP SKU List', NOT('WP SKU List'[Division]) IN {\"Retail Outlets\", \"Champion Europe\", \"HA Apparel\", \"HA Sheridan\", \"HA Bras N Things\"})",
              ")",
              "    VAR CHEU_HAA =",
              "    CALCULATE(",
              "        SUM(Inventory[packages]),",
              "        ALL('Calendar'),",
              "        'Calendar'[As of Date INT] = YearEnd,",
              "        FILTER ('WP SKU List','WP SKU List'[IsActive] = \"Yes\"),",
              "        FILTER('WP SKU List', 'WP SKU List'[Division] IN {\"Champion Europe\", \"HA Apparel\", \"HA Sheridan\", \"HA Bras N Things\"})",
              ")",
              " ",
              "RETURN",
              "Stores + SBUs + CHEU_HAA"
            ],
            "formatString": "#,0",
            "displayFolder": "Winning Portfolio\\Actuals"
          },
          {
            "name": "WP Disposed Pkgs",
            "expression": [
              " ",
              "IF([ShowValueForDates],",
              "    [WP Baseline Pkgs] - [WP Current Pkgs]",
              ")"
            ],
            "formatString": "#,0",
            "displayFolder": "Winning Portfolio\\Actuals"
          },
          {
            "name": "WP Disposed Pkgs %",
            "expression": [
              " ",
              "DIVIDE([WP Disposed Pkgs], [WP Baseline Pkgs])"
            ],
            "formatString": "0.0%;-0.0%;0.0%",
            "displayFolder": "Winning Portfolio\\Actuals"
          },
          {
            "name": "WP Plan %",
            "expression": [
              " ",
              "VAR MaxWeekEnd = MAX('Calendar'[Fiscal_Wk_of_Yr])",
              "VAR MaxYear = MAX('Calendar'[Fiscal Yr])",
              "VAR phaseoutquarter = RIGHT(SUBSTITUTE(SELECTEDVALUE('WP SKU List'[PhaseOutQuarter],\"Q1\"),\"Q4\", \"Q3\"),1)  --Currently we are holding Q4 SKUs to be done by the end of Q3",
              "VAR weekstodispose = (phaseoutquarter * 13) - 5 --minus 5 because not including January 2022",
              "VAR weeklypercent = ",
              "SWITCH(TRUE(),",
              "MaxYear <> 2022, 0,",
              "MaxWeekEnd < 5, 0,",
              "(MaxWeekEnd - 5) * (1/weekstodispose)",
              ")",
              "VAR cappedweeklypercent = IF(weeklypercent >1,1,weeklypercent)",
              "RETURN",
              "cappedweeklypercent"
            ],
            "displayFolder": "Winning Portfolio\\Plan"
          },
          {
            "name": "WP Plan $",
            "expression": [
              "",
              "VAR MaxWeekEnd = MAX('Calendar'[As of Date INT])",
              "RETURN",
              "CALCULATE(",
              "[WP Plan %] * [WP Baseline $],",
              "'WP SKU List'[PhaseOutQuarter] = \"Q1\",",
              "'Calendar'[As of Date INT] = MaxWeekEnd",
              ") + ",
              "CALCULATE(",
              "[WP Plan %] * [WP Baseline $],",
              "'WP SKU List'[PhaseOutQuarter] = \"Q2\",",
              "'Calendar'[As of Date INT] = MaxWeekEnd",
              ") + ",
              "CALCULATE(",
              "[WP Plan %] * [WP Baseline $],",
              "'WP SKU List'[PhaseOutQuarter] = \"Q3\",",
              "'Calendar'[As of Date INT] = MaxWeekEnd",
              ") + ",
              "CALCULATE(",
              "[WP Plan %] * [WP Baseline $],",
              "'WP SKU List'[PhaseOutQuarter] = \"Q4\",",
              "'Calendar'[As of Date INT] = MaxWeekEnd",
              ")"
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "displayFolder": "Winning Portfolio\\Plan",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "WP Disposed vs Plan $",
            "expression": [
              "",
              "[WP Disposed $] - [WP Plan $]"
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "displayFolder": "Winning Portfolio\\Vs Plan",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "WP Disposed vs Plan Pkgs",
            "expression": [
              "",
              "[WP Disposed Pkgs] - [WP Plan Pkgs]"
            ],
            "formatString": "#,0",
            "displayFolder": "Winning Portfolio\\Vs Plan"
          },
          {
            "name": "WP Plan Pkgs",
            "expression": [
              "",
              "VAR MaxWeekEnd = MAX('Calendar'[As of Date INT])",
              "RETURN",
              "CALCULATE(",
              "[WP Plan %] * [WP Baseline Pkgs],",
              "'WP SKU List'[PhaseOutQuarter] = \"Q1\",",
              "'Calendar'[As of Date INT] = MaxWeekEnd",
              ") + ",
              "CALCULATE(",
              "[WP Plan %] * [WP Baseline Pkgs],",
              "'WP SKU List'[PhaseOutQuarter] = \"Q2\",",
              "'Calendar'[As of Date INT] = MaxWeekEnd",
              ") + ",
              "CALCULATE(",
              "[WP Plan %] * [WP Baseline Pkgs],",
              "'WP SKU List'[PhaseOutQuarter] = \"Q3\",",
              "'Calendar'[As of Date INT] = MaxWeekEnd",
              ") + ",
              "CALCULATE(",
              "[WP Plan %] * [WP Baseline Pkgs],",
              "'WP SKU List'[PhaseOutQuarter] = \"Q4\",",
              "'Calendar'[As of Date INT] = MaxWeekEnd",
              ")"
            ],
            "formatString": "#,0",
            "displayFolder": "Winning Portfolio\\Plan"
          },
          {
            "name": "WP Plan Units",
            "expression": [
              "",
              "VAR MaxWeekEnd = MAX('Calendar'[As of Date INT])",
              "RETURN",
              "CALCULATE(",
              "[WP Plan %] * [WP Baseline Units],",
              "'WP SKU List'[PhaseOutQuarter] = \"Q1\",",
              "'Calendar'[As of Date INT] = MaxWeekEnd",
              ") + ",
              "CALCULATE(",
              "[WP Plan %] * [WP Baseline Units],",
              "'WP SKU List'[PhaseOutQuarter] = \"Q2\",",
              "'Calendar'[As of Date INT] = MaxWeekEnd",
              ") + ",
              "CALCULATE(",
              "[WP Plan %] * [WP Baseline Units],",
              "'WP SKU List'[PhaseOutQuarter] = \"Q3\",",
              "'Calendar'[As of Date INT] = MaxWeekEnd",
              ") + ",
              "CALCULATE(",
              "[WP Plan %] * [WP Baseline Units],",
              "'WP SKU List'[PhaseOutQuarter] = \"Q4\",",
              "'Calendar'[As of Date INT] = MaxWeekEnd",
              ")"
            ],
            "formatString": "#,0",
            "displayFolder": "Winning Portfolio\\Plan"
          },
          {
            "name": "WP Disposed vs Plan Units",
            "expression": [
              "",
              "[WP Disposed Units] - [WP Plan Units]"
            ],
            "formatString": "#,0",
            "displayFolder": "Winning Portfolio\\Vs Plan"
          },
          {
            "name": "WP Disposed vs Plan $ %",
            "expression": [
              "",
              "DIVIDE([WP Disposed vs Plan $], [WP Plan $])"
            ],
            "formatString": "#,0.0%;-#,0.0%;#,0.0%",
            "displayFolder": "Winning Portfolio\\Vs Plan"
          },
          {
            "name": "WP Disposed vs Plan Pkgs %",
            "expression": [
              "",
              "DIVIDE([WP Disposed vs Plan Pkgs], [WP Plan Pkgs])"
            ],
            "formatString": "#,0.0%;-#,0.0%;#,0.0%",
            "displayFolder": "Winning Portfolio\\Vs Plan"
          },
          {
            "name": "WP Disposed vs Plan Units %",
            "expression": [
              "",
              "DIVIDE([WP Disposed vs Plan Units], [WP Plan Units])"
            ],
            "formatString": "#,0.0%;-#,0.0%;#,0.0%",
            "displayFolder": "Winning Portfolio\\Vs Plan"
          },
          {
            "name": "SCA Count",
            "expression": [
              "",
              "VAR MaxWeekEnd = MAX('Inventory'[As_of_Date_int])",
              "RETURN",
              "COUNTROWS(",
              "    CALCULATETABLE(",
              "        DISTINCT('Product'[SCAGlobal]),",
              "    CROSSFILTER(Inventory[Dim_Item_id],'Product'[Dim_Item_id],Both),",
              "    'Inventory'[units] > 0,",
              "\t'Calendar'[As of Date INT] = MaxWeekEnd",
              "    )",
              ")"
            ],
            "formatString": "#,0",
            "displayFolder": "SCACount"
          },
          {
            "name": "SKU Create Count",
            "expression": [
              " ",
              "COUNTROWS(",
              "    CALCULATETABLE(",
              "        DISTINCT('Product'[SKUCount]),",
              "    CROSSFILTER(Inventory[Dim_Item_id],'Product'[Dim_Item_id],Both)",
              "    )",
              ")"
            ],
            "displayFolder": "SKUCount\\Creates"
          },
          {
            "name": "WP Baseline SKU Count",
            "expression": [
              "",
              "VAR YearEnd = 20220101",
              "VAR Stores =",
              "    COUNTROWS (",
              "        CALCULATETABLE (",
              "            SUMMARIZE ( 'Product', 'Product'[SKUCount] ),",
              "            CROSSFILTER ( Inventory[Dim_Item_id], 'Product'[Dim_Item_id], BOTH ),",
              "            'Inventory'[units] > 0,",
              "            ALL ( 'Calendar' ),",
              "            'Calendar'[As of Date INT] = YearEnd,",
              "            FILTER ('WP SKU List','WP SKU List'[IsActive] = \"Yes\"),",
              "            FILTER ( 'Facility', 'Facility'[Facility_Type] = \"Retail Store\" ),",
              "            FILTER ( 'WP SKU List', 'WP SKU List'[Division] = \"Retail Outlets\" )",
              "        )",
              "    )",
              "VAR SBUs =",
              "    COUNTROWS (",
              "        CALCULATETABLE (",
              "            SUMMARIZE ( 'Product', 'Product'[SKUCount] ),",
              "            CROSSFILTER ( Inventory[Dim_Item_id], 'Product'[Dim_Item_id], BOTH ),",
              "            'Inventory'[units] > 0,",
              "            ALL ( 'Calendar' ),",
              "            'Calendar'[As of Date INT] = YearEnd,",
              "            FILTER ('WP SKU List','WP SKU List'[IsActive] = \"Yes\"),",
              "            FILTER ( 'Facility', 'Facility'[Facility_Type] <> \"Retail Store\" ),",
              "            FILTER (",
              "                'WP SKU List',",
              "                NOT('WP SKU List'[Division]) IN {\"Retail Outlets\", \"Champion Europe\", \"HA Apparel\", \"HA Sheridan\", \"HA Bras N Things\"}",
              "        )",
              "        )",
              "    )",
              "VAR CHEU_HAA =",
              "    COUNTROWS (",
              "        CALCULATETABLE (",
              "            SUMMARIZE ( 'Product', 'Product'[SKUCount] ),",
              "            CROSSFILTER ( Inventory[Dim_Item_id], 'Product'[Dim_Item_id], BOTH ),",
              "            'Inventory'[units] > 0,",
              "            ALL ( 'Calendar' ),",
              "            'Calendar'[As of Date INT] = YearEnd,",
              "            FILTER ('WP SKU List','WP SKU List'[IsActive] = \"Yes\"),",
              "            FILTER('WP SKU List', 'WP SKU List'[Division] IN {\"Champion Europe\", \"HA Apparel\", \"HA Sheridan\", \"HA Bras N Things\"})",
              "        )",
              "    )",
              "RETURN",
              "    Stores + SBUs + CHEU_HAA      "
            ],
            "formatString": "#,0",
            "displayFolder": "Winning Portfolio\\SKU Count"
          },
          {
            "name": "WP Current SKU Count",
            "expression": [
              "",
              "VAR MaxWeekEnd = MAX('Inventory'[As_of_Date_int])",
              "VAR Stores =",
              "    COUNTROWS (",
              "        CALCULATETABLE (",
              "            SUMMARIZE ( 'Product', 'Product'[SKUCount] ),",
              "            CROSSFILTER ( Inventory[Dim_Item_id], 'Product'[Dim_Item_id], BOTH ),",
              "            'Inventory'[units] > 0,",
              "            ALL ( 'Calendar' ),",
              "            'Calendar'[As of Date INT] = MaxWeekEnd,",
              "            FILTER ('WP SKU List','WP SKU List'[IsActive] = \"Yes\"),",
              "            FILTER ( 'Facility', 'Facility'[Facility_Type] = \"Retail Store\" ),",
              "            FILTER ( 'WP SKU List', 'WP SKU List'[Division] = \"Retail Outlets\" )",
              "        )",
              "    )",
              "VAR SBUs =",
              "    COUNTROWS (",
              "        CALCULATETABLE (",
              "            SUMMARIZE ( 'Product', 'Product'[SKUCount] ),",
              "            CROSSFILTER ( Inventory[Dim_Item_id], 'Product'[Dim_Item_id], BOTH ),",
              "            'Inventory'[units] > 0,",
              "            ALL ( 'Calendar' ),",
              "            'Calendar'[As of Date INT] = MaxWeekEnd,",
              "            FILTER ('WP SKU List','WP SKU List'[IsActive] = \"Yes\"),",
              "            FILTER ( 'Facility', 'Facility'[Facility_Type] <> \"Retail Store\" ),",
              "            FILTER (",
              "                'WP SKU List',",
              "                NOT('WP SKU List'[Division]) IN {\"Retail Outlets\", \"Champion Europe\", \"HA Apparel\", \"HA Sheridan\", \"HA Bras N Things\"}",
              "        )",
              "        )",
              "    )",
              "VAR CHEU_HAA =",
              "    COUNTROWS (",
              "        CALCULATETABLE (",
              "            SUMMARIZE ( 'Product', 'Product'[SKUCount] ),",
              "            CROSSFILTER ( Inventory[Dim_Item_id], 'Product'[Dim_Item_id], BOTH ),",
              "            'Inventory'[units] > 0,",
              "            ALL ( 'Calendar' ),",
              "            'Calendar'[As of Date INT] = MaxWeekEnd,",
              "            FILTER ('WP SKU List','WP SKU List'[IsActive] = \"Yes\"),",
              "            FILTER('WP SKU List', 'WP SKU List'[Division] IN {\"Champion Europe\", \"HA Apparel\", \"HA Sheridan\", \"HA Bras N Things\"})",
              "        )",
              "    )",
              "RETURN",
              "    Stores + SBUs + CHEU_HAA       "
            ],
            "formatString": "#,0",
            "displayFolder": "Winning Portfolio\\SKU Count"
          },
          {
            "name": "WP Disposed SKU Count",
            "expression": [
              "",
              "IF([ShowValueForDates],",
              "    [WP Baseline SKU Count] - [WP Current SKU Count]",
              ")"
            ],
            "formatString": "#,0",
            "displayFolder": "Winning Portfolio\\SKU Count"
          },
          {
            "name": "WP Disposed SKU Count %",
            "expression": [
              "",
              "DIVIDE([WP Disposed SKU Count], [WP Baseline SKU Count])"
            ],
            "formatString": "0.0%;-0.0%;0.0%",
            "displayFolder": "Winning Portfolio\\SKU Count"
          },
          {
            "name": "vs 2023 Target %",
            "expression": [
              "",
              "DIVIDE([vs 2023 Target], [2023 SKU Count Target])"
            ],
            "formatString": "0%;-0%;0%"
          },
          {
            "name": "2023 SKU Count Target",
            "expression": [
              "",
              "SUM('SKUCount Goals'[2023 Target])"
            ],
            "formatString": "#,0"
          },
          {
            "name": "vs 2023 Target",
            "expression": [
              "",
              "[Global SKU Count] - [2023 SKU Count Target]",
              ""
            ],
            "formatString": "#,0"
          },
          {
            "name": "2024 Turns Target",
            "description": "Average of Turns Targets",
            "expression": [
              "",
              "AVERAGE('SKUCount Goals'[2024 Turns Target])"
            ],
            "formatString": "0.0"
          },
          {
            "name": "2022 SKU Count Target",
            "expression": [
              "",
              "SUM('SKUCount Goals'[2022 Target])"
            ],
            "formatString": "#,0"
          },
          {
            "name": "vs 2022 Target",
            "expression": [
              "",
              "[Global SKU Count] - [2022 SKU Count Target]"
            ],
            "formatString": "#,0"
          },
          {
            "name": "vs 2022 Target %",
            "expression": [
              "",
              "DIVIDE([vs 2022 Target], [2022 SKU Count Target])"
            ],
            "formatString": "0%;-0%;0%"
          },
          {
            "name": "SKU Count LYLME",
            "expression": [
              " ",
              " CALCULATE(",
              "    [SKUCount LME],",
              " FILTER(",
              "     ALL('Calendar'),",
              "     CONTAINS(",
              "            VALUES(Calendar[LY Day Date]),'Calendar'[LY Day Date],'Calendar'[Day Date]",
              "        )",
              "    )",
              " )"
            ],
            "formatString": "#,0",
            "displayFolder": "SKUCount\\Total"
          },
          {
            "name": "Global SKU Count LYLME",
            "expression": " [SKU Count LYLME] + [SRE_SKU Count LYLME]",
            "formatString": "#,0",
            "displayFolder": "GlobalKPIs\\SKUCount"
          },
          {
            "name": "Global SKU Count LME vs LYLME",
            "expression": " [Global SKU Count LME] - [Global SKU Count LYLME]",
            "formatString": "#,0",
            "displayFolder": "GlobalKPIs\\SKUCount"
          },
          {
            "name": "Global SKU Count LME vs LYLME %",
            "expression": " Divide([Global SKU Count LME],[Global SKU Count LYLME])-1",
            "formatString": "#,0.00%;-#,0.00%;#,0.00%",
            "displayFolder": "GlobalKPIs\\SKUCount"
          }
        ]
      },
      {
        "name": "Disposal SKU",
        "columns": [
          {
            "name": "Division",
            "dataType": "string",
            "sourceColumn": "Division"
          },
          {
            "name": "SKU_ID",
            "dataType": "string",
            "isHidden": true,
            "sourceColumn": "SKU_ID"
          },
          {
            "name": "SKU_Desc",
            "dataType": "string",
            "isHidden": true,
            "sourceColumn": "SKU_Desc"
          },
          {
            "name": "Marketing_Changes",
            "dataType": "string",
            "sourceColumn": "Marketing_Changes"
          },
          {
            "name": "P12FGInventoryDollars",
            "dataType": "double",
            "isHidden": true,
            "sourceColumn": "P12FGInventoryDollars"
          },
          {
            "name": "P12FGInventoryUnits",
            "dataType": "double",
            "isHidden": true,
            "sourceColumn": "P12FGInventoryUnits"
          },
          {
            "name": "Inventory to Be Cleared",
            "dataType": "double",
            "isHidden": true,
            "sourceColumn": "Inventory to Be Cleared"
          },
          {
            "name": "Partial",
            "dataType": "string",
            "sourceColumn": "Partial"
          },
          {
            "name": "Perc",
            "dataType": "double",
            "sourceColumn": "Perc",
            "formatString": "0%;-0%;0%"
          },
          {
            "name": "InventorytoBeClearedUnits",
            "dataType": "double",
            "isHidden": true,
            "sourceColumn": "InventorytoBeClearedUnits"
          },
          {
            "name": "SKU_Final_Temp",
            "dataType": "string",
            "sourceColumn": "SKU_Final_Temp"
          },
          {
            "name": "SKU_Final",
            "dataType": "string",
            "sourceColumn": "SKU_Final"
          },
          {
            "type": "calculated",
            "name": "Partial Units",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": " 'Disposal SKU'[P12FGInventoryUnits]-'Disposal SKU'[InventorytoBeClearedUnits]"
          },
          {
            "name": "Include Retail Store Inventory?",
            "dataType": "string",
            "sourceColumn": "Include Retail Store Inventory?"
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = #\"Azure Synapse\",",
                "    mount_Inventory_NoRegretsDisposalSKUList_Manual = Source{[Schema=\"mount\",Item=\"Inventory_NoRegretsDisposalSKUList_Manual\"]}[Data],",
                "    #\"Renamed Columns\" = Table.RenameColumns( mount_Inventory_NoRegretsDisposalSKUList_Manual,{ {\"Inventory_Units_to_Be_cleared\", \"InventorytoBeClearedUnits\"}, {\"P12_FG_Inventory_Units\", \"P12FGInventoryUnits\"},  {\"P12_FG_Inventory_Dollars\", \"P12FGInventoryDollars\"}, {\"Inventory_Dollars_to_Be_Cleared\", \"Inventory to Be Cleared\"}, {\"Partial_Per\", \"Perc\"}, {\"Partial_Flag\", \"Partial\"},{\"Include_Retail_Store_Inventory\",\"Include Retail Store Inventory?\"}}),",
                "    #\"Added Conditional Column\" = Table.AddColumn(#\"Renamed Columns\", \"SKU_Final_Temp\", each if [Division] = \"xxx\" then [SKU_ID] else [SKU_Desc]),",
                "    #\"Inserted Merged Column\" = Table.AddColumn(#\"Added Conditional Column\", \"SKU_Final\", each Text.Combine({[Division], [SKU_Final_Temp]}, \"_\"), type text),",
                "    #\"Removed Duplicates\" = Table.Distinct(#\"Inserted Merged Column\", {\"SKU_Final\"}),",
                "    #\"Filtered Rows\" = Table.SelectRows(#\"Removed Duplicates\", each [SKU_Final_Temp] <> null and [SKU_Final_Temp] <> \"\")",
                "in",
                "    #\"Filtered Rows\""
              ]
            }
          }
        ],
        "measures": [
          {
            "name": "P12FGInventory_Dollars",
            "expression": "sum('Disposal SKU'[P12FGInventoryDollars])",
            "isHidden": true,
            "displayFolder": "No Regrets"
          },
          {
            "name": "P12FGInventory_Units",
            "expression": "sum('Disposal SKU'[P12FGInventoryUnits])",
            "isHidden": true,
            "displayFolder": "No Regrets"
          },
          {
            "name": "InventorytoBeCleared_Dollars",
            "expression": "Sum('Disposal SKU'[Inventory to Be Cleared])",
            "isHidden": true,
            "displayFolder": "No Regrets"
          },
          {
            "name": "InventorytoBeCleared_Units",
            "expression": "Sum('Disposal SKU'[InventorytoBeClearedUnits])",
            "isHidden": true,
            "displayFolder": "No Regrets"
          }
        ],
        "hierarchies": [
          {
            "name": "No Regrets List",
            "levels": [
              {
                "name": "Division",
                "ordinal": 0,
                "column": "Division"
              },
              {
                "name": "SKU_Desc",
                "ordinal": 1,
                "column": "SKU_Desc"
              }
            ]
          }
        ]
      },
      {
        "name": "SKUCount Goals",
        "columns": [
          {
            "type": "calculatedTableColumn",
            "name": "SBU",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "isHidden": true,
            "sourceColumn": "[SBU]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "2021 Ambition",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[2021 Ambition]",
            "formatString": "#,0"
          },
          {
            "type": "calculatedTableColumn",
            "name": "Winning Portfolio Ambition (~2022-2024)",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[Winning Portfolio Ambition (~2022-2024)]",
            "formatString": "#,0"
          },
          {
            "type": "calculatedTableColumn",
            "name": "2023 Target",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[2023 Target]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "2022 Target",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[2022 Target]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "2024 Turns Target",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[2024 Turns Target]"
          }
        ],
        "partitions": [
          {
            "name": "Table",
            "source": {
              "type": "calculated",
              "expression": [
                "DataTable(",
                "\"SBU\", STRING,",
                "\"2021 Ambition\", INTEGER,",
                "\"Winning Portfolio Ambition (~2022-2024)\", INTEGER,",
                "\"2022 Target\", INTEGER,",
                "\"2023 Target\", INTEGER,",
                "\"2024 Turns Target\", INTEGER,",
                "{",
                "\t{\"Alternative Apparel\",,,0,0,4.1},{\"Argentina\",2947,2329,4667,5381,},{\"Bali Womens\",7609,7587,7955,6651,2.6},{\"Brazil\",2893,2893,2445,2445,},{\"C9 Champion\",2100,2100,0,0,},{\"Canada-AW\",89,180,66,53,},{\"Canada-IW\",4900,5100,3334,3158,},{\"Champion Europe\",163253,132000,94695,87447,},{\"Champion SA\",26733,26580,4394,4072,},{\"Champion Teamwear\",13373,13357,10862,10862,},{\"DK/DKNY\",0,0,0,0,},{\"Export\",496,496,265,215,},{\"HA Apparel\",73947,69709,75492,70500,},{\"HA Bras N Things\",23214,22438,24281,26100,},{\"HA Sheridan\",6007,5811,6723,5400,},{\"Hanes Apparel Consumer\",5609,10378,8389,10378,4.1},{\"Hanes AW Printwear\",16475,18110,15264,12395,4.1},{\"Hanes Womens\",6400,7000,6976,5055,2.9},{\"Hosiery\",2401,2200,1978,1963,},{\"Innerwear Segment Elimination\",0,0,0,0,},{\"INTL Segment Elimination\",0,0,0,0,},{\"Japan\",44097,53280,27523,22362,},{\"Kid's UW\",2710,2168,1694,1486,3.5},{\"Lifestyle Brands SA\",,,12380,11999,},{\"Maidenform Womens\",8218,10073,9400,7800,2.7},{\"Mass Brands SA\",133304,136990,51950,46370,},{\"Men's UW\",3143,3331,3697,2769,4},{\"Mexico\",27660,24907,14646,11200,},{\"Other Womens\",420,420,1138,925,},{\"Playtex Womens\",3143,3204,3037,2596,3.1},{\"Polo UW/SP\",4547,4581,4776,4538,2.7},{\"Retail Outlets\",,,50658,41160,},{\"Shapewear\",0,0,0,0,},{\"Socks\",1683,1580,1614,1273,3.9},{\"Unmapped\",0,0,0,0,},{\"US Champion Female\",21314,23112,17336,15813,4.3},{\"US Champion Male\",20186,21888,26248,25417,4.8}\t",
                "}",
                ")"
              ]
            }
          }
        ]
      },
      {
        "name": "Self Reported KPIs",
        "description": "User-maintained table for entities that are not yet part of the HBI inventory data model",
        "columns": [
          {
            "type": "calculatedTableColumn",
            "name": "Facility_ID",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "isHidden": true,
            "sourceColumn": "[Facility_ID]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "AsOfDateInt",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "isHidden": true,
            "sourceColumn": "[AsOfDateInt]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "Dim_Item_ID",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "isHidden": true,
            "sourceColumn": "[Dim_Item_ID]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "Currency",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "isHidden": true,
            "sourceColumn": "[Currency]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "Units",
            "dataType": "double",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "isHidden": true,
            "sourceColumn": "[Units]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "Packages",
            "dataType": "double",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "isHidden": true,
            "sourceColumn": "[Packages]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "Dollars",
            "dataType": "double",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "isHidden": true,
            "sourceColumn": "[Dollars]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "SKU_Count",
            "dataType": "double",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "isHidden": true,
            "sourceColumn": "[SKU_Count]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "Division",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "isHidden": true,
            "sourceColumn": "[Division]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "business_seg_hierarchy_id",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "isHidden": true,
            "sourceColumn": "[business_seg_hierarchy_id]"
          }
        ],
        "partitions": [
          {
            "name": "CalculatedTable 1",
            "source": {
              "type": "calculated",
              "expression": [
                "DataTable(",
                "\"Division\", STRING,",
                "\"business_seg_hierarchy_id\", INTEGER,",
                "\"Facility_ID\", INTEGER,",
                "\"AsOfDateInt\", INTEGER,",
                "\"Dim_Item_ID\", INTEGER,",
                "\"Currency\", STRING,",
                "\"Units\", DOUBLE,",
                "\"Packages\", DOUBLE,",
                "\"Dollars\", DOUBLE,",
                "\"SKU_Count\", DOUBLE,",
                "{",
                "\t{\"Argentina\",31,-1,20190330,-1,\"USD\",,,,2527},{\"Brazil\",28,-1,20190330,-1,\"USD\",,,,1487},{\"HA Apparel\",216,-1,20190330,-1,\"USD\",,,,93104},{\"Argentina\",31,-1,20190629,-1,\"USD\",,,,2540},{\"Brazil\",28,-1,20190629,-1,\"USD\",,,,1042},{\"HA Apparel\",216,-1,20190629,-1,\"USD\",,,,106554},{\"Argentina\",31,-1,20190928,-1,\"USD\",,,,2480},{\"Brazil\",28,-1,20190928,-1,\"USD\",,,,1249},{\"HA Apparel\",216,-1,20190928,-1,\"USD\",,,,107493},{\"Argentina\",31,-1,20191228,-1,\"USD\",,,,2541},{\"Brazil\",28,-1,20191228,-1,\"USD\",,,,1916},{\"HA Apparel\",216,-1,20191228,-1,\"USD\",,,,107650},{\"Japan\",17,-1,20191228,-1,\"USD\",,,,38234},{\"Argentina\",31,-1,20200328,-1,\"USD\",,,,2283},{\"Brazil\",28,-1,20200328,-1,\"USD\",,,,1946},{\"HA Apparel\",216,-1,20200328,-1,\"USD\",,,,115267},{\"Japan\",17,-1,20200328,-1,\"USD\",,,,47063},{\"Argentina\",31,-1,20200627,-1,\"USD\",,,,2217},{\"Brazil\",28,-1,20200627,-1,\"USD\",,,,2123},{\"HA Apparel\",216,-1,20200627,-1,\"USD\",,,,102212},{\"Japan\",17,-1,20200627,-1,\"USD\",,,,44475},{\"Argentina\",31,-1,20200926,-1,\"USD\",,,,2174},{\"Brazil\",28,-1,20200926,-1,\"USD\",,,,2011},{\"HA Apparel\",216,-1,20200926,-1,\"USD\",,,,90484},{\"Japan\",17,-1,20200926,-1,\"USD\",,,,51341},{\"Argentina\",31,-1,20210102,-1,\"USD\",,,,2588},{\"Brazil\",28,-1,20210102,-1,\"USD\",,,,1686},{\"Japan\",17,-1,20210102,-1,\"USD\",,,,45269},{\"Argentina\",31,-1,20210403,-1,\"USD\",,,,2398},{\"Brazil\",28,-1,20210403,-1,\"USD\",,,,1643},{\"Japan\",17,-1,20210403,-1,\"USD\",,,,53016},{\"Argentina\",31,-1,20210508,-1,\"USD\",,,,3072},{\"Brazil\",28,-1,20210508,-1,\"USD\",,,,2861},{\"Japan\",17,-1,20210508,-1,\"USD\",,,,48622},{\"Argentina\",31,-1,20210605,-1,\"USD\",,,,2504},{\"Brazil\",28,-1,20210605,-1,\"USD\",,,,2830},{\"Japan\",17,-1,20210605,-1,\"USD\",,,,44970},{\"Argentina\",31,-1,20210703,-1,\"USD\",,,,2444},{\"Brazil\",28,-1,20210703,-1,\"USD\",,,,2852},{\"Japan\",17,-1,20210703,-1,\"USD\",,,,42425},{\"Argentina\",31,-1,20210807,-1,\"USD\",,,,3324},{\"Brazil\",28,-1,20210807,-1,\"USD\",,,,2852},{\"Japan\",17,-1,20210807,-1,\"USD\",,,,40768},{\"Argentina\",31,-1,20210904,-1,\"USD\",,,,2769},{\"Brazil\",28,-1,20210904,-1,\"USD\",,,,2797},{\"Japan\",17,-1,20210904,-1,\"USD\",,,,47576},{\"Argentina\",31,-1,20211002,-1,\"USD\",,,,3005},{\"Brazil\",28,-1,20211002,-1,\"USD\",,,,2687},{\"Japan\",17,-1,20211002,-1,\"USD\",,,,41609},{\"Argentina\",31,-1,20211106,-1,\"USD\",,,,3081},{\"Brazil\",28,-1,20211106,-1,\"USD\",,,,2712},{\"Japan\",17,-1,20211106,-1,\"USD\",,,,40196},{\"Argentina\",31,-1,20211204,-1,\"USD\",,,,2896},{\"Brazil\",28,-1,20211204,-1,\"USD\",,,,2755},{\"Japan\",17,-1,20211204,-1,\"USD\",,,,35509},{\"Argentina\",31,-1,20220101,-1,\"USD\",,,,4667},{\"Brazil\",28,-1,20220101,-1,\"USD\",,,,2716},{\"Japan\",17,-1,20220101,-1,\"USD\",,,,34403},{\"Argentina\",31,-1,20220205,-1,\"USD\",,,,4587},{\"Brazil\",28,-1,20220205,-1,\"USD\",,,,2716},{\"Japan\",17,-1,20220205,-1,\"USD\",,,,37246},{\"Argentina\",31,-1,20220305,-1,\"USD\",,,,5651},{\"Brazil\",28,-1,20220305,-1,\"USD\",,,,2610},{\"Japan\",17,-1,20220305,-1,\"USD\",,,,41497},{\"Argentina\",31,-1,20220402,-1,\"USD\",,,,4422},{\"Brazil\",28,-1,20220402,-1,\"USD\",,,,2655},{\"Japan\",17,-1,20220402,-1,\"USD\",,,,39769},{\"Argentina\",31,-1,20220507,-1,\"USD\",,,,4429},{\"Brazil\",28,-1,20220507,-1,\"USD\",,,,2522},{\"Japan\",17,-1,20220507,-1,\"USD\",,,,41157},{\"Argentina\",31,-1,20220604,-1,\"USD\",,,,4429},{\"Brazil\",28,-1,20220604,-1,\"USD\",,,,2542},{\"Japan\",17,-1,20220604,-1,\"USD\",,,,41157},{\"Argentina\",31,-1,20220702,-1,\"USD\",,,,4453},{\"Brazil\",28,-1,20220702,-1,\"USD\",,,,2549},{\"Japan\",17,-1,20220702,-1,\"USD\",,,,35096},{\"Argentina\",31,-1,20220806,-1,\"USD\",,,,5125},{\"Brazil\",28,-1,20220806,-1,\"USD\",,,,2570},{\"Japan\",17,-1,20220806,-1,\"USD\",,,,36612},{\"Argentina\",31,-1,20220903,-1,\"USD\",,,,4096},{\"Brazil\",28,-1,20220903,-1,\"USD\",,,,2501},{\"Japan\",17,-1,20220903,-1,\"USD\",,,,38854},{\"Argentina\",31,-1,20221001,-1,\"USD\",,,,4224},{\"Brazil\",28,-1,20221001,-1,\"USD\",,,,2250},{\"Japan\",17,-1,20221001,-1,\"USD\",,,,40259},{\"Argentina\",31,-1,20221105,-1,\"USD\",,,,4476},{\"Brazil\",28,-1,20221105,-1,\"USD\",,,,2325},{\"Japan\",17,-1,20221105,-1,\"USD\",,,,38898},{\"Argentina\",31,-1,20221203,-1,\"USD\",,,,4476},{\"Brazil\",28,-1,20221203,-1,\"USD\",,,,2325},{\"Japan\",17,-1,20221203,-1,\"USD\",,,,36050},{\"Argentina\",31,-1,20221231,-1,\"USD\",,,,4428},{\"Brazil\",28,-1,20221231,-1,\"USD\",,,,2311},{\"Argentina\",31,-1,20230204,-1,\"USD\",,,,4721},{\"Brazil\",28,-1,20230204,-1,\"USD\",,,,2342},{\"Argentina\",31,-1,20230304,-1,\"USD\",,,,5053},{\"Brazil\",28,-1,20230304,-1,\"USD\",,,,2366},{\"Argentina\",31,-1,20230401,-1,\"USD\",,,,4704},{\"Brazil\",28,-1,20230401,-1,\"USD\",,,,2351},{\"Argentina\",31,-1,20230506,-1,\"USD\",,,,4824},{\"Brazil\",28,-1,20230506,-1,\"USD\",,,,2341},{\"Argentina\",31,-1,20230603,-1,\"USD\",,,,5197},{\"Brazil\",28,-1,20230603,-1,\"USD\",,,,2415},{\"Argentina\",31,-1,20230701,-1,\"USD\",,,,5039},{\"Brazil\",28,-1,20230701,-1,\"USD\",,,,2417}",
                "}",
                ")"
              ]
            }
          }
        ],
        "measures": [
          {
            "name": "SRE_SKU Count",
            "expression": " SUM('Self Reported KPIs'[SKU_Count])",
            "formatString": "#,0",
            "displayFolder": "SelfReportedEntities\\SKUCount"
          },
          {
            "name": "SRE_SKUCount LME",
            "expression": [
              " ",
              " CALCULATE(",
              "    [SRE_SKU Count],",
              " FILTER(",
              "     ALL('Calendar'),",
              "     CONTAINS(",
              "            VALUES('Calendar'[PreviousMonthEnding]),'Calendar'[PreviousMonthEnding],'Calendar'[Day Date]",
              "        )",
              "    )",
              " )",
              ""
            ],
            "formatString": "#,0",
            "displayFolder": "SelfReportedEntities\\SKUCount"
          },
          {
            "name": "SRE_SKUCount LME vs LYE %",
            "expression": " Divide([SRE_SKUCount LME],[SRE_SKUCount LYE])-1",
            "formatString": "#,0.00%;-#,0.00%;#,0.00%",
            "displayFolder": "SelfReportedEntities\\SKUCount"
          },
          {
            "name": "SRE_SKUCount LYE",
            "expression": [
              " ",
              " CALCULATE(",
              "    [SRE_SKU Count],",
              " FILTER(",
              "     ALL('Calendar'),",
              "     CONTAINS(",
              "            VALUES('Calendar'[PreviousYearEnding]),'Calendar'[PreviousYearEnding],'Calendar'[Day Date]",
              "        )",
              "    )",
              " )"
            ],
            "formatString": "#,0",
            "displayFolder": "SelfReportedEntities\\SKUCount"
          },
          {
            "name": "SRE_SKUCount LME vs LYE",
            "expression": " [SRE_SKUCount LME]-[SRE_SKUCount LYE]",
            "formatString": "#,0",
            "displayFolder": "SelfReportedEntities\\SKUCount"
          },
          {
            "name": "SRE_SKU Count LYLME",
            "expression": [
              " ",
              " CALCULATE(",
              "    [SRE_SKUCount LME],",
              " FILTER(",
              "     ALL('Calendar'),",
              "     CONTAINS(",
              "            VALUES('Calendar'[LY Day Date]),'Calendar'[LY Day Date],'Calendar'[Day Date]",
              "        )",
              "    )",
              " )"
            ],
            "formatString": "#,0",
            "displayFolder": "SelfReportedEntities\\SKUCount"
          }
        ]
      },
      {
        "name": "Historical Classifications",
        "columns": [
          {
            "name": "Classification_Code_Hier_ID",
            "dataType": "int64",
            "isHidden": true,
            "sourceColumn": "Classification_Code_Hier_ID"
          },
          {
            "name": "Class_Code_LV1",
            "dataType": "int64",
            "isHidden": true,
            "sourceColumn": "Class_Code_LV1"
          },
          {
            "name": "Class_Code_LV1_Desc",
            "dataType": "string",
            "isHidden": true,
            "sourceColumn": "Class_Code_LV1_Desc",
            "sortByColumn": "Reporting_Sort_Order_LV1"
          },
          {
            "name": "Class_Code_LV2",
            "dataType": "int64",
            "isHidden": true,
            "sourceColumn": "Class_Code_LV2"
          },
          {
            "name": "Class_Code_LV2_Desc",
            "dataType": "string",
            "isHidden": true,
            "sourceColumn": "Class_Code_LV2_Desc",
            "sortByColumn": "Reporting_Sort_Order_LV2"
          },
          {
            "name": "Class_Code_LV3",
            "dataType": "int64",
            "isHidden": true,
            "sourceColumn": "Class_Code_LV3"
          },
          {
            "name": "Class_Code_LV3_Desc",
            "dataType": "string",
            "isHidden": true,
            "sourceColumn": "Class_Code_LV3_Desc",
            "sortByColumn": "Reporting_Sort_Order_LV3"
          },
          {
            "name": "Reporting_Sort_Order_LV1",
            "dataType": "int64",
            "isHidden": true,
            "sourceColumn": "Reporting_Sort_Order_LV1"
          },
          {
            "name": "Reporting_Sort_Order_LV2",
            "dataType": "int64",
            "isHidden": true,
            "sourceColumn": "Reporting_Sort_Order_LV2"
          },
          {
            "name": "Reporting_Sort_Order_LV3",
            "dataType": "int64",
            "isHidden": true,
            "sourceColumn": "Reporting_Sort_Order_LV3"
          },
          {
            "type": "calculated",
            "name": "Alt_Class_Code_LV2_Desc",
            "dataType": "string",
            "isDataTypeInferred": true,
            "isHidden": true,
            "expression": [
              " IF(",
              "    'Historical Classifications'[Class_Code_LV3_Desc] = \"Active Watch\", ",
              "    'Historical Classifications'[Class_Code_LV3_Desc], ",
              "    'Historical Classifications'[Class_Code_LV2_Desc]",
              ")"
            ],
            "sortByColumn": "Reporting_Sort_Order_Alt_LV2"
          },
          {
            "type": "calculated",
            "name": "Reporting_Sort_Order_Alt_LV2",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "isHidden": true,
            "expression": [
              " IF(",
              "    'Historical Classifications'[Class_Code_LV3_Desc] = \"Active Watch\", ",
              "    'Historical Classifications'[Reporting_Sort_Order_LV2] + 1, ",
              "    'Historical Classifications'[Reporting_Sort_Order_LV2]",
              ")"
            ]
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = #\"SQL Server HBIDW\",",
                "    dbo_Dim_Classifications = Source{[Schema=\"dbo\",Item=\"Dim_Classifications\"]}[Data]",
                "in",
                "    dbo_Dim_Classifications"
              ]
            }
          }
        ],
        "hierarchies": [
          {
            "name": "Historical Classification",
            "levels": [
              {
                "name": "Class_Code_LV1_Desc",
                "ordinal": 0,
                "column": "Class_Code_LV1_Desc"
              },
              {
                "name": "Class_Code_LV2_Desc",
                "ordinal": 1,
                "column": "Class_Code_LV2_Desc"
              },
              {
                "name": "Class_Code_LV3_Desc",
                "ordinal": 2,
                "column": "Class_Code_LV3_Desc"
              }
            ]
          },
          {
            "name": "Alt Historical Classification",
            "levels": [
              {
                "name": "Class_Code_LV1_Desc",
                "ordinal": 0,
                "column": "Class_Code_LV1_Desc"
              },
              {
                "name": "Alt_Class_Code_LV2_Desc",
                "ordinal": 1,
                "column": "Alt_Class_Code_LV2_Desc"
              },
              {
                "name": "Class_Code_LV3_Desc",
                "ordinal": 2,
                "column": "Class_Code_LV3_Desc"
              }
            ]
          }
        ]
      },
      {
        "name": "Item Changes",
        "columns": [
          {
            "name": "Dim_Item_SCD_id",
            "dataType": "int64",
            "isHidden": true,
            "sourceColumn": "Dim_Item_SCD_id"
          },
          {
            "name": "Dim_Item_id",
            "dataType": "int64",
            "isHidden": true,
            "sourceColumn": "Dim_Item_id"
          },
          {
            "name": "Item_id",
            "dataType": "double",
            "isHidden": true,
            "sourceColumn": "Item_id"
          },
          {
            "name": "Historical_Class_Code_3",
            "dataType": "int64",
            "isHidden": true,
            "sourceColumn": "Historical_Class_Code_3"
          },
          {
            "name": "Inv_Disposition_Route",
            "dataType": "string",
            "sourceColumn": "Inv_Disposition_Route"
          },
          {
            "name": "Start_date",
            "dataType": "dateTime",
            "sourceColumn": "Start_date"
          },
          {
            "name": "End_date",
            "dataType": "dateTime",
            "sourceColumn": "End_date"
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = Sql.Database(\"BIPAOSQL.res.hbi.net\", \"HBIDW\", [Query=\"SELECT scd.[Dim_Item_SCD_id]#(lf)      ,[Dim_Item_id]#(lf)      ,[Item_id]#(lf)      --,[LCA_Class_Code_3]#(lf)      --,[LCA_Class_Code]#(lf)      --,[Mapped_TSS_Class_Code_3]#(lf)      --,[Mapped_TSS_Class_Code]#(lf)      ,[Historical_Class_Code_3]#(lf)      --,[Historical_Class_Code]#(lf)      ,[Inv_Disposition_Route]#(lf)      --,[Type2_Checksum]#(lf)      --,[UPDATE_USERID]#(lf)      --,[Create_Date]#(lf)      --,[Modified_Date]#(lf)      --,[Current_Item_Flag]#(lf)      ,[Start_date]#(lf)      ,[End_date]#(lf)  FROM [HBIDW].[dbo].[Dim_Item_SCD] scd#(lf)  inner join (#(lf)  select distinct Dim_Item_SCD_id #(lf)  from [HBIDW].[dbo].[Fact_Inventory_DIV_vw] #(lf)  where As_of_Date_int>= 20181227#(lf)  ) inv#(lf)  on scd.Dim_Item_SCD_id = inv.Dim_Item_SCD_id\"])",
                "in",
                "    Source"
              ]
            }
          }
        ]
      },
      {
        "name": "Aging Bucket",
        "columns": [
          {
            "type": "calculatedTableColumn",
            "name": "Detailed Aging Buckets",
            "dataType": "string",
            "isNameInferred": false,
            "isDataTypeInferred": true,
            "isHidden": true,
            "sourceColumn": "[Value1]",
            "sortByColumn": "Detailed Aging Buckets Sort"
          },
          {
            "type": "calculatedTableColumn",
            "name": "Detailed Aging Buckets Sort",
            "dataType": "int64",
            "isNameInferred": false,
            "isDataTypeInferred": true,
            "isHidden": true,
            "sourceColumn": "[Value2]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "Summarized Aging Buckets",
            "dataType": "string",
            "isNameInferred": false,
            "isDataTypeInferred": true,
            "isHidden": true,
            "sourceColumn": "[Value3]",
            "sortByColumn": "Summarized Aging Buckets Sort"
          },
          {
            "type": "calculatedTableColumn",
            "name": "Summarized Aging Buckets Sort",
            "dataType": "int64",
            "isNameInferred": false,
            "isDataTypeInferred": true,
            "isHidden": true,
            "sourceColumn": "[Value4]"
          }
        ],
        "partitions": [
          {
            "name": "CalculatedTable 1",
            "source": {
              "type": "calculated",
              "expression": [
                "{",
                "(\"(0-6 mos) 0-180 days\", 1, \"0 - 6 months\", 1)",
                ",(\"(6 mos) 181-211 days\", 2, \"0 - 6 months\", 1)",
                ",(\"(7 mos) 212-242 days\", 3, \"7 - 9 months\", 2)",
                ",(\"(8 mos) 243-273 days\", 4, \"7 - 9 months\", 2)",
                ",(\"(9 mos) 274-304 days\", 5, \"7 - 9 months\", 2)",
                ",(\"(10 mos) 305-335 days\", 6, \"10 - 12 months\", 3)",
                ",(\"(11 mos) 336-360 days\", 7, \"10 - 12 months\", 3)",
                ",(\"(12 mos) 361-390 days\", 8, \"10 - 12 months\", 3)",
                ",(\"(13 mos) 391-420 days\", 9, \"13 - 24 months\", 4)",
                ",(\"(14 mos) 421-450 days\", 10, \"13 - 24 months\", 4)",
                ",(\"(15 mos) 451-480 days\", 11, \"13 - 24 months\", 4)",
                ",(\"(16 mos) 481-510 days\", 12, \"13 - 24 months\", 4)",
                ",(\"(17 mos) 511-540 days\", 13, \"13 - 24 months\", 4)",
                ",(\"(18 mos) 541-570 days\", 14, \"13 - 24 months\", 4)",
                ",(\"(19 mos) 571-600 days\", 15, \"13 - 24 months\", 4)",
                ",(\"(20 mos) 601-630 days\", 16, \"13 - 24 months\", 4)",
                ",(\"(21 mos) 631-660 days\", 17, \"13 - 24 months\", 4)",
                ",(\"(22 mos) 661-690 days\", 18, \"13 - 24 months\", 4)",
                ",(\"(23 mos) 691-720 days\", 19, \"13 - 24 months\", 4)",
                ",(\"(24 mos) 0ver 721 days\", 20, \"24 months +\", 5)",
                "}"
              ]
            }
          }
        ],
        "hierarchies": [
          {
            "name": "Class Aging",
            "levels": [
              {
                "name": "Summarized Aging Buckets",
                "ordinal": 0,
                "column": "Summarized Aging Buckets"
              },
              {
                "name": "Detailed Aging Buckets",
                "ordinal": 1,
                "column": "Detailed Aging Buckets"
              }
            ]
          }
        ]
      },
      {
        "name": "Sales",
        "columns": [
          {
            "name": "Dim_Item_id",
            "dataType": "int64",
            "isHidden": true,
            "sourceColumn": "Dim_Item_id"
          },
          {
            "name": "Dim_Facility_id",
            "dataType": "int64",
            "isHidden": true,
            "sourceColumn": "Dim_Facility_id"
          },
          {
            "name": "business_segment_hierarchy_id",
            "dataType": "int64",
            "isHidden": true,
            "sourceColumn": "business_segment_hierarchy_id"
          },
          {
            "name": "As_of_Date_int",
            "dataType": "int64",
            "isHidden": true,
            "sourceColumn": "As_of_Date_int"
          },
          {
            "name": "Pre-incentive Sales Dollars",
            "dataType": "double",
            "isHidden": true,
            "sourceColumn": "Pre-incentive Sales Dollars"
          },
          {
            "name": "Pre-incentive COGS Dollars",
            "dataType": "double",
            "isHidden": true,
            "sourceColumn": "Pre-incentive COGS Dollars"
          },
          {
            "name": "Gross Sales Dollars",
            "dataType": "double",
            "isHidden": true,
            "sourceColumn": "Gross Sales Dollars"
          },
          {
            "name": "Adj to Gross Sales Dollars",
            "dataType": "double",
            "isHidden": true,
            "sourceColumn": "Adj to Gross Sales Dollars"
          },
          {
            "name": "Intercompany Net Sales Dollars",
            "dataType": "double",
            "isHidden": true,
            "sourceColumn": "Intercompany Net Sales Dollars"
          },
          {
            "name": "Sales Incentive Cost Dollars",
            "dataType": "double",
            "isHidden": true,
            "sourceColumn": "Sales Incentive Cost Dollars"
          },
          {
            "name": "Intercompany SCOGS Dollars",
            "dataType": "double",
            "isHidden": true,
            "sourceColumn": "Intercompany SCOGS Dollars"
          }
        ],
        "partitions": [
          {
            "name": "SalesTemplate",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = #\"SQL Server HBIDW\",",
                "    dbo_InventorySKU_Fact_Sales_Vw = Source{[Schema=\"dbo\",Item=\"InventorySKU_Fact_Sales_Vw\"]}[Data],",
                "    #\"Filtered Rows\" = Table.SelectRows(dbo_InventorySKU_Fact_Sales_Vw, each [AS_OF_DATE_INT] < 19000101)",
                "in",
                "    #\"Filtered Rows\""
              ]
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>let",
                  "    Source = #\"SQL Server HBIDW\",",
                  "    dbo_InventorySKU_Fact_Sales_Vw = Source{[Schema=\"dbo\",Item=\"InventorySKU_Fact_Sales_Vw\"]}[Data],",
                  "    #\"Filtered Rows\" = Table.SelectRows(dbo_InventorySKU_Fact_Sales_Vw, each [AS_OF_DATE_INT] < 19000101)",
                  "in",
                  "    #\"Filtered Rows\"</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "measures": [
          {
            "name": "Pre-incentive Sales $",
            "expression": [
              " ",
              "VAR MaxWeekEnd = MAX('Sales'[As_of_Date_int])",
              "VAR SalesIsFiltered = ISFILTERED('calendar')",
              "VAR Result = ",
              "    IF(SalesIsFiltered, ",
              "        SUM(Sales[Pre-incentive Sales Dollars]),",
              "        CALCULATE(",
              "            SUM(Sales[Pre-incentive Sales Dollars]),",
              "            'Calendar'[As of Date INT] = MaxWeekEnd",
              "        )",
              "    )",
              "RETURN",
              "Result",
              "",
              ""
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "displayFolder": "Sales",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "Pre-incentive COGS $",
            "expression": [
              "",
              "VAR MaxWeekEnd = MAX('Sales'[As_of_Date_int])",
              "VAR SalesIsFiltered = ISFILTERED('calendar')",
              "VAR Result = ",
              "    IF(SalesIsFiltered, ",
              "        SUM(Sales[Pre-incentive COGS Dollars]),",
              "        CALCULATE(",
              "            SUM(Sales[Pre-incentive COGS Dollars]),",
              "            'Calendar'[As of Date INT] = MaxWeekEnd",
              "        )",
              "    )",
              "RETURN",
              "Result",
              ""
            ],
            "formatString": "\\$#,0.00;(\\$#,0.00);\\$#,0.00",
            "displayFolder": "COGS",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\" Accuracy=\"2\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "Gross Sales $",
            "expression": [
              " ",
              "VAR MaxWeekEnd = MAX('Sales'[As_of_Date_int])",
              "VAR SalesIsFiltered = ISFILTERED('calendar')",
              "VAR Result = ",
              "    IF(SalesIsFiltered, ",
              "        SUM(Sales[Gross Sales Dollars]),",
              "        CALCULATE(",
              "            SUM(Sales[Gross Sales Dollars]),",
              "            'Calendar'[As of Date INT] = MaxWeekEnd",
              "        )",
              "    )",
              "RETURN",
              "Result",
              ""
            ],
            "formatString": "\\$#,0.00;(\\$#,0.00);\\$#,0.00",
            "displayFolder": "Sales",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\" Accuracy=\"2\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "Adj to Gross Sales $",
            "expression": [
              " ",
              "VAR MaxWeekEnd = MAX('Sales'[As_of_Date_int])",
              "VAR SalesIsFiltered = ISFILTERED('calendar')",
              "VAR Result = ",
              "    IF(SalesIsFiltered, ",
              "        SUM(Sales[Adj to Gross Sales Dollars]),",
              "        CALCULATE(",
              "            SUM(Sales[Adj to Gross Sales Dollars]),",
              "            'Calendar'[As of Date INT] = MaxWeekEnd",
              "        )",
              "    )",
              "RETURN",
              "Result",
              ""
            ],
            "formatString": "\\$#,0.00;(\\$#,0.00);\\$#,0.00",
            "displayFolder": "Sales",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\" Accuracy=\"2\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "Intercompany Net Sales $",
            "expression": [
              " ",
              "VAR MaxWeekEnd = MAX('Sales'[As_of_Date_int])",
              "VAR SalesIsFiltered = ISFILTERED('calendar')",
              "VAR Result = ",
              "    IF(SalesIsFiltered, ",
              "        SUM(Sales[Intercompany Net Sales Dollars]),",
              "        CALCULATE(",
              "            SUM(Sales[Intercompany Net Sales Dollars]),",
              "            'Calendar'[As of Date INT] = MaxWeekEnd",
              "        )",
              "    )",
              "RETURN",
              "Result",
              ""
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "displayFolder": "Sales",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "Sales Incentive Cost $",
            "expression": [
              " ",
              "VAR MaxWeekEnd = MAX('Sales'[As_of_Date_int])",
              "VAR SalesIsFiltered = ISFILTERED('calendar')",
              "VAR Result = ",
              "    IF(SalesIsFiltered, ",
              "        SUM(Sales[Sales Incentive Cost Dollars]),",
              "        CALCULATE(",
              "            SUM(Sales[Sales Incentive Cost Dollars]),",
              "            'Calendar'[As of Date INT] = MaxWeekEnd",
              "        )",
              "    )",
              "RETURN",
              "Result",
              ""
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "displayFolder": "COGS",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "Intercompany SCOGS $",
            "expression": [
              " ",
              "VAR MaxWeekEnd = MAX('Sales'[As_of_Date_int])",
              "VAR SalesIsFiltered = ISFILTERED('calendar')",
              "VAR Result = ",
              "    IF(SalesIsFiltered, ",
              "        SUM(Sales[Intercompany SCOGS Dollars]),",
              "        CALCULATE(",
              "            SUM(Sales[Intercompany SCOGS Dollars]),",
              "            'Calendar'[As of Date INT] = MaxWeekEnd",
              "        )",
              "    )",
              "RETURN",
              "Result",
              ""
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "displayFolder": "COGS",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "Pre-incentive Gross Margin %",
            "expression": [
              "",
              "DIVIDE([Pre-incentive Gross Margin $], Sales[Pre-incentive Sales $])"
            ],
            "formatString": "0.00%;-0.00%;0.00%",
            "displayFolder": "Gross Margin"
          },
          {
            "name": "Pre-incentive Gross Margin $",
            "expression": [
              "",
              "[Pre-incentive Sales $] - [Pre-incentive COGS $]"
            ],
            "formatString": "\\$#,0.00;(\\$#,0.00);\\$#,0.00",
            "displayFolder": "Gross Margin",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\" Accuracy=\"2\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "Pre-incentive Sales Dollars per SCA",
            "expression": [
              "",
              "VAR CalendarIsFiltered =",
              "    ISFILTERED ( 'calendar' )",
              "VAR MaxDate =",
              "    LOOKUPVALUE (",
              "        'Calendar'[LY Day Date],",
              "        'Calendar'[Day Date INT], [LastDateWithData]",
              "    )",
              "VAR TwelveMonthsSales = ",
              "\tIF  (",
              "\t\t\t[ShowValueForDates],",
              "\t\t\tVAR NumOfDays = 362",
              "\t\t\tVAR LastDay = [MaxSequentialNumber]",
              "\t\t\tVAR FirstDay = LastDay- NumOfDays",
              "\t\t\tVAR Result =",
              "\t\t\t\tCALCULATE ",
              "\t\t\t\t\t\t(",
              "\t\t\t\t\t\t\t[Pre-incentive Sales $],",
              "\t\t\t\t\t\t\tREMOVEFILTERS('Calendar'),",
              "\t\t\t\t\t\t\t'Calendar'[Sequential Day Number] >=FirstDay",
              "\t\t\t\t\t\t\t\t&& 'Calendar'[Sequential Day Number] <= LastDay",
              "\t\t\t\t\t\t)",
              "\t\t\tRETURN",
              "\t\t\tResult",
              "\t\t)",
              "\t\t",
              "VAR CurrentMonthSCACount = [SCA Count]",
              "",
              "VAR LastYearSCACount = ",
              "   IF (",
              "        CalendarIsFiltered && [ShowValueForDates],",
              "        CALCULATE (",
              "            [SCA Count],",
              "            FILTER (",
              "                ALL ( 'Calendar' ),",
              "                CONTAINS (",
              "                    VALUES ( 'Calendar'[LY Day Date] ),",
              "                    'Calendar'[LY Day Date], 'Calendar'[Day Date]",
              "                )",
              "            )",
              "        ),",
              "        CALCULATE ( [SCA Count] , 'Calendar'[Day Date] = MaxDate )",
              "    )",
              "",
              "VAR AvgSKUCount = (CurrentMonthSCACount + LastYearSCACount) / 2\t\t",
              "",
              "VAR Result = DIVIDE(TwelveMonthsSales, AvgSKUCount)",
              "",
              "RETURN",
              "Result"
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\" ThousandSeparator=\"True\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "Pre-incentive Gross Margin Dollars per SCA",
            "expression": [
              "",
              "VAR CalendarIsFiltered =",
              "    ISFILTERED ( 'calendar' )",
              "VAR MaxDate =",
              "    LOOKUPVALUE (",
              "        'Calendar'[LY Day Date],",
              "        'Calendar'[Day Date INT], [LastDateWithData]",
              "    )",
              "VAR TwelveMonthsSales = ",
              "\tIF  (",
              "\t\t\t[ShowValueForDates],",
              "\t\t\tVAR NumOfDays = 362",
              "\t\t\tVAR LastDay = [MaxSequentialNumber]",
              "\t\t\tVAR FirstDay = LastDay- NumOfDays",
              "\t\t\tVAR Result =",
              "\t\t\t\tCALCULATE ",
              "\t\t\t\t\t\t(",
              "\t\t\t\t\t\t\t[Pre-incentive Gross Margin $],",
              "\t\t\t\t\t\t\tREMOVEFILTERS('Calendar'),",
              "\t\t\t\t\t\t\t'Calendar'[Sequential Day Number] >=FirstDay",
              "\t\t\t\t\t\t\t\t&& 'Calendar'[Sequential Day Number] <= LastDay",
              "\t\t\t\t\t\t)",
              "\t\t\tRETURN",
              "\t\t\tResult",
              "\t\t)",
              "\t\t",
              "VAR CurrentMonthSCACount = [SCA Count]",
              "",
              "VAR LastYearSCACount = ",
              "   IF (",
              "        CalendarIsFiltered && [ShowValueForDates],",
              "        CALCULATE (",
              "            [SCA Count],",
              "            FILTER (",
              "                ALL ( 'Calendar' ),",
              "                CONTAINS (",
              "                    VALUES ( 'Calendar'[LY Day Date] ),",
              "                    'Calendar'[LY Day Date], 'Calendar'[Day Date]",
              "                )",
              "            )",
              "        ),",
              "        CALCULATE ( [SCA Count] , 'Calendar'[Day Date] = MaxDate )",
              "    )",
              "",
              "VAR AvgSKUCount = (CurrentMonthSCACount + LastYearSCACount) / 2\t\t",
              "",
              "VAR Result = DIVIDE(TwelveMonthsSales, AvgSKUCount)",
              "",
              "RETURN",
              "Result"
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "Pre-Incentive Sales $ (L12M)",
            "expression": [
              "",
              "IF (",
              "    [ShowValueForDates],",
              "    VAR NumOfDays = 362",
              "    VAR LastDay = [MaxSequentialNumber]",
              "    VAR FirstDay = LastDay- NumOfDays",
              "    VAR Result =",
              "        CALCULATE (",
              "            SUM(Sales[Pre-incentive Sales Dollars]),",
              "            REMOVEFILTERS('Calendar'),",
              "            'Calendar'[Sequential Day Number] >=FirstDay",
              "                && 'Calendar'[Sequential Day Number] <= LastDay",
              "        )",
              "",
              "    RETURN",
              "    Result",
              "",
              ")"
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "displayFolder": "Sales\\L12M",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "Pre-Incentive COGS $ (L12M)",
            "expression": [
              "",
              "IF (",
              "    [ShowValueForDates],",
              "    VAR NumOfDays = 362",
              "    VAR LastDay = [MaxSequentialNumber]",
              "    VAR FirstDay = LastDay- NumOfDays",
              "    VAR Result =",
              "        CALCULATE (",
              "            SUM(Sales[Pre-incentive COGS Dollars]),",
              "            REMOVEFILTERS('Calendar'),",
              "            'Calendar'[Sequential Day Number] >=FirstDay",
              "                && 'Calendar'[Sequential Day Number] <= LastDay",
              "        )",
              "",
              "    RETURN",
              "    Result",
              "",
              ")"
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "displayFolder": "COGS\\L12M",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "Gross Sales $ (L12M)",
            "expression": [
              "",
              "IF (",
              "    [ShowValueForDates],",
              "    VAR NumOfDays = 362",
              "    VAR LastDay = [MaxSequentialNumber]",
              "    VAR FirstDay = LastDay- NumOfDays",
              "    VAR Result =",
              "        CALCULATE (",
              "            SUM(Sales[Gross Sales Dollars]),",
              "            REMOVEFILTERS('Calendar'),",
              "            'Calendar'[Sequential Day Number] >=FirstDay",
              "                && 'Calendar'[Sequential Day Number] <= LastDay",
              "        )",
              "",
              "    RETURN",
              "    Result",
              "",
              ")"
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "displayFolder": "Sales\\L12M",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "Adj to Gross Sales $ (L12M)",
            "expression": [
              "",
              "IF (",
              "    [ShowValueForDates],",
              "    VAR NumOfDays = 362",
              "    VAR LastDay = [MaxSequentialNumber]",
              "    VAR FirstDay = LastDay- NumOfDays",
              "    VAR Result =",
              "        CALCULATE (",
              "            SUM(Sales[Adj to Gross Sales Dollars]),",
              "            REMOVEFILTERS('Calendar'),",
              "            'Calendar'[Sequential Day Number] >=FirstDay",
              "                && 'Calendar'[Sequential Day Number] <= LastDay",
              "        )",
              "",
              "    RETURN",
              "    Result",
              "",
              ")"
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "displayFolder": "Sales\\L12M",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "Intercompany Net Sales $ (L12M)",
            "expression": [
              "",
              "IF (",
              "    [ShowValueForDates],",
              "    VAR NumOfDays = 362",
              "    VAR LastDay = [MaxSequentialNumber]",
              "    VAR FirstDay = LastDay- NumOfDays",
              "    VAR Result =",
              "        CALCULATE (",
              "            SUM(Sales[Intercompany Net Sales Dollars]),",
              "            REMOVEFILTERS('Calendar'),",
              "            'Calendar'[Sequential Day Number] >=FirstDay",
              "                && 'Calendar'[Sequential Day Number] <= LastDay",
              "        )",
              "",
              "    RETURN",
              "    Result",
              "",
              ")"
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "displayFolder": "Sales\\L12M",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "Sales Incentive Cost $ (L12M)",
            "expression": [
              "",
              "IF (",
              "    [ShowValueForDates],",
              "    VAR NumOfDays = 362",
              "    VAR LastDay = [MaxSequentialNumber]",
              "    VAR FirstDay = LastDay- NumOfDays",
              "    VAR Result =",
              "        CALCULATE (",
              "            SUM(Sales[Sales Incentive Cost Dollars]),",
              "            REMOVEFILTERS('Calendar'),",
              "            'Calendar'[Sequential Day Number] >=FirstDay",
              "                && 'Calendar'[Sequential Day Number] <= LastDay",
              "        )",
              "",
              "    RETURN",
              "    Result",
              "",
              ")"
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "displayFolder": "COGS\\L12M",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "Intercompany SCOGS $ (L12M)",
            "expression": [
              "",
              "IF (",
              "    [ShowValueForDates],",
              "    VAR NumOfDays = 362",
              "    VAR LastDay = [MaxSequentialNumber]",
              "    VAR FirstDay = LastDay- NumOfDays",
              "    VAR Result =",
              "        CALCULATE (",
              "            SUM(Sales[Intercompany SCOGS Dollars]),",
              "            REMOVEFILTERS('Calendar'),",
              "            'Calendar'[Sequential Day Number] >=FirstDay",
              "                && 'Calendar'[Sequential Day Number] <= LastDay",
              "        )",
              "",
              "    RETURN",
              "    Result",
              "",
              ")"
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "displayFolder": "COGS\\L12M",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "Pre-Incentive Gross Margin$ (L12M)",
            "expression": [
              "",
              "IF (",
              "    [ShowValueForDates],",
              "    VAR NumOfDays = 362",
              "    VAR LastDay = [MaxSequentialNumber]",
              "    VAR FirstDay = LastDay- NumOfDays",
              "    VAR Result =",
              "        CALCULATE (",
              "            SUM(Sales[Pre-incentive Sales Dollars]) - SUM(Sales[Pre-incentive COGS Dollars]),",
              "            REMOVEFILTERS('Calendar'),",
              "            'Calendar'[Sequential Day Number] >=FirstDay",
              "                && 'Calendar'[Sequential Day Number] <= LastDay",
              "        )",
              "",
              "    RETURN",
              "    Result",
              "",
              ")"
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "displayFolder": "Gross Margin\\L12M",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          }
        ]
      },
      {
        "name": "_Last N Months",
        "calculationGroup": {
          "precedence": 1,
          "calculationItems": [
            {
              "name": "Last 12M",
              "expression": [
                "IF (",
                "    [ShowValueForDates],",
                "    VAR NumOfDays = 362",
                "    VAR LastDay = [MaxSequentialNumber]",
                "    VAR FirstDay = LastDay- NumOfDays",
                "    VAR Result =",
                "        CALCULATE (",
                "            SELECTEDMEASURE(),",
                "            REMOVEFILTERS('Calendar'),",
                "            'Calendar'[Sequential Day Number] >=FirstDay",
                "                && 'Calendar'[Sequential Day Number] <= LastDay",
                "        )",
                "",
                "    RETURN",
                "    Result",
                "",
                ")"
              ],
              "ordinal": 100
            },
            {
              "name": "Last 6M",
              "expression": [
                "IF (",
                "    [ShowValueForDates],",
                "    VAR NumOfDays = 181",
                "    VAR LastDay = [MaxSequentialNumber]",
                "    VAR FirstDay = LastDay- NumOfDays",
                "    VAR Result =",
                "        CALCULATE (",
                "            SELECTEDMEASURE(),",
                "            REMOVEFILTERS('Calendar'),",
                "            'Calendar'[Sequential Day Number] >=FirstDay",
                "                && 'Calendar'[Sequential Day Number] <= LastDay",
                "        )",
                "",
                "    RETURN",
                "    Result",
                "",
                ")"
              ],
              "ordinal": 101
            },
            {
              "name": "Last 3M",
              "expression": [
                "IF (",
                "    [ShowValueForDates],",
                "    VAR NumOfDays = 90",
                "    VAR LastDay = [MaxSequentialNumber]",
                "    VAR FirstDay = LastDay- NumOfDays",
                "    VAR Result =",
                "        CALCULATE (",
                "            SELECTEDMEASURE(),",
                "            REMOVEFILTERS('Calendar'),",
                "            'Calendar'[Sequential Day Number] >=FirstDay",
                "                && 'Calendar'[Sequential Day Number] <= LastDay",
                "        )",
                "",
                "    RETURN",
                "    Result",
                "",
                ")"
              ],
              "ordinal": 102
            },
            {
              "name": "Last 1M",
              "expression": [
                "IF (",
                "    [ShowValueForDates],",
                "    VAR NumOfDays = 30",
                "    VAR LastDay = [MaxSequentialNumber]",
                "    VAR FirstDay = LastDay- NumOfDays",
                "    VAR Result =",
                "        CALCULATE (",
                "            SELECTEDMEASURE(),",
                "            REMOVEFILTERS('Calendar'),",
                "            'Calendar'[Sequential Day Number] >=FirstDay",
                "                && 'Calendar'[Sequential Day Number] <= LastDay",
                "        )",
                "",
                "    RETURN",
                "    Result",
                "",
                ")"
              ],
              "ordinal": 103
            },
            {
              "name": "Rolling 12M Avg",
              "expression": [
                "IF (",
                "    [ShowValueForDates],",
                "    VAR DaysOffset = 362",
                "    VAR LastDayMAT = [MaxSequentialNumber]",
                "    VAR FirstDayMAT = LastDayMAT - DaysOffset",
                "    VAR Period =",
                "        CALCULATETABLE (",
                "            VALUES ( 'Calendar'[Sequential Day Number] ),",
                "            REMOVEFILTERS('Calendar'),",
                "            'Calendar'[Sequential Day Number] >= FirstDayMAT",
                "                && 'Calendar'[Sequential Day Number] <= LastDayMAT,",
                "            'Calendar'[DateWithTransactions] = TRUE",
                "        )",
                "    VAR FirstDayWithData =",
                "        CALCULATE (",
                "            MIN ( Inventory[As_of_Date_int] ),",
                "            REMOVEFILTERS ()",
                "        )",
                "    VAR FirstDayWithData2 = ",
                "        CALCULATE(",
                "            MIN ( 'Calendar'[Sequential Day Number] ),",
                "            'Calendar'[Day Date INT] = FirstDayWithData",
                "        )",
                "    VAR FirstDayInPeriod =",
                "        MINX (",
                "            Period,",
                "            'Calendar'[Sequential Day Number]",
                "        )",
                "    VAR Result =",
                "        IF (",
                "            FirstDayWithData2 <= FirstDayInPeriod,",
                "            CALCULATE (",
                "                AVERAGEX ( Period, SELECTEDMEASURE() ),",
                "                REMOVEFILTERS ( 'Calendar' )",
                "            )",
                "        )",
                "    RETURN",
                "        Result",
                ")"
              ],
              "ordinal": 104
            },
            {
              "name": "Rolling 6M Avg",
              "expression": [
                "IF (",
                "    [ShowValueForDates],",
                "    VAR DaysOffset = 181",
                "    VAR LastDayMAT = [MaxSequentialNumber]",
                "    VAR FirstDayMAT = LastDayMAT - DaysOffset",
                "    VAR Period =",
                "        CALCULATETABLE (",
                "            VALUES ( 'Calendar'[Sequential Day Number] ),",
                "            REMOVEFILTERS('Calendar'),",
                "            'Calendar'[Sequential Day Number] >= FirstDayMAT",
                "                && 'Calendar'[Sequential Day Number] <= LastDayMAT,",
                "            'Calendar'[DateWithTransactions] = TRUE",
                "        )",
                "    VAR FirstDayWithData =",
                "        CALCULATE (",
                "            MIN ( Inventory[As_of_Date_int] ),",
                "            REMOVEFILTERS ()",
                "        )",
                "    VAR FirstDayWithData2 = ",
                "        CALCULATE(",
                "            MIN ( 'Calendar'[Sequential Day Number] ),",
                "            'Calendar'[Day Date INT] = FirstDayWithData",
                "        )",
                "    VAR FirstDayInPeriod =",
                "        MINX (",
                "            Period,",
                "            'Calendar'[Sequential Day Number]",
                "        )",
                "    VAR Result =",
                "        IF (",
                "            FirstDayWithData2 <= FirstDayInPeriod,",
                "            CALCULATE (",
                "                AVERAGEX ( Period, SELECTEDMEASURE() ),",
                "                REMOVEFILTERS ( 'Calendar' )",
                "            )",
                "        )",
                "    RETURN",
                "        Result",
                ")"
              ],
              "ordinal": 105
            },
            {
              "name": "Rolling 3M Avg",
              "expression": [
                "IF (",
                "    [ShowValueForDates],",
                "    VAR DaysOffset = 90",
                "    VAR LastDayMAT = [MaxSequentialNumber]",
                "    VAR FirstDayMAT = LastDayMAT - DaysOffset",
                "    VAR Period =",
                "        CALCULATETABLE (",
                "            VALUES ( 'Calendar'[Sequential Day Number] ),",
                "            REMOVEFILTERS('Calendar'),",
                "            'Calendar'[Sequential Day Number] >= FirstDayMAT",
                "                && 'Calendar'[Sequential Day Number] <= LastDayMAT,",
                "            'Calendar'[DateWithTransactions] = TRUE",
                "        )",
                "    VAR FirstDayWithData =",
                "        CALCULATE (",
                "            MIN ( Inventory[As_of_Date_int] ),",
                "            REMOVEFILTERS ()",
                "        )",
                "    VAR FirstDayWithData2 = ",
                "        CALCULATE(",
                "            MIN ( 'Calendar'[Sequential Day Number] ),",
                "            'Calendar'[Day Date INT] = FirstDayWithData",
                "        )",
                "    VAR FirstDayInPeriod =",
                "        MINX (",
                "            Period,",
                "            'Calendar'[Sequential Day Number]",
                "        )",
                "    VAR Result =",
                "        IF (",
                "            FirstDayWithData2 <= FirstDayInPeriod,",
                "            CALCULATE (",
                "                AVERAGEX ( Period, SELECTEDMEASURE() ),",
                "                REMOVEFILTERS ( 'Calendar' )",
                "            )",
                "        )",
                "    RETURN",
                "        Result",
                ")"
              ],
              "ordinal": 106
            },
            {
              "name": "Rolling 1M Avg",
              "expression": [
                "IF (",
                "    [ShowValueForDates],",
                "    VAR DaysOffset = 30",
                "    VAR LastDayMAT = [MaxSequentialNumber]",
                "    VAR FirstDayMAT = LastDayMAT - DaysOffset",
                "    VAR Period =",
                "        CALCULATETABLE (",
                "            VALUES ( 'Calendar'[Sequential Day Number] ),",
                "            REMOVEFILTERS('Calendar'),",
                "            'Calendar'[Sequential Day Number] >= FirstDayMAT",
                "                && 'Calendar'[Sequential Day Number] <= LastDayMAT,",
                "            'Calendar'[DateWithTransactions] = TRUE",
                "        )",
                "    VAR FirstDayWithData =",
                "        CALCULATE (",
                "            MIN ( Inventory[As_of_Date_int] ),",
                "            REMOVEFILTERS ()",
                "        )",
                "    VAR FirstDayWithData2 = ",
                "        CALCULATE(",
                "            MIN ( 'Calendar'[Sequential Day Number] ),",
                "            'Calendar'[Day Date INT] = FirstDayWithData",
                "        )",
                "    VAR FirstDayInPeriod =",
                "        MINX (",
                "            Period,",
                "            'Calendar'[Sequential Day Number]",
                "        )",
                "    VAR Result =",
                "        IF (",
                "            FirstDayWithData2 <= FirstDayInPeriod,",
                "            CALCULATE (",
                "                AVERAGEX ( Period, SELECTEDMEASURE() ),",
                "                REMOVEFILTERS ( 'Calendar' )",
                "            )",
                "        )",
                "    RETURN",
                "        Result",
                ")"
              ],
              "ordinal": 107
            }
          ]
        },
        "columns": [
          {
            "name": "Last N Months",
            "dataType": "string",
            "sourceColumn": "Name",
            "sortByColumn": "Ordinal"
          },
          {
            "name": "Ordinal",
            "dataType": "int64",
            "isHidden": true,
            "sourceColumn": "Ordinal"
          }
        ],
        "partitions": [
          {
            "name": "CalculationGroup 1",
            "mode": "import",
            "source": {
              "type": "calculationGroup"
            }
          }
        ]
      },
      {
        "name": "_Per SKU Count",
        "calculationGroup": {
          "precedence": 3,
          "calculationItems": [
            {
              "name": "Per SKU Count",
              "expression": "DIVIDE(SELECTEDMEASURE(), [SKU Count])"
            }
          ]
        },
        "columns": [
          {
            "name": "Per SKU Count",
            "dataType": "string",
            "sourceColumn": "Name",
            "sortByColumn": "Ordinal"
          },
          {
            "name": "Ordinal",
            "dataType": "int64",
            "isHidden": true,
            "sourceColumn": "Ordinal"
          }
        ],
        "partitions": [
          {
            "name": "CalculationGroup 1",
            "mode": "import",
            "source": {
              "type": "calculationGroup"
            }
          }
        ]
      },
      {
        "name": "LCA",
        "isHidden": true,
        "columns": [
          {
            "name": "reason_code",
            "dataType": "string",
            "sourceColumn": "REASON_CODE"
          },
          {
            "name": "obsolete_date",
            "dataType": "dateTime",
            "sourceColumn": "OBSOLETE_DATE"
          },
          {
            "name": "disposition_route",
            "dataType": "string",
            "sourceColumn": "DISPOSITION_ROUTE"
          },
          {
            "name": "notes",
            "dataType": "string",
            "sourceColumn": "NOTES"
          },
          {
            "name": "ITEM_ID",
            "dataType": "double",
            "sourceColumn": "ITEM_ID"
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = Sql.Database(\"BIPAOSQL.res.hbi.net\", \"HBIDW\", [Query=\"select#(lf)*#(lf)from openrowset('SQLOLEDB','SERVER=sqlp1bus16\\p1bus16;Trusted_Connection=yes;',#(lf)'#(lf)select#(lf)*#(lf)FROM OPENQUERY([AMS_OAKDWHP1],#(lf)''#(lf)#(lf)select#(lf)*#(lf)from#(lf)(#(lf)select#(lf)l1.item_id,#(lf)max(reason_code) keep (DENSE_RANK LAST ORDER BY l1.item_id,l1.update_timestamp) reason_code,#(lf)max(obsolete_date) keep (DENSE_RANK LAST ORDER BY nvl2(obsolete_date,l1.update_timestamp,NULL) NULLS first) obsolete_date,#(lf)max(disposition_route) keep (DENSE_RANK LAST ORDER BY l1.item_id,l1.update_timestamp) disposition_route,#(lf)max(Notes) keep (DENSE_RANK LAST ORDER BY l1.item_id,l1.update_timestamp) Notes#(lf)from#(lf)slba.item_lifecycle_updates l1#(lf)join slba.item i on l1.item_id=i.item_id#(lf)join slba.slba_item si on i.item_id=si.item_id#(lf)group by#(lf)l1.item_id#(lf)) t#(lf)where#(lf)(reason_code is not null or obsolete_date is not null or disposition_route is not null or notes is not null)#(lf)'') a#(lf)'#(lf)) b\"])",
                "in",
                "    Source"
              ]
            }
          }
        ]
      },
      {
        "name": "SellingType",
        "isHidden": true,
        "columns": [
          {
            "name": "SellingTypeSkuKey",
            "dataType": "string",
            "isHidden": true,
            "sourceColumn": "SellingTypeSkuKey"
          },
          {
            "name": "SBU",
            "dataType": "string",
            "sourceColumn": "SBU"
          },
          {
            "name": "SKU",
            "dataType": "string",
            "sourceColumn": "SKU"
          },
          {
            "name": "SellingType",
            "dataType": "string",
            "sourceColumn": "SellingType"
          },
          {
            "name": "UpdateTime",
            "dataType": "string",
            "sourceColumn": "UpdateTime"
          },
          {
            "name": "UpdatedBy",
            "dataType": "string",
            "sourceColumn": "UpdatedBy"
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = #\"Azure Synapse\",",
                "    Common_DimSellingType = Source{[Schema=\"Common\",Item=\"DimSellingType\"]}[Data],",
                "    #\"Sorted Rows\" = Table.Sort(Common_DimSellingType,{{\"UpdateTime\", Order.Descending}}),",
                "    #\"Removed Duplicates\" = Table.Distinct(#\"Sorted Rows\", {\"SKU\"})",
                "in",
                "    #\"Removed Duplicates\""
              ]
            }
          }
        ]
      },
      {
        "name": "SKU Statistics",
        "isHidden": true,
        "columns": [
          {
            "name": "Sbu_Desc",
            "dataType": "string",
            "sourceColumn": "Sbu_Desc"
          },
          {
            "name": "SKUGlobal",
            "dataType": "string",
            "sourceColumn": "SKUGlobal"
          },
          {
            "name": "LTMPreincentiveSalesDollarsRaw",
            "dataType": "double",
            "sourceColumn": "LTMPreincentiveSalesDollarsRaw"
          },
          {
            "name": "LTMPreincentiveSalesDollars",
            "dataType": "double",
            "sourceColumn": "LTMPreincentiveSalesDollars"
          },
          {
            "name": "HBICumulativeSales",
            "dataType": "double",
            "sourceColumn": "HBICumulativeSales"
          },
          {
            "name": "HBITotalSales",
            "dataType": "double",
            "sourceColumn": "HBITotalSales"
          },
          {
            "name": "HBICumulativePercentage",
            "dataType": "double",
            "sourceColumn": "HBICumulativePercentage"
          },
          {
            "name": "HBIRank",
            "dataType": "int64",
            "sourceColumn": "HBIRank"
          },
          {
            "name": "DivisionCumulativeSales",
            "dataType": "double",
            "sourceColumn": "DivisionCumulativeSales"
          },
          {
            "name": "DivisionTotalSales",
            "dataType": "double",
            "sourceColumn": "DivisionTotalSales"
          },
          {
            "name": "DivisionCumulativePercentage",
            "dataType": "double",
            "sourceColumn": "DivisionCumulativePercentage"
          },
          {
            "name": "DivisionRank",
            "dataType": "int64",
            "sourceColumn": "DivisionRank"
          },
          {
            "type": "calculated",
            "name": "HBI ABC Class",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "SWITCH(TRUE(),",
              "    'SKU Statistics'[HBICumulativePercentage] <.7, \"A\",",
              "    'SKU Statistics'[HBICumulativePercentage] <.9, \"B\",",
              "    \"C\"",
              ")"
            ]
          },
          {
            "type": "calculated",
            "name": "Division ABC Class",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "SWITCH(TRUE(),",
              "    'SKU Statistics'[DivisionCumulativePercentage] <.7, \"A\",",
              "    'SKU Statistics'[DivisionCumulativePercentage] <.9, \"B\",",
              "    \"C\"",
              ")"
            ]
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = Sql.Database(\"BIPAOSQL.res.hbi.net\", \"HBIDW\", [Query=\"WITH SkuGlobalSales AS#(lf)(#(lf)#(tab)SELECT #(lf)#(tab)#(tab)p.Sbu_Desc,#(lf)#(tab)#(tab)CASE #(lf)#(tab)#(tab)#(tab)WHEN p.Sbu_Desc IN ('Socks', 'HA Apparel', 'HA Sheridan', 'HA Bras N Things') THEN p.SKU#(lf)#(tab)#(tab)#(tab)WHEN p.Sbu_Desc = 'Alternative Apparel' THEN  p.Style_Num + '_' + p.Color_Code + '_' + p.Size_Code + '_'#(lf)#(tab)#(tab)#(tab)WHEN p.Sbu_Desc = 'Champion Europe' THEN p.S3_SKU#(lf)#(tab)#(tab)#(tab)ELSE p.SKU_Desc#(lf)#(tab)    END AS SKUGlobal,#(tab)#(tab)#(tab)#(lf)#(tab)#(tab)SUM(#(lf)#(tab)#(tab)#(tab)CASE#(lf)#(tab)#(tab)#(tab)#(tab)WHEN dim_measure_id IN (12130,20,12220,23,24,25,26,2310,22,2210,2220,2230,2240,2250) THEN s.local_dollars*b.PegRate#(tab)#(tab)#(tab)#(tab)#(tab)#(tab)#(tab)#(tab)#(lf)#(tab)#(tab)#(tab)END) AS LTMPreincentiveSalesDollars#(lf)#(tab)FROM [hbidw].[dbo].[Fact_Sales_Sku_DIV_Vw] s#(lf)#(tab)#(tab)LEFT JOIN (SELECT * from edm.dbo.Peg_Rate WHERE YEAR = (SELECT MIN(Fiscal_Yr) FROM HBIDW.dbo.Dim_Week WHERE Curr_Wk_Ind = 'Y')) b ON s.Currency=b.Currency#(lf)#(tab)#(tab)LEFT JOIN HBIDW.dbo.product_view p ON s.Dim_item_id = p.Dim_Item_id#(lf)#(tab)WHERE #(lf)#(tab)#(tab)As_of_Date_int IN (#(lf)#(tab)   SELECT TOP 52 AS_of_Date_INT --limit to last 52 weeks of sales/cogs#(lf)#(tab)   FROM HBIDW.dbo.Dim_Week#(lf)#(tab)   WHERE AS_of_Date_INT <= (SELECT MIN(AS_of_Date_INT) FROM hbidw.dbo.Dim_Week WHERE Curr_Wk_Ind = 'Y')#(lf)#(tab)   ORDER BY AS_of_Date_INT DESC#(lf)#(tab)#(tab))#(lf)#(tab)#(tab)AND Dim_measure_id IN (12130,20,12220,23,24,25,26,2310,22,2210,2220,2230,2240,2250)#(lf)#(tab)#(tab)and p.Sbu_Desc NOT LIKE 'HEI-%'#(lf)#(tab)group by#(lf)#(tab)#(tab)p.Sbu_Desc,#(lf)#(tab)#(tab)CASE #(lf)#(tab)#(tab)WHEN p.Sbu_Desc IN ('Socks', 'HA Apparel', 'HA Sheridan', 'HA Bras N Things') THEN p.SKU#(lf)#(tab)#(tab)WHEN p.Sbu_Desc = 'Alternative Apparel' THEN  p.Style_Num + '_' + p.Color_Code + '_' + p.Size_Code + '_'#(lf)#(tab)#(tab)WHEN p.Sbu_Desc = 'Champion Europe' THEN p.S3_SKU#(lf)#(tab)#(tab)ELSE p.SKU_Desc#(lf)#(tab)   END#(lf))#(lf),#(lf)#(lf)SkuGlobalSalesNoNegatives AS (#(lf)SELECT#(lf)min(coalesce(Sbu_Desc,'UNMAPPED')) sbu_desc,#(lf)SKUGlobal,#(lf)sum(LTMPreincentiveSalesDollars) AS LTMPreincentiveSalesDollarsRaw,#(lf)sum(CASE WHEN ISNULL(LTMPreincentiveSalesDollars,0) < 0 THEN 0 ELSE LTMPreincentiveSalesDollars END) AS LTMPreincentiveSalesDollars#(lf)FROM SkuGlobalSales s#(lf)WHERE LTMPreincentiveSalesDollars <> 0#(lf)group by#(lf)SKUGlobal#(lf))#(lf)#(lf)SELECT#(lf)#(tab)ps.Sbu_Desc,#(lf)#(tab)ps.SKUGlobal,#(lf)#(tab)LTMPreincentiveSalesDollarsRaw,#(lf)#(tab)ps.LTMPreincentiveSalesDollars,#(lf)#(tab)SUM(ps.LTMPreincentiveSalesDollars) OVER (ORDER BY ps.LTMPreincentiveSalesDollars DESC) AS HBICumulativeSales,#(lf)#(tab)SUM(ps.LTMPreincentiveSalesDollars) OVER () AS HBITotalSales,#(lf)#(tab)CASE #(lf)#(tab)#(tab)WHEN SUM(ps.LTMPreincentiveSalesDollars) = 0 THEN 1 #(lf)#(tab)#(tab)ELSE SUM(ps.LTMPreincentiveSalesDollars) OVER (ORDER BY ps.LTMPreincentiveSalesDollars DESC) / SUM(ps.LTMPreincentiveSalesDollars) OVER () #(lf)#(tab)END AS HBICumulativePercentage,#(lf)#(tab)RANK() OVER(ORDER BY ps.LTMPreincentiveSalesDollars DESC) AS HBIRank,#(lf)#(tab)SUM(ps.LTMPreincentiveSalesDollars) OVER (PARTITION BY ps.Sbu_Desc ORDER BY ps.LTMPreincentiveSalesDollars DESC) AS DivisionCumulativeSales,#(lf)#(tab)SUM(ps.LTMPreincentiveSalesDollars) OVER (PARTITION BY ps.Sbu_Desc) AS DivisionTotalSales,#(lf)#(tab)CASE #(lf)#(tab)#(tab)WHEN SUM(ps.LTMPreincentiveSalesDollars) = 0 THEN 1 #(lf)#(tab)#(tab)ELSE SUM(ps.LTMPreincentiveSalesDollars) OVER (PARTITION BY ps.Sbu_Desc ORDER BY ps.LTMPreincentiveSalesDollars DESC) / SUM(ps.LTMPreincentiveSalesDollars) OVER (PARTITION BY ps.Sbu_Desc) #(lf)#(tab)END AS DivisionCumulativePercentage,#(lf)#(tab)RANK() OVER(PARTITION BY ps.Sbu_Desc ORDER BY ps.LTMPreincentiveSalesDollars DESC) AS DivisionRank#(lf)FROM  SkuGlobalSalesNoNegatives ps#(lf)GROUP BY #(lf)#(tab)ps.Sbu_Desc,#(lf)#(tab)ps.SKUGlobal,#(lf)#(tab)LTMPreincentiveSalesDollarsRaw,#(lf)#(tab)ps.LTMPreincentiveSalesDollars\"])",
                "in",
                "    Source"
              ]
            }
          }
        ]
      },
      {
        "name": "Inventory Plan",
        "columns": [
          {
            "name": "Dim_Item_id",
            "dataType": "int64",
            "sourceColumn": "Dim_Item_id"
          },
          {
            "name": "Dim_Item_SCD_id",
            "dataType": "int64",
            "sourceColumn": "Dim_Item_SCD_id"
          },
          {
            "name": "Dim_Facility_id",
            "dataType": "int64",
            "sourceColumn": "Dim_Facility_id"
          },
          {
            "name": "business_segment_hierarchy_id",
            "dataType": "int64",
            "sourceColumn": "business_segment_hierarchy_id"
          },
          {
            "name": "BusKey",
            "dataType": "string",
            "sourceColumn": "BusKey"
          },
          {
            "name": "As_of_Date_int",
            "dataType": "int64",
            "sourceColumn": "As_of_Date_int"
          },
          {
            "name": "FinancialPlan",
            "dataType": "string",
            "sourceColumn": "FinancialPlan"
          },
          {
            "name": "currency",
            "dataType": "string",
            "sourceColumn": "currency"
          },
          {
            "name": "HAAStoreFlag",
            "dataType": "string",
            "sourceColumn": "HAAStoreFlag"
          },
          {
            "name": "Day_Duration",
            "dataType": "int64",
            "sourceColumn": "Day_Duration"
          },
          {
            "name": "units",
            "dataType": "double",
            "sourceColumn": "units"
          },
          {
            "name": "packages",
            "dataType": "double",
            "sourceColumn": "packages"
          },
          {
            "name": "dollars",
            "dataType": "double",
            "sourceColumn": "dollars"
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = Sql.Database(\"BIPAOSQL.res.hbi.net\", \"HBIDW\", [Query=\"\t",
                "SELECT   ",
                "\ta.[Dim_Item_id],",
                "\ta.[Dim_Item_SCD_id],",
                "    a.[Dim_Facility_id],",
                "    a.[business_segment_hierarchy_id],",
                "    a.[BusKey],",
                "\ta.[As_of_Date_int],",
                "\tda.AccountDescription FinancialPlan,",
                "\ta.currency,",
                "\tCASE ",
                "\t\tWHEN b.Division_Group = 'Hanes Australasia' AND f.Facility_Type = 'Retail Store'",
                "\t\t\tTHEN 'Y' ",
                "\t\t\tELSE 'N'",
                "\t\tEND HAAStoreFlag, --to be used in No Regrets dashboard (can delete after NR is over)",
                "\tdatediff(day, ",
                "\t\t\tscd.Start_date, ",
                "\t\t\tCASE",
                "\t\t\t\tWHEN scd.End_date > w.As_of_Date",
                "\t\t\t\tTHEN w.As_of_Date",
                "\t\t\t\tELSE scd.End_date",
                "\t\t\tEND)",
                "\t\t\tAS Day_Duration,",
                "    sum([units]) units,",
                "    sum([packages]) packages,",
                "    sum(a.local_dollars*c.PegRate) dollars",
                "FROM ",
                "\t[HBIDW].[dbo].[fact_Inventory_Plan_Div_vw] a",
                "\tLEFT JOIN",
                "\t  (",
                "\t   SELECT *",
                "\t   FROM edm.dbo.Peg_Rate",
                "\t   WHERE YEAR=2021",
                "\t   ) c",
                "\t   ON a.Currency=c.Currency",
                "\tLEFT JOIN edm.dbo.Business_Seg_Hierarchy_Samba_DIV_vw b",
                "\t   ON a.BusKey = b.BusKey",
                "\tLEFT JOIN HBIDW.dbo.product_view p",
                "\t   ON a.Dim_Item_id = p.Dim_Item_id",
                "\tLEFT JOIN HBIDW.dbo.Dim_Facility f",
                "\t   ON a.Dim_Facility_id = f.Dim_Facility_ID",
                "\tLEFT JOIN HBIDW.dbo.Dim_Item_SCD scd",
                "\t   ON a.Dim_Item_SCD_id = scd.Dim_Item_SCD_id",
                "\tLEFT JOIN hbidw.dbo.Dim_Week w",
                "\t   ON a.As_of_Date_int = w.AS_of_Date_INT",
                "\tLEFT JOIN edm.dbo.DimAccount da on a.Plan_Type_id=da.AccountKey",
                "\t\t\t\t\t\t\tand da.Application_Name='Inventory'",
                "\t\t\t\t\t\t\tand da.Dimension_name='Scenario'",
                "",
                "WHERE ",
                "\ta.As_of_Date_int>= ",
                "\t\t(",
                "\t\t\tSELECT min(as_of_date_int)",
                "\t\t\tFROM hbidw.dbo.Dim_Week",
                "\t\t\tWHERE ",
                "\t\t\t\tFiscal_Yr=2019",
                "\t\t\t\tAND Fiscal_Qtr_Num=1",
                "\t\t)",
                "\tAND Dim_measure_id IN (21100, 21200, 21300, 21400)",
                "GROUP BY ",
                "\ta.[Dim_Item_id],",
                "\ta.[Dim_Item_SCD_id],",
                "    a.[Dim_Facility_id],",
                "    a.[business_segment_hierarchy_id],",
                "    a.[BusKey],",
                "    a.[As_of_Date_int],",
                "\tda.AccountDescription,",
                "    a.currency,",
                "\tCASE ",
                "\t\tWHEN b.Division_Group = 'Hanes Australasia' AND f.Facility_Type = 'Retail Store'",
                "\t\tTHEN 'Y' ",
                "\t\tELSE 'N'",
                "\t\tEND,",
                "\tdatediff(day, ",
                "\t\t\tscd.Start_date, ",
                "\t\t\tCASE",
                "\t\t\t\tWHEN scd.End_date > w.As_of_Date",
                "\t\t\t\tTHEN w.As_of_Date",
                "\t\t\t\tELSE scd.End_date",
                "\t\t\tEND)\"])",
                "in",
                "    Source"
              ]
            }
          }
        ],
        "measures": [
          {
            "name": "Finished Good Dollars Plan",
            "expression": [
              " ",
              "VAR MaxWeekEnd =",
              "        \tMAX ( 'Calendar'[As of Date INT])",
              "        ",
              "Var MaxFiscalMth = ",
              "\tMAX('Calendar'[Fiscal_Mth])",
              "\t",
              "Var MaxWeekCount = ",
              "\tCALCULATE(",
              "\t\tMax('Calendar'[fiscal_wk_of_mth]),",
              "\t\t'Calendar'[Fiscal_Mth] = MaxFiscalMth,",
              "\t\tall('Calendar')",
              "\t)",
              "",
              "VAR CurrentPlan = LOOKUPVALUE('EDM Reference'[Reference_sub_key_1],'EDM Reference'[Reference_key],\"Inventory Current OP\",'EDM Reference'[Reference_subkey_seq],0)",
              "",
              "RETURN",
              "CALCULATE(",
              "\tSUM('Inventory Plan'[dollars])*MaxWeekCount,",
              "    \t'Calendar'[As of Date INT] = MaxWeekEnd,",
              "\t'Inventory Plan'[FinancialPlan]=CurrentPlan",
              ")"
            ],
            "displayFolder": "Inventory/Plan"
          },
          {
            "name": "Finished Good Dollars Actuals vs Plan $",
            "expression": [
              "",
              "[Finished Good Dollars]-[Finished Good Dollars Plan]"
            ],
            "displayFolder": "Inventory/Plan"
          },
          {
            "name": "Finished Good Dollars Actuals vs Plan %",
            "expression": [
              "",
              "Divide([Finished Good Dollars],[Finished Good Dollars Plan])"
            ],
            "displayFolder": "Inventory/Plan"
          },
          {
            "name": "Finished Good Units Plan",
            "expression": [
              "",
              "VAR MaxWeekEnd = ",
              "CALCULATE(",
              "    MAX('Inventory Plan'[As_of_Date_int]),",
              "    REMOVEFILTERS('Product'),",
              "    REMOVEFILTERS('Facility'),",
              "    REMOVEFILTERS('Business Hierarchy')",
              ")",
              "",
              "VAR MaxFiscalMth = ",
              "\tMax('Calendar'[Fiscal_Mth])",
              "\t",
              "Var MaxWeekCount = ",
              "\tCALCULATE(",
              "\t\tMax('Calendar'[fiscal_wk_of_mth]),",
              "\t\t'Calendar'[Fiscal_Mth] = MaxFiscalMth,",
              "\t\tall('Calendar')",
              "\t)\t\t",
              "",
              "VAR CurrentPlan = LOOKUPVALUE('EDM Reference'[Reference_sub_key_1],'EDM Reference'[Reference_key],\"Inventory Current OP\",'EDM Reference'[Reference_subkey_seq],0)",
              "",
              "",
              "RETURN",
              "CALCULATE(",
              "\tSUM('Inventory Plan'[units])*MaxWeekCount,",
              "    \t'Calendar'[As of Date INT] = MaxWeekEnd,",
              "\t'Inventory Plan'[FinancialPlan]=CurrentPlan",
              "",
              ")"
            ],
            "displayFolder": "Inventory/Plan"
          },
          {
            "name": "Finished Good Packages Plan",
            "expression": [
              "",
              "VAR MaxWeekEnd =",
              "\tMAX ('Calendar'[As of Date INT])\t\t\t",
              "",
              "Var MaxFiscalMth = ",
              "    Max ('Calendar'[Fiscal_Mth])",
              "        ",
              "VAR MaxWeekCount = ",
              "\tCALCULATE(",
              "\t\tMAX('Calendar'[fiscal_wk_of_mth]),\t\t",
              "\t\t'Calendar'[Fiscal_Mth]= MaxFiscalMth,",
              "        all('Calendar')\t\t",
              "\t)",
              "",
              "VAR CurrentPlan = LOOKUPVALUE('EDM Reference'[Reference_sub_key_1],'EDM Reference'[Reference_key],\"Inventory Current OP\",'EDM Reference'[Reference_subkey_seq],0)",
              "",
              "RETURN",
              "CALCULATE(",
              "    SUM('Inventory Plan'[packages])*MaxWeekCount,",
              "    'Calendar'[As of Date INT] = MaxWeekEnd,",
              "\t'Inventory Plan'[FinancialPlan]=CurrentPlan",
              ") "
            ],
            "displayFolder": "Inventory/Plan"
          },
          {
            "name": "Finished Good Dollars Plan (Millions)",
            "expression": [
              "",
              "VAR MaxWeekEnd =",
              "        \tMAX ( 'Calendar'[As of Date INT])",
              "        ",
              "Var MaxFiscalMth = ",
              "\tMAX('Calendar'[Fiscal_Mth])",
              "\t",
              "Var MaxWeekCount = ",
              "\tCALCULATE(",
              "\t\tMax('Calendar'[fiscal_wk_of_mth]),",
              "\t\t'Calendar'[Fiscal_Mth] = MaxFiscalMth,",
              "\t\tall('Calendar')",
              "\t)",
              "",
              "VAR CurrentPlan = LOOKUPVALUE('EDM Reference'[Reference_sub_key_1],'EDM Reference'[Reference_key],\"Inventory Current OP\",'EDM Reference'[Reference_subkey_seq],0)",
              "",
              "RETURN",
              "CALCULATE(",
              "\tdivide",
              "        (SUM('Inventory Plan'[dollars])*MaxWeekCount,1000000),",
              "    'Calendar'[As of Date INT] = MaxWeekEnd,",
              "\t'Inventory Plan'[FinancialPlan]=CurrentPlan",
              ")"
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "displayFolder": "Inventory/Plan",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "Finished Good Units Plan (Millions)",
            "expression": [
              "",
              "VAR MaxWeekEnd = ",
              "CALCULATE(",
              "    MAX('Inventory Plan'[As_of_Date_int]),",
              "    REMOVEFILTERS('Product'),",
              "    REMOVEFILTERS('Facility'),",
              "    REMOVEFILTERS('Business Hierarchy')",
              ")",
              "",
              "VAR MaxFiscalMth = ",
              "\tMax('Calendar'[Fiscal_Mth])",
              "\t",
              "Var MaxWeekCount = ",
              "\tCALCULATE(",
              "\t\tMax('Calendar'[fiscal_wk_of_mth]),",
              "\t\t'Calendar'[Fiscal_Mth] = MaxFiscalMth,",
              "\t\tall('Calendar')",
              "\t)\t\t",
              "",
              "VAR CurrentPlan = LOOKUPVALUE('EDM Reference'[Reference_sub_key_1],'EDM Reference'[Reference_key],\"Inventory Current OP\",'EDM Reference'[Reference_subkey_seq],0)",
              "",
              "",
              "RETURN",
              "CALCULATE(",
              "    Divide(",
              "\t    SUM('Inventory Plan'[packages])*MaxWeekCount,1000000),",
              "    \t'Calendar'[As of Date INT] = MaxWeekEnd,",
              "\t'Inventory Plan'[FinancialPlan]=CurrentPlan",
              "",
              ")"
            ],
            "formatString": "#,0",
            "displayFolder": "Inventory/Plan"
          },
          {
            "name": "Finished Good Packages Plan (Millions)",
            "expression": [
              "",
              "VAR MaxWeekEnd =",
              "        \tMAX ( 'Calendar'[As of Date INT])",
              "        ",
              "Var MaxFiscalMth = ",
              "\tMAX('Calendar'[Fiscal_Mth])",
              "\t",
              "Var MaxWeekCount = ",
              "\tCALCULATE(",
              "\t\tMax('Calendar'[fiscal_wk_of_mth]),",
              "\t\t'Calendar'[Fiscal_Mth] = MaxFiscalMth,",
              "\t\tall('Calendar')",
              "\t)",
              "",
              "VAR CurrentPlan = LOOKUPVALUE('EDM Reference'[Reference_sub_key_1],'EDM Reference'[Reference_key],\"Inventory Current OP\",'EDM Reference'[Reference_subkey_seq],0)",
              "",
              "RETURN",
              "CALCULATE(",
              "\tdivide",
              "        (SUM('Inventory Plan'[packages])*MaxWeekCount,1000000),",
              "    'Calendar'[As of Date INT] = MaxWeekEnd,",
              "\t'Inventory Plan'[FinancialPlan]=CurrentPlan",
              ")"
            ],
            "formatString": "#,0",
            "displayFolder": "Inventory/Plan"
          }
        ]
      },
      {
        "name": "SKU Creates",
        "isHidden": true,
        "columns": [
          {
            "name": "SKUGlobal",
            "dataType": "string",
            "sourceColumn": "SKUGlobal"
          },
          {
            "name": "Create_Date",
            "dataType": "dateTime",
            "sourceColumn": "Create_Date",
            "formatString": "Short Date",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"DateTimeShortDatePattern\" />"
              }
            ]
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = Sql.Database(\"hbi-qa01-analytics-dwsrv.database.windows.net\", \"hbiqa01dw\", [Query=\"select#(lf)#(tab)#(tab)distinct#(lf)#(tab)#(tab)#(tab)SKU as SKUGlobal,#(lf)#(tab)#(tab)#(tab)CONVERT(CHAR(10), CONVERT(datetime, Create_Date), 120) as Create_Date#(lf)#(tab)from#(lf)#(tab)#(tab)Common.DimSKUCreates\"])",
                "in",
                "    Source"
              ]
            }
          }
        ]
      },
      {
        "name": "WP SKU List",
        "columns": [
          {
            "name": "Division",
            "dataType": "string",
            "sourceColumn": "Division"
          },
          {
            "name": "IsActive",
            "dataType": "string",
            "sourceColumn": "IsActive"
          },
          {
            "name": "MarketingComment",
            "dataType": "string",
            "sourceColumn": "MarketingComment"
          },
          {
            "name": "PhaseOutQuarter",
            "dataType": "string",
            "sourceColumn": "PhaseOutQuarter"
          },
          {
            "name": "PhaseOutYear",
            "dataType": "int64",
            "sourceColumn": "PhaseOutYear"
          },
          {
            "name": "SKUGlobal",
            "dataType": "string",
            "sourceColumn": "SKUGlobal"
          },
          {
            "name": "SKUGroup",
            "dataType": "string",
            "sourceColumn": "SKUGroup"
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = #\"Azure Synapse\",",
                "    Common_DimWinningPortfolioSkuList = Source{[Schema=\"Common\",Item=\"DimWinningPortfolioSkuList\"]}[Data],",
                "    #\"Removed Columns\" = Table.RemoveColumns(Common_DimWinningPortfolioSkuList,{\"CreatedOn\", \"UpdatedOn\"}),",
                "    #\"Removed Duplicates\" = Table.Distinct(#\"Removed Columns\", {\"SKUGlobal\"})",
                "in",
                "    #\"Removed Duplicates\""
              ]
            }
          }
        ]
      },
      {
        "name": "_Scenario",
        "calculationGroup": {
          "precedence": 2,
          "calculationItems": [
            {
              "name": "Current",
              "expression": "SELECTEDMEASURE()",
              "ordinal": 1
            },
            {
              "name": "LLY",
              "expression": [
                "VAR CalendarIsFiltered =",
                "    ISFILTERED ( 'calendar' )",
                "VAR MaxDate =",
                "    LOOKUPVALUE (",
                "        'Calendar'[LLY Day Date],",
                "        'Calendar'[Day Date INT], [LastDateWithData]",
                "    )",
                "RETURN",
                "    IF (",
                "        CalendarIsFiltered && [ShowValueForDates],",
                "        CALCULATE (",
                "            SELECTEDMEASURE(),",
                "            FILTER (",
                "                ALL ( 'Calendar' ),",
                "                CONTAINS (",
                "                    VALUES ( 'Calendar'[LLY Day Date] ),",
                "                    'Calendar'[LLY Day Date], 'Calendar'[Day Date]",
                "                )",
                "            )",
                "        ),",
                "        CALCULATE ( SELECTEDMEASURE() , 'Calendar'[Day Date] = MaxDate )",
                "    )",
                ""
              ],
              "ordinal": 17
            },
            {
              "name": "LY",
              "expression": [
                "VAR CalendarIsFiltered =",
                "    ISFILTERED ( 'calendar' )",
                "VAR MaxDate =",
                "    LOOKUPVALUE (",
                "        'Calendar'[LY Day Date],",
                "        'Calendar'[Day Date INT], [LastDateWithData]",
                "    )",
                "RETURN",
                "    IF (",
                "        CalendarIsFiltered && [ShowValueForDates],",
                "        CALCULATE (",
                "            SELECTEDMEASURE(),",
                "            FILTER (",
                "                ALL ( 'Calendar' ),",
                "                CONTAINS (",
                "                    VALUES ( 'Calendar'[LY Day Date] ),",
                "                    'Calendar'[LY Day Date], 'Calendar'[Day Date]",
                "                )",
                "            )",
                "        ),",
                "        CALCULATE ( SELECTEDMEASURE() , 'Calendar'[Day Date] = MaxDate )",
                "    )",
                ""
              ],
              "ordinal": 14
            },
            {
              "name": "vs LY",
              "expression": [
                "IF ",
                "(",
                "    SELECTEDMEASURE() = BLANK() || ",
                "    CALCULATE(SELECTEDMEASURE(),'_Scenario'[Scenario] = \"LY\") = BLANK(),",
                "        BLANK(),",
                "        SELECTEDMEASURE() - CALCULATE(SELECTEDMEASURE(),'_Scenario'[Scenario] = \"LY\")",
                ")"
              ],
              "ordinal": 15
            },
            {
              "name": "vs LLY",
              "expression": [
                "IF ",
                "(",
                "    SELECTEDMEASURE() = BLANK() || ",
                "    CALCULATE(SELECTEDMEASURE(),'_Scenario'[Scenario] = \"LLY\") = BLANK(),",
                "        BLANK(),",
                "        SELECTEDMEASURE() - CALCULATE(SELECTEDMEASURE(),'_Scenario'[Scenario] = \"LLY\")",
                ")"
              ],
              "ordinal": 18
            },
            {
              "name": "vs LY %",
              "expression": [
                "DIVIDE(CALCULATE(SELECTEDMEASURE(),'_Scenario'[Scenario] = \"vs LY\"),",
                "abs(CALCULATE(SELECTEDMEASURE(),'_Scenario'[Scenario] = \"LY\")))"
              ],
              "ordinal": 16,
              "formatStringDefinition": {
                "expression": "\"0.0%\""
              }
            },
            {
              "name": "vs LLY %",
              "expression": [
                "DIVIDE(CALCULATE(SELECTEDMEASURE(),'_Scenario'[Scenario] = \"vs LLY\"),",
                "abs(CALCULATE(SELECTEDMEASURE(),'_Scenario'[Scenario] = \"LLY\")))",
                ""
              ],
              "ordinal": 19,
              "formatStringDefinition": {
                "expression": [
                  "\"0.0%\"",
                  ""
                ]
              }
            },
            {
              "name": "LME",
              "expression": [
                "VAR CalendarIsFiltered =",
                "    ISFILTERED ( 'calendar' )",
                "VAR MaxDate =",
                "    LOOKUPVALUE (",
                "        'Calendar'[PreviousMonthEnding],",
                "        'Calendar'[Day Date INT], [LastDateWithData]",
                "    )",
                "RETURN",
                "    IF (",
                "        CalendarIsFiltered && [ShowValueForDates],",
                "        CALCULATE (",
                "            SELECTEDMEASURE(),",
                "            FILTER (",
                "                ALL ( 'Calendar' ),",
                "                CONTAINS (",
                "                    VALUES ( 'Calendar'[PreviousMonthEnding] ),",
                "                    'Calendar'[PreviousMonthEnding], 'Calendar'[Day Date]",
                "                )",
                "            )",
                "        ),",
                "        CALCULATE ( SELECTEDMEASURE() , 'Calendar'[Day Date] = MaxDate )",
                "    )",
                ""
              ],
              "ordinal": 5
            },
            {
              "name": "LWE",
              "expression": [
                "VAR CalendarIsFiltered =",
                "    ISFILTERED ( 'calendar' )",
                "VAR MaxDate =",
                "    LOOKUPVALUE (",
                "        'Calendar'[PreviousWeekEnding],",
                "        'Calendar'[Day Date INT], [LastDateWithData]",
                "    )",
                "RETURN",
                "    IF (",
                "        CalendarIsFiltered && [ShowValueForDates],",
                "        CALCULATE (",
                "            SELECTEDMEASURE(),",
                "            FILTER (",
                "                ALL ( 'Calendar' ),",
                "                CONTAINS (",
                "                    VALUES ( 'Calendar'[PreviousWeekEnding] ),",
                "                    'Calendar'[PreviousWeekEnding], 'Calendar'[Day Date]",
                "                )",
                "            )",
                "        ),",
                "        CALCULATE ( SELECTEDMEASURE() , 'Calendar'[Day Date] = MaxDate )",
                "    )",
                ""
              ],
              "ordinal": 2
            },
            {
              "name": "LQE",
              "expression": [
                "VAR CalendarIsFiltered =",
                "    ISFILTERED ( 'calendar' )",
                "VAR MaxDate =",
                "    LOOKUPVALUE (",
                "        'Calendar'[PreviousQtrEnding],",
                "        'Calendar'[Day Date INT], [LastDateWithData]",
                "    )",
                "RETURN",
                "    IF (",
                "        CalendarIsFiltered && [ShowValueForDates],",
                "        CALCULATE (",
                "            SELECTEDMEASURE(),",
                "            FILTER (",
                "                ALL ( 'Calendar' ),",
                "                CONTAINS (",
                "                    VALUES ( 'Calendar'[PreviousQtrEnding] ),",
                "                    'Calendar'[PreviousQtrEnding], 'Calendar'[Day Date]",
                "                )",
                "            )",
                "        ),",
                "        CALCULATE ( SELECTEDMEASURE() , 'Calendar'[Day Date] = MaxDate )",
                "    )",
                ""
              ],
              "ordinal": 8
            },
            {
              "name": "vs LME",
              "expression": [
                "IF ",
                "(",
                "    SELECTEDMEASURE() = BLANK() || ",
                "    CALCULATE(SELECTEDMEASURE(),'_Scenario'[Scenario] = \"LME\") = BLANK(),",
                "        BLANK(),",
                "        SELECTEDMEASURE() - CALCULATE(SELECTEDMEASURE(),'_Scenario'[Scenario] = \"LME\")",
                ")"
              ],
              "ordinal": 6
            },
            {
              "name": "vs LWE",
              "expression": [
                "IF ",
                "(",
                "    SELECTEDMEASURE() = BLANK() || ",
                "    CALCULATE(SELECTEDMEASURE(),'_Scenario'[Scenario] = \"LWE\") = BLANK(),",
                "        BLANK(),",
                "        SELECTEDMEASURE() - CALCULATE(SELECTEDMEASURE(),'_Scenario'[Scenario] = \"LWE\")",
                ")"
              ],
              "ordinal": 3
            },
            {
              "name": "vs LQE",
              "expression": [
                "IF ",
                "(",
                "    SELECTEDMEASURE() = BLANK() || ",
                "    CALCULATE(SELECTEDMEASURE(),'_Scenario'[Scenario] = \"LQE\") = BLANK(),",
                "        BLANK(),",
                "        SELECTEDMEASURE() - CALCULATE(SELECTEDMEASURE(),'_Scenario'[Scenario] = \"LQE\")",
                ")"
              ],
              "ordinal": 9
            },
            {
              "name": "vs LME %",
              "expression": [
                "DIVIDE(CALCULATE(SELECTEDMEASURE(),'_Scenario'[Scenario] = \"vs LME\"),",
                "abs(CALCULATE(SELECTEDMEASURE(),'_Scenario'[Scenario] = \"LME\")))"
              ],
              "ordinal": 7,
              "formatStringDefinition": {
                "expression": "\"0.0%\""
              }
            },
            {
              "name": "vs LWE %",
              "expression": [
                "DIVIDE(CALCULATE(SELECTEDMEASURE(),'_Scenario'[Scenario] = \"vs LWE\"),",
                "abs(CALCULATE(SELECTEDMEASURE(),'_Scenario'[Scenario] = \"LWE\")))"
              ],
              "ordinal": 4,
              "formatStringDefinition": {
                "expression": "\"0.0%\""
              }
            },
            {
              "name": "vs LQE %",
              "expression": [
                "DIVIDE(CALCULATE(SELECTEDMEASURE(),'_Scenario'[Scenario] = \"vs LQE\"),",
                "abs(CALCULATE(SELECTEDMEASURE(),'_Scenario'[Scenario] = \"LQE\")))"
              ],
              "ordinal": 10,
              "formatStringDefinition": {
                "expression": "\"0.0%\""
              }
            },
            {
              "name": "LYE",
              "expression": [
                "VAR CalendarIsFiltered =",
                "    ISFILTERED ( 'calendar' )",
                "VAR MaxDate =",
                "    LOOKUPVALUE (",
                "        'Calendar'[PreviousYearEnding],",
                "        'Calendar'[Day Date INT], [LastDateWithData]",
                "    )",
                "RETURN",
                "    IF (",
                "        CalendarIsFiltered && [ShowValueForDates],",
                "        CALCULATE (",
                "            SELECTEDMEASURE(),",
                "            FILTER (",
                "                ALL ( 'Calendar' ),",
                "                CONTAINS (",
                "                    VALUES ( 'Calendar'[PreviousYearEnding] ),",
                "                    'Calendar'[PreviousYearEnding], 'Calendar'[Day Date]",
                "                )",
                "            )",
                "        ),",
                "        CALCULATE ( SELECTEDMEASURE() , 'Calendar'[Day Date] = MaxDate )",
                "    )",
                ""
              ],
              "ordinal": 11
            },
            {
              "name": "vs LYE",
              "expression": [
                "IF ",
                "(",
                "    SELECTEDMEASURE() = BLANK() ||",
                "    CALCULATE(SELECTEDMEASURE(), '_Scenario'[Scenario] = \"LYE\") = BLANK(),",
                "        BLANK(),",
                "        SELECTEDMEASURE() - CALCULATE(SELECTEDMEASURE(),'_Scenario'[Scenario] = \"LYE\")",
                ")"
              ],
              "ordinal": 12
            },
            {
              "name": "vs LYE %",
              "expression": [
                "DIVIDE(CALCULATE(SELECTEDMEASURE(),'_Scenario'[Scenario] = \"vs LYE\"),",
                "abs(CALCULATE(SELECTEDMEASURE(),'_Scenario'[Scenario] = \"LYE\")))"
              ],
              "ordinal": 13,
              "formatStringDefinition": {
                "expression": "\"0.0%\""
              }
            },
            {
              "name": "Plan",
              "expression": [
                "SWITCH ",
                "(",
                "\tSELECTEDMEASURENAME(),",
                "\t\"SKU Count\", [2023 SKU Count Target],",
                "    \"Global SKU Count\", [2023 SKU Count Target],",
                "    \"Finished Good Dollars Turns (2pt)\", [2024 Turns Target],",
                "\t\"Finished Good Dollars\", [Finished Good Dollars Plan],",
                "\t\"Finished Good Units\", [Finished Good Units Plan],",
                "\t\"Finished Good Packages\", [Finished Good Packages Plan],",
                "    \"Finished Good Dollars (Millions)\", [Finished Good Dollars Plan (Millions)],",
                "    \"Finished Good Packages (Millions)\", [Finished Good Packages Plan (Millions)],",
                "    \"Finished Good Dollars (Millions)\", [Finished Good Units Plan (Millions)],",
                "\tBLANK()",
                ")"
              ],
              "ordinal": 20
            },
            {
              "name": "vs Plan",
              "expression": [
                "IF ",
                "(",
                "    SELECTEDMEASURE() = BLANK() || ",
                "    CALCULATE(SELECTEDMEASURE(),'_Scenario'[Scenario] = \"Plan\") = BLANK(),",
                "        BLANK(),",
                "    SELECTEDMEASURE() - CALCULATE(SELECTEDMEASURE(),'_Scenario'[Scenario] = \"Plan\")",
                ")"
              ],
              "ordinal": 21
            },
            {
              "name": "vs Plan %",
              "expression": [
                "DIVIDE(CALCULATE(SELECTEDMEASURE(),'_Scenario'[Scenario] = \"vs Plan\"),",
                "abs(CALCULATE(SELECTEDMEASURE(),'_Scenario'[Scenario] = \"Plan\")))"
              ],
              "ordinal": 22,
              "formatStringDefinition": {
                "expression": [
                  "\"0.0%\"",
                  ""
                ]
              }
            }
          ]
        },
        "columns": [
          {
            "name": "Scenario",
            "dataType": "string",
            "sourceColumn": "Name",
            "sortByColumn": "Ordinal"
          },
          {
            "name": "Ordinal",
            "dataType": "int64",
            "isHidden": true,
            "sourceColumn": "Ordinal"
          }
        ],
        "partitions": [
          {
            "name": "CalculationGroup 1",
            "mode": "import",
            "source": {
              "type": "calculationGroup"
            }
          }
        ]
      },
      {
        "name": "EDM Reference",
        "isHidden": true,
        "columns": [
          {
            "name": "Reference_key",
            "dataType": "string",
            "sourceColumn": "Reference_key"
          },
          {
            "name": "Reference_sub_key_1",
            "dataType": "string",
            "sourceColumn": "Reference_sub_key_1"
          },
          {
            "name": "Reference_sub_key_2",
            "dataType": "string",
            "sourceColumn": "Reference_sub_key_2"
          },
          {
            "name": "Reference_subkey_seq",
            "dataType": "double",
            "sourceColumn": "Reference_subkey_seq"
          },
          {
            "name": "Desc_1",
            "dataType": "string",
            "sourceColumn": "Desc_1"
          },
          {
            "name": "Desc_2",
            "dataType": "string",
            "sourceColumn": "Desc_2"
          },
          {
            "name": "Desc_3",
            "dataType": "string",
            "sourceColumn": "Desc_3"
          },
          {
            "name": "Flag_1",
            "dataType": "string",
            "sourceColumn": "Flag_1"
          },
          {
            "name": "Flag_2",
            "dataType": "string",
            "sourceColumn": "Flag_2"
          },
          {
            "name": "Flag_3",
            "dataType": "string",
            "sourceColumn": "Flag_3"
          },
          {
            "name": "Flag_4",
            "dataType": "string",
            "sourceColumn": "Flag_4"
          },
          {
            "name": "Flag_5",
            "dataType": "string",
            "sourceColumn": "Flag_5"
          },
          {
            "name": "userid",
            "dataType": "string",
            "sourceColumn": "userid"
          },
          {
            "name": "Create_timestamp",
            "dataType": "dateTime",
            "sourceColumn": "Create_timestamp"
          },
          {
            "name": "Update_userid",
            "dataType": "string",
            "sourceColumn": "Update_userid"
          },
          {
            "name": "Update_timestamp",
            "dataType": "dateTime",
            "sourceColumn": "Update_timestamp"
          },
          {
            "name": "ID",
            "dataType": "int64",
            "sourceColumn": "ID"
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = #\"SQL Server EDM\",",
                "    dbo_Reference = Source{[Schema=\"dbo\",Item=\"Reference\"]}[Data],",
                "    #\"Filtered Rows\" = Table.SelectRows(dbo_Reference, each ([Reference_key] = \"Inventory Current OP\"))",
                "in",
                "    #\"Filtered Rows\""
              ]
            }
          }
        ]
      },
      {
        "name": "SCA Statistics",
        "isHidden": true,
        "columns": [
          {
            "name": "SCAGlobal",
            "dataType": "string",
            "sourceColumn": "SCAGlobal"
          },
          {
            "name": "SCAGlobal_Bus_Id",
            "dataType": "string",
            "sourceColumn": "SCAGlobal_Bus_Id"
          },
          {
            "name": "Business_Segment_Hierarchy_id",
            "dataType": "int64",
            "sourceColumn": "Business_Segment_Hierarchy_id"
          },
          {
            "name": "RawNetSalesDollars",
            "dataType": "double",
            "sourceColumn": "RawNetSalesDollars"
          },
          {
            "name": "NetSalesDollars",
            "dataType": "double",
            "sourceColumn": "NetSalesDollars"
          },
          {
            "name": "NetSalesCumulative",
            "dataType": "double",
            "sourceColumn": "NetSalesCumulative"
          },
          {
            "name": "NetSalesTotal",
            "dataType": "double",
            "sourceColumn": "NetSalesTotal"
          },
          {
            "name": "NetSalesCumulativePercentage",
            "dataType": "double",
            "sourceColumn": "NetSalesCumulativePercentage"
          },
          {
            "name": "NetSalesRank",
            "dataType": "int64",
            "sourceColumn": "NetSalesRank"
          },
          {
            "name": "RawNetGrossMarginDollars",
            "dataType": "double",
            "sourceColumn": "RawNetGrossMarginDollars"
          },
          {
            "name": "NetGrossMarginDollars",
            "dataType": "double",
            "sourceColumn": "NetGrossMarginDollars"
          },
          {
            "name": "NetGrossMarginCumulative",
            "dataType": "double",
            "sourceColumn": "NetGrossMarginCumulative"
          },
          {
            "name": "NetGrossMarginTotal",
            "dataType": "double",
            "sourceColumn": "NetGrossMarginTotal"
          },
          {
            "name": "NetGrossMarginCumulativePercentage",
            "dataType": "double",
            "sourceColumn": "NetGrossMarginCumulativePercentage"
          },
          {
            "name": "NetGrossMarginRank",
            "dataType": "int64",
            "sourceColumn": "NetGrossMarginRank"
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = Value.NativeQuery(#\"SQL Server HBIDW\", \"",
                "",
                ";With as_of_date_range As (",
                "\tSelect\td.AS_of_Date_INT",
                "\tFrom",
                "\t\t\t(",
                "\t\t\t\tSelect",
                "\t\t\t\t\t  w.AS_of_Date_INT",
                "\t\t\t\t\t, Row_Number() Over (Order By AS_of_Date_INT Desc) As w",
                "\t\t\t\tFrom",
                "\t\t\t\t\tHBIDW.dbo.Dim_Week w",
                "\t\t\t\tWhere",
                "\t\t\t\t\tw.AS_of_Date_INT <=",
                "\t\t\t\t(",
                "\t\t\t\t\tSelect\t\tMin(AS_of_Date_INT)",
                "\t\t\t\t\t\tFrom",
                "\t\t\t\t\t\t\t\tHBIDW.dbo.Dim_Week",
                "\t\t\t\t\t\tWhere",
                "\t\t\t\t\t\t\t\tCurr_Wk_Ind = 'Y'",
                "\t\t\t\t)",
                "\t\t\t) d",
                "\tWhere",
                "\t\t\tw <= 52",
                ")",
                "",
                "\t, scaGlobal AS (",
                "\tSELECT",
                "\t\t  product.Item_id",
                "\t\t, CASE",
                "\t\t\tWHEN product.Sbu_Desc = 'Socks' THEN CONCAT(product.Selling_Style, '_', product.UPC_Code)",
                "\t\t\tWHEN product.Sbu_Desc IN ( 'HA Apparel', 'HA Sheridan', 'HA Bras N Things' ) THEN CONCAT(product.Division_Desc, product.Style_Num, '_', product.Color_Code, '_', product.Attribution_Code) --HAA can have the same EAN between business units, so we use division desc to mimic how SKU count takes a count for each EAN in each BU; thus we only strip out size",
                "\t\t\tWHEN product.Sbu_Desc = 'Champion Europe' THEN CONCAT(product.Representative_Style_Num, '_', product.Color_Code)\t\t\t\t\t\t\t\t\t\t\t--rep style matches the style in the S3 SKU, which is the field used in SKU Count",
                "\t\t\tELSE CONCAT(product.Style_Num, '_', product.Color_Code, '_', product.Attribution_Code)",
                "\t\tEND AS SCAGlobal",
                "\tFROM",
                "\t\tdbo.product_view product",
                ")",
                "\t, SCADivisionSales AS (",
                "\tSELECT",
                "\t\t\t\t  sca.SCAGlobal",
                "\t\t\t\t, CASE\t",
                "\t\t\t\t\t\tWHEN NOT profitcenter.profit_center IS NULL THEN profitcenter.business_seg_hierarchy_id",
                "\t\t\t\t\t\tELSE ISNULL(product.Business_Segment_Hierarchy_id, -2)",
                "\t\t\t\t\tEND\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS Business_Segment_Hierarchy_id",
                "",
                "\t\t\t\t, SUM(\tCASE",
                "\t\t\t\t\t\t\tWHEN sales.Dim_Measure_ID IN (\t",
                "\t\t\t\t\t\t\t\t\t\t\t\t\t\t/*gross gross sales*/\t\t\t 22 ",
                "\t\t\t\t\t\t\t\t\t\t\t\t\t\t/*gross sales*/\t\t\t\t\t,2210 ,2220 ,2230 ,2240 ,2250",
                "\t\t\t\t\t\t\t\t\t\t\t\t\t\t/*adj to gross sales*/\t\t\t,23 ,24 ,25 ,26 ,2250 ,2310",
                "\t\t\t\t\t\t\t\t\t\t\t\t\t\t--not included /*sales incentives*/\t\t\t,27 ,2713 ,2714 ,2801 ,2813 ,2814 ,2815 ,29 ,2901 ,30 ,3012 ,31 ,3112 ,3114 ,3116 ,3132 ,32 ,3201\t",
                "\t\t\t\t\t\t\t\t\t\t\t\t\t\t--not included /*royalty income*/\t\t\t,34 ",
                "\t\t\t\t\t\t\t\t\t\t\t\t\t\t--not included /*intercompany net sales*/\t,35 ",
                "\t\t\t\t\t\t\t\t\t\t\t\t\t\t) THEN sales.dollars --Net Sales less royalty and intercompany",
                "\t\t\t\t\t\tEND",
                "\t\t\t\t\t)\t\t\t\t\t\t\t\t\t\t\tAS NetSalesDollars    /*actually preincentive sales dollars*/",
                "\t\t\t\t, SUM(\tCASE",
                "\t\t\t\t\t\t\tWHEN sales.Dim_Measure_ID IN (\t",
                "\t\t\t\t\t\t\t\t\t\t\t\t\t\t/*gross gross sales*/\t\t\t 22 ",
                "\t\t\t\t\t\t\t\t\t\t\t\t\t\t/*gross sales*/\t\t\t\t\t,2210 ,2220 ,2230 ,2240 ,2250",
                "\t\t\t\t\t\t\t\t\t\t\t\t\t\t/*adj to gross sales*/\t\t\t,23 ,24 ,25 ,26 ,2250 ,2310",
                "\t\t\t\t\t\t\t\t\t\t\t\t\t\t--not included /*sales incentives*/\t\t\t,27 ,2713 ,2714 ,2801 ,2813 ,2814 ,2815 ,29 ,2901 ,30 ,3012 ,31 ,3112 ,3114 ,3116 ,3132 ,32 ,3201\t",
                "\t\t\t\t\t\t\t\t\t\t\t\t\t\t--not included /*royalty income*/\t\t\t,34 ",
                "\t\t\t\t\t\t\t\t\t\t\t\t\t\t--not included /*intercompany net sales*/\t,35 ",
                "\t\t\t\t\t\t\t\t\t\t\t\t\t",
                "\t\t\t\t\t\t\t\t\t\t\t\t\t) THEN sales.dollars --Net Sales less royalty and intercompany  /*actually preincentive*/",
                "",
                "\t\t\t\t\t\t\tWHEN sales.Dim_Measure_ID IN (\t",
                "\t\t\t\t\t\t\t\t\t\t\t\t\t\t/*OS COGS*/\t\t\t\t\t\t 38 ",
                "\t\t\t\t\t\t\t\t\t\t\t\t\t\t/*Adj to OS COGS*/\t\t\t\t,40 ,41 ,47",
                "\t\t\t\t\t\t\t\t\t\t\t\t\t\t/*adj to gross sales*/\t\t\t,23 ,24 ,25 ,26 ,2250 ,2310",
                "\t\t\t\t\t\t\t\t\t\t\t\t\t\t --not included/*sales incentives cost*/\t\t,45",
                "\t\t\t\t\t\t\t\t\t\t\t\t\t\t--not included /*royalty expense*/\t\t,48",
                "\t\t\t\t\t\t\t\t\t\t\t\t\t\t--not included /*intercompany SCOGS*/\t,39",
                "\t\t\t\t\t\t\t\t\t\t\t\t\t\t--not included /*Reserve*/\t\t\t\t,42 ",
                "\t\t\t\t\t\t\t\t\t\t\t\t\t",
                "\t\t\t\t\t\t\t\t\t\t\t\t\t) THEN (sales.dollars) * -1 --SCOGS less royalty and intercompany  /*actually preincentive*/",
                "\t\t\t\t\t\tEND",
                "\t\t\t\t\t)\t\t\t\t\t\t\t\t\t\t\tAS NetGrossMarginDollars   /*actually preincentive margin dollars*/",
                "",
                "",
                "\tFROM",
                "\t\t\t\t\t\t\tdbo.fact_sales_sku\t\t\t\t\t\t\tsales",
                "\t\tJOIN\t\t\t\tscaGlobal\t\t\t\t\t\t\t\t\tsca\t\t\t\t\t\tON sca.Item_id\t\t\t\t\t\t\t\t= sales.Dim_item_id",
                "\t\tJOIN\t\t\t\tEDM.dbo.Business_Seg_Hierarchy_Samba_DIV_vw business\t\t\t\tON business.business_seg_hierarchy_id\t\t= sales.Business_Segment_Hierarchy_id",
                "\t\tLEFT JOIN\t\t\tdbo.product_view\t\t\t\t\t\t\tproduct WITH (NOEXPAND)\tON sales.Dim_item_id\t\t\t\t\t\t= product.Dim_Item_id",
                "\t\tLEFT JOIN\t\t\tEDM.dbo.profit_center\t\t\t\t\t\tprofitcenter\t\t\tON CAST(sales.Profit_Center AS INT)\t\t\t= profitcenter.profit_center",
                "\t\tLEFT JOIN",
                "\t\t\t\t(",
                "\t\t\t\t\tSELECT\t*",
                "\t\t\t\t\tFROM",
                "\t\t\t\t\t\t\tEDM.dbo.Peg_Rate",
                "\t\t\t\t\tWHERE",
                "\t\t\t\t\t\t\tYear =",
                "\t\t\t\t\t(",
                "\t\t\t\t\t\tSELECT\t\tMIN(Fiscal_Yr)FROM HBIDW.dbo.Dim_Week WHERE Curr_Wk_Ind = 'Y'",
                "\t\t\t\t\t)",
                "\t\t\t\t)\t\t\t\t\t\t\tcurrency\tON sales.Currency\t\t\t\t= currency.Currency",
                "\tWHERE",
                "\t\tEXISTS\t( SELECT NULL FROM as_of_date_range rng WHERE rng.AS_of_Date_INT = sales.As_of_Date_INT\t)",
                "\t\tAND sales.Dim_Measure_ID IN ( 22 ,2210 ,2220 ,2230 ,2240 ,2250 ,23 ,24 ,25 ,26 ,2250 ,2310 ,27 ,2713 ,2714 ,2801 ,2813 ,2814 ,2815 ,29 ,2901 ,30 ,3012 ,31 ,3112 ,3114 ,3116 ,3132 ,32 ,3201 ,38 ,40 ,41 ,47 ,23 ,24 ,25 ,26 ,2250 ,2310 ,45 )",
                "",
                "",
                "\tGROUP BY",
                "\t\t\t\t  sca.SCAGlobal",
                "\t\t\t\t, CASE",
                "\t\t\t\t\t\tWHEN NOT profitcenter.profit_center IS NULL THEN profitcenter.business_seg_hierarchy_id",
                "\t\t\t\t\t\tELSE ISNULL(product.Business_Segment_Hierarchy_id, -2)",
                "\t\t\t\t  END",
                "",
                ")",
                "",
                "\t, SCADivisionSalesNoNegatives AS (",
                "\tSELECT",
                "\t\t  sca.NetSalesDollars\tAS RawNetSalesDollars",
                "\t\t, sca.NetGrossMarginDollars AS RawNetGrossMarginDollars",
                "\t\t, sca.SCAGlobal",
                "\t\t, sca.Business_Segment_Hierarchy_id",
                "\t\t, CASE",
                "\t\t\tWHEN ISNULL(sca.NetSalesDollars, 0) < 0 THEN 0",
                "\t\t\tELSE sca.NetSalesDollars",
                "\t\tEND\t\t\t\tAS NetSalesDollars",
                "\t\t, CASE",
                "\t\t\tWHEN ISNULL(sca.NetGrossMarginDollars, 0) < 0 THEN 0",
                "\t\t\tELSE sca.NetGrossMarginDollars",
                "\t\tEND\t\t\t\tAS NetGrossMarginDollars",
                "",
                "\tFROM",
                "\t\tSCADivisionSales sca",
                ")",
                "",
                "\t",
                "SELECT",
                "\t  CONCAT(final.SCAGlobal , '_', final.Business_Segment_Hierarchy_id) AS SCAGlobal_Bus_Id",
                "\t, final.SCAGlobal",
                "\t, final.Business_Segment_Hierarchy_id",
                "\t",
                "\t/*Net Sales*/",
                "\t, final.RawNetSalesDollars",
                "\t, final.NetSalesDollars",
                "\t, Sum(final.NetSalesDollars) Over (Partition By final.Business_Segment_Hierarchy_id Order By final.NetSalesDollars Desc )\t\t\t\tAs NetSalesCumulative",
                "\t, Sum(final.RawNetSalesDollars) Over (Partition By final.Business_Segment_Hierarchy_id)\t\t\t\t\t\t\t\t\t\t\t\t\tAs NetSalesTotal",
                "\t, Case",
                "\t\tWhen Sum(final.NetSalesDollars) = 0 Then 1 --set percentile to 100 for negative sales/margin",
                "\t\tWhen Sum(final.NetSalesDollars) Over (Partition By final.Business_Segment_Hierarchy_id) = 0 Then 1 --set percentile to 100 for businesses with negative sales/margin",
                "\t\tElse Sum(final.NetSalesDollars) Over (Partition By final.Business_Segment_Hierarchy_id Order By final.NetSalesDollars Desc) / Sum(final.RawNetSalesDollars) Over (Partition By final.Business_Segment_Hierarchy_id) --change denominator to raw net sales -Nathan on 4/18/22",
                "\tEnd\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAs NetSalesCumulativePercentage",
                "\t, Rank() Over (Partition By final.Business_Segment_Hierarchy_id Order By final.NetSalesDollars Desc)\t\t\t\t\t\t\t\t\tAs NetSalesRank",
                "",
                "\t/*Net Gross Margin*/",
                "\t, final.RawNetGrossMarginDollars",
                "\t, final.NetGrossMarginDollars",
                "\t, Sum(final.NetGrossMarginDollars) Over (Partition By final.Business_Segment_Hierarchy_id Order By final.NetGrossMarginDollars Desc )\tAs NetGrossMarginCumulative",
                "\t, Sum(final.RawNetGrossMarginDollars) Over (Partition By final.Business_Segment_Hierarchy_id)\t\t\t\t\t\t\t\t\t\t\tAs NetGrossMarginTotal",
                "\t, Case",
                "\t\tWhen Sum(final.NetGrossMarginDollars) = 0 Then 1 --set percentile to 100 for negative sales/margin",
                "\t\tWhen Sum(final.NetGrossMarginDollars) Over (Partition By final.Business_Segment_Hierarchy_id) = 0 Then 1 --set percentile to 100 for businesses with negative sales/margin",
                "\t\tElse Sum(final.NetGrossMarginDollars) Over (Partition By final.Business_Segment_Hierarchy_id Order By final.NetGrossMarginDollars Desc) / Sum(final.RawNetGrossMarginDollars) Over (Partition By final.Business_Segment_Hierarchy_id) --change denominator to raw net sales -Nathan on 4/18/22",
                "\tEnd\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAs NetGrossMarginCumulativePercentage",
                "\t, Rank() Over (Partition By final.Business_Segment_Hierarchy_id Order By final.NetGrossMarginDollars Desc)\t\t\t\t\t\t\t\tAs NetGrossMarginRank",
                "",
                "From",
                "\tSCADivisionSalesNoNegatives final",
                "",
                "Group By",
                "\t  final.SCAGlobal",
                "\t, final.Business_Segment_Hierarchy_id",
                "\t, final.RawNetSalesDollars",
                "\t, final.NetSalesDollars",
                "\t, final.RawNetGrossMarginDollars",
                "\t, final.NetGrossMarginDollars",
                "",
                "",
                "",
                "\t/*Deciles are calculated using trailing 12 months Preincentive Sales Dollars*/",
                "",
                "\")",
                "in",
                "    Source"
              ]
            }
          }
        ]
      },
      {
        "name": "SKU Dates",
        "isHidden": true,
        "columns": [
          {
            "name": "Dim_Item_id",
            "dataType": "double",
            "isUnique": true,
            "sourceColumn": "Dim_Item_id"
          },
          {
            "name": "Item First Ship Date",
            "dataType": "dateTime",
            "sourceColumn": "Item First Ship Date"
          },
          {
            "name": "Item Last Ship Date",
            "dataType": "dateTime",
            "sourceColumn": "Item Last Ship Date"
          },
          {
            "name": "Item First Inventory Date",
            "dataType": "dateTime",
            "sourceColumn": "Item First Inventory Date"
          },
          {
            "name": "Item Last Inventory Date",
            "dataType": "dateTime",
            "sourceColumn": "Item Last Inventory Date"
          },
          {
            "name": "Item SKU Inventory Duration",
            "dataType": "int64",
            "sourceColumn": "Item SKU Inventory Duration"
          },
          {
            "name": "Item SKU Sales Duration",
            "dataType": "int64",
            "sourceColumn": "Item SKU Sales Duration"
          },
          {
            "name": "Newness",
            "dataType": "string",
            "sourceColumn": "Newness"
          },
          {
            "name": "SKUGlobal",
            "dataType": "string",
            "sourceColumn": "SKUGlobal"
          },
          {
            "name": "SKU Global First Ship Date",
            "dataType": "dateTime",
            "sourceColumn": "SKU Global First Ship Date"
          },
          {
            "name": "SKU Global Last Ship Date",
            "dataType": "dateTime",
            "sourceColumn": "SKU Global Last Ship Date"
          },
          {
            "name": "SKU Global First Inventory Date",
            "dataType": "dateTime",
            "sourceColumn": "SKU Global First Inventory Date"
          },
          {
            "name": "SKU Global Last Inventory Date",
            "dataType": "dateTime",
            "sourceColumn": "SKU Global Last Inventory Date"
          },
          {
            "name": "SKU Sales Duration",
            "dataType": "int64",
            "sourceColumn": "SKU Sales Duration"
          },
          {
            "name": "SKU Inventory Duration",
            "dataType": "int64",
            "sourceColumn": "SKU Inventory Duration"
          },
          {
            "name": "SCAGlobal",
            "dataType": "string",
            "sourceColumn": "SCAGlobal"
          },
          {
            "name": "SCA Global First Ship Date",
            "dataType": "dateTime",
            "sourceColumn": "SCA Global First Ship Date"
          },
          {
            "name": "SCA Global Last Ship Date",
            "dataType": "dateTime",
            "sourceColumn": "SCA Global Last Ship Date"
          },
          {
            "name": "SCA Global First Inventory Date",
            "dataType": "dateTime",
            "sourceColumn": "SCA Global First Inventory Date"
          },
          {
            "name": "SCA Global Last Inventory Date",
            "dataType": "dateTime",
            "sourceColumn": "SCA Global Last Inventory Date"
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = Value.NativeQuery(#\"SQL Server HBIDW\", \";With ",
                "\tcte_shipDates As (",
                "\t\tSELECT",
                "\t\t\t\t  sku.Dim_item_id",
                "\t\t\t\t, min(sku.As_of_Date_int) As min_As_of_Date_int",
                "\t\t\t\t, max(sku.As_of_Date_int) As max_As_of_Date_int",
                "\t\t\t\t, Convert(Date, Cast(Min(sku.As_of_Date_int) As NVarchar(11)), 112)\tAs min_As_of_Date",
                "\t\t\t\t, Convert(Date, Cast(max(sku.As_of_Date_int) As NVarchar(11)), 112)\tAs max_As_of_Date",
                "\t\t\tFrom ",
                "\t\t\t\tdbo.fact_sales_sku sku",
                "\t\t\tWhere ",
                "\t\t\t\t\tsku.dim_measure_id\tIN\t(22,2210,2220,2230,2240,2250)",
                "\t\t\t\tAnd sku.units\t\t\t>\t0",
                "\t\tGROUP BY ",
                "\t\t\tsku.Dim_item_id",
                "\t)",
                "\t, cte_inventoryDates As (",
                "\t\tSELECT",
                "\t\t\t\t  inv.Dim_item_id",
                "\t\t\t\t, Min(inv.As_of_Date_int) As min_As_of_Date_int",
                "\t\t\t\t, max(inv.As_of_Date_int) As max_As_of_Date_int",
                "\t\t\t\t, Convert(Date, Cast(Min(inv.As_of_Date_int) As NVarchar(11)), 112)\tAs min_As_of_Date",
                "\t\t\t\t, Convert(Date, Cast(max(inv.As_of_Date_int) As NVarchar(11)), 112)\tAs max_As_of_Date",
                "",
                "\t\t\tFrom ",
                "\t\t\t\tdbo.Fact_Inventory inv",
                "\t\t\tWhere ",
                "\t\t\t\t\tinv.dim_measure_id\tIN\t(21100, 21200, 21300, 21400)",
                "\t\t\t\tAnd inv.units\t\t\t>\t0",
                "\t\tGROUP BY ",
                "\t\t\tinv.Dim_item_id",
                "\t)",
                "\t, cte_data AS (",
                "",
                "\t\tSelect",
                "\t\t\t\t  product.Dim_Item_id",
                "\t\t",
                "\t\t\t\t, ship.min_As_of_Date\tAs [First Ship Date]",
                "\t\t\t\t, ship.max_As_of_Date\tAs [Last Ship Date]",
                "",
                "\t\t\t\t, inv.min_As_of_Date\tAs [First Inventory Date]",
                "\t\t\t\t, inv.max_As_of_Date\tAs [Last Inventory Date] ",
                "",
                "\t\t\t\t, DateDiff(Day, ship.min_As_of_Date\t, ship.max_As_of_Date\t)\t\t\t\t\t\tAs [SKU Sales Duration]",
                "\t\t\t\t, DateDiff(Day, inv.min_As_of_Date\t, inv.max_As_of_Date\t)\t\t\t\t\t\tAs [SKU Inventory Duration]",
                "",
                "\t\t\t\t, Iif( DateDiff(Day, inv.min_As_of_Date, GetDate()) > 181,'New', 'Established')\t\tAs Newness",
                "",
                "\t\t\t \t, CASE ",
                "\t\t\t\t\tWHEN product.Sbu_Desc = 'Socks' THEN CONCAT(product.Selling_Style , '_' , product.UPC_Code)",
                "\t\t\t\t\tWHEN product.Sbu_Desc IN ('HA Apparel', 'HA Sheridan', 'HA Bras N Things') THEN CONCAT(product.Division_Desc, product.Style_Num , '_' , product.Color_Code , '_' , product.Attribution_Code ) --HAA can have the same EAN between business units, so we use division desc to mimic how SKU count takes a count for each EAN in each BU; thus we only strip out size",
                "\t\t\t\t\tWHEN product.Sbu_Desc = 'Champion Europe' THEN CONCAT(product.Representative_Style_Num, '_', product.Color_Code) --rep style matches the style in the S3 SKU, which is the field used in SKU Count",
                "\t\t\t\t\tELSE CONCAT(product.Style_Num , '_' , product.Color_Code , '_' , product.Attribution_Code )",
                "\t\t\t\t\tEND AS SCAGlobal",
                "",
                "\t\t\t\t, CASE",
                "\t\t\t\t\twhen Sbu_Desc in ('Socks', 'HA Apparel', 'HA Sheridan', 'HA Bras N Things') then product.SKU",
                "\t\t\t\t\twhen Sbu_Desc = 'Alternative Apparel' then product.Style_Num + '_' + product.Color_Code + '_' + Size_Code + '_'",
                "\t\t\t\t\twhen Sbu_Desc = 'Champion Europe' then product.S3_SKU",
                "\t\t\t\t\tELSE product.SKU_Desc",
                "\t\t\t\t\tend as SKUGlobal",
                "",
                "\t\t\tFROM ",
                "\t\t\t\t\t\t\tdbo.product_view\tproduct",
                "\t\t\t\tLeft Join\tcte_shipDates\t\tship\t\tOn ship.Dim_item_id\t= product.Dim_Item_id",
                "\t\t\t\tLeft Join\tcte_inventoryDates\tinv\t\t\tOn inv.Dim_Item_id\t= product.Dim_Item_id",
                "",
                "\t\t\tWhere ",
                "\t\t\t\t\tExists (Select Null From dbo.Fact_Inventory x Where x.As_of_Date_int>=(20181228) And x.Dim_Item_id = product.Dim_Item_id)",
                "\t\t\t\tor Exists (Select Null From dbo.fact_sales_sku x Where x.As_of_Date_int>=(20181228) And x.Dim_Item_id = product.Dim_Item_id)",
                "\t)",
                "\tSELECT ",
                "\t\t\t  cte_data.Dim_Item_id",
                "\t\t\t, cte_data.[First Ship Date]\t\t\t\tAS [Item First Ship Date]\t",
                "\t\t\t, cte_data.[Last Ship Date]\t\t\t\t\tAS [Item Last Ship Date]",
                "\t\t\t, cte_data.[First Inventory Date]\t\t\tAS [Item First Inventory Date]",
                "\t\t\t, cte_data.[Last Inventory Date]\t\t\tAS [Item Last Inventory Date]",
                "\t\t\t, cte_data.[SKU Inventory Duration]\t\t\tAS [Item SKU Inventory Duration]",
                "\t\t\t, cte_data.[SKU Sales Duration]\t\t\t\tAS [Item SKU Sales Duration]",
                "\t\t\t, cte_data.Newness",
                "\t\t\t, cte_data.SKUGlobal",
                "\t\t\t, cte_data.SCAGlobal",
                "",
                "\t\t\t, MIN(cte_data.[First Ship Date])\t\tOVER (PARTITION BY cte_data.SKUGlobal)\tAS [SKU Global First Ship Date]",
                "\t\t\t, MAX(cte_data.[Last Ship Date])\t\tOVER (PARTITION BY cte_data.SKUGlobal)\tAS [SKU Global Last Ship Date]",
                "\t\t\t, MIN(cte_data.[First Inventory Date])\tOVER (PARTITION BY cte_data.SKUGlobal)\tAS [SKU Global First Inventory Date]",
                "\t\t\t, MAX(cte_data.[Last Inventory Date])\tOVER (PARTITION BY cte_data.SKUGlobal)\tAS [SKU Global Last Inventory Date]",
                "\t\t\t",
                "\t\t\t, MIN(cte_data.[First Ship Date])\t\tOVER (PARTITION BY cte_data.SCAGlobal)\tAS [SCA Global First Ship Date]",
                "\t\t\t, MAX(cte_data.[Last Ship Date])\t\tOVER (PARTITION BY cte_data.SCAGlobal)\tAS [SCA Global Last Ship Date]",
                "\t\t\t, MIN(cte_data.[First Inventory Date])\tOVER (PARTITION BY cte_data.SCAGlobal)\tAS [SCA Global First Inventory Date]",
                "\t\t\t, MAX(cte_data.[Last Inventory Date])\tOVER (PARTITION BY cte_data.SCAGlobal)\tAS [SCA Global Last Inventory Date]",
                "",
                "\t\t\t, DateDiff(Day, MIN(cte_data.[First Ship Date])\t\t\tOVER (PARTITION BY cte_data.SKUGlobal)\t, MAX(cte_data.[Last Ship Date])\t\tOVER (PARTITION BY cte_data.SKUGlobal))\tAs [SKU Sales Duration]",
                "\t\t\t, DateDiff(Day, MIN(cte_data.[First Inventory Date])\tOVER (PARTITION BY cte_data.SKUGlobal)\t, MAX(cte_data.[Last Inventory Date])\tOVER (PARTITION BY cte_data.SKUGlobal)) As [SKU Inventory Duration]",
                "\t\tFROM cte_data",
                "",
                "",
                "\")",
                "in",
                "    Source"
              ]
            }
          }
        ]
      },
      {
        "name": "Reserve Rates",
        "columns": [
          {
            "name": "Dim_Item_id",
            "dataType": "int64",
            "isHidden": true,
            "sourceColumn": "Dim_Item_id"
          },
          {
            "name": "Dim_Facility_id",
            "dataType": "int64",
            "isHidden": true,
            "sourceColumn": "Dim_Facility_id"
          },
          {
            "name": "Business_Segment_Hierarchy_id",
            "dataType": "int64",
            "isHidden": true,
            "sourceColumn": "Business_Segment_Hierarchy_id"
          },
          {
            "name": "As_of_Date_int",
            "dataType": "int64",
            "isHidden": true,
            "sourceColumn": "As_of_Date_int"
          },
          {
            "name": "Currency",
            "dataType": "string",
            "isHidden": true,
            "sourceColumn": "Currency"
          },
          {
            "name": "Day_Duration",
            "dataType": "int64",
            "isHidden": true,
            "sourceColumn": "Day_Duration"
          },
          {
            "name": "units",
            "dataType": "double",
            "isHidden": true,
            "sourceColumn": "units"
          },
          {
            "name": "packages",
            "dataType": "double",
            "isHidden": true,
            "sourceColumn": "packages"
          },
          {
            "name": "dollars",
            "dataType": "double",
            "isHidden": true,
            "sourceColumn": "dollars"
          },
          {
            "name": "Obsolete_Rate",
            "dataType": "double",
            "sourceColumn": "Obsolete_Rate",
            "formatString": "0%;-0%;0%",
            "summarizeBy": "none"
          },
          {
            "name": "Reserve_Rate",
            "dataType": "double",
            "sourceColumn": "Reserve_Rate",
            "formatString": "0%;-0%;0%",
            "summarizeBy": "none"
          },
          {
            "name": "Reserve_Dollars",
            "dataType": "double",
            "isHidden": true,
            "sourceColumn": "Reserve_Dollars"
          },
          {
            "name": "Reserve_Units",
            "dataType": "double",
            "isHidden": true,
            "sourceColumn": "Reserve_Units"
          },
          {
            "name": "Reserve_Packages",
            "dataType": "double",
            "isHidden": true,
            "sourceColumn": "Reserve_Packages"
          },
          {
            "name": "Dim_Item_SCD_id",
            "dataType": "int64",
            "isHidden": true,
            "sourceColumn": "Dim_Item_SCD_id"
          },
          {
            "type": "calculated",
            "name": "Aging Buckets",
            "dataType": "string",
            "isDataTypeInferred": true,
            "isHidden": true,
            "expression": [
              "SWITCH(TRUE(),",
              "'Reserve Rates'[Day_Duration]< 181, \"(0-6 mos) 0-180 days\", ",
              "'Reserve Rates'[Day_Duration]< 212, \"(6 mos) 181-211 days\", ",
              "'Reserve Rates'[Day_Duration]< 243, \"(7 mos) 212-242 days\", ",
              "'Reserve Rates'[Day_Duration]< 274, \"(8 mos) 243-273 days\", ",
              "'Reserve Rates'[Day_Duration]< 305, \"(9 mos) 274-304 days\", ",
              "'Reserve Rates'[Day_Duration]< 336, \"(10 mos) 305-335 days\", ",
              "'Reserve Rates'[Day_Duration]< 361, \"(11 mos) 336-360 days\", ",
              "'Reserve Rates'[Day_Duration]< 391, \"(12 mos) 361-390 days\", ",
              "'Reserve Rates'[Day_Duration]< 421, \"(13 mos) 391-420 days\", ",
              "'Reserve Rates'[Day_Duration]< 451, \"(14 mos) 421-450 days\", ",
              "'Reserve Rates'[Day_Duration]< 481, \"(15 mos) 451-480 days\", ",
              "'Reserve Rates'[Day_Duration]< 511, \"(16 mos) 481-510 days\", ",
              "'Reserve Rates'[Day_Duration]< 541, \"(17 mos) 511-540 days\", ",
              "'Reserve Rates'[Day_Duration]< 571, \"(18 mos) 541-570 days\", ",
              "'Reserve Rates'[Day_Duration]< 601, \"(19 mos) 571-600 days\", ",
              "'Reserve Rates'[Day_Duration]< 631, \"(20 mos) 601-630 days\", ",
              "'Reserve Rates'[Day_Duration]< 661, \"(21 mos) 631-660 days\", ",
              "'Reserve Rates'[Day_Duration]< 691, \"(22 mos) 661-690 days\", ",
              "'Reserve Rates'[Day_Duration]< 721, \"(23 mos) 691-720 days\", ",
              "'Reserve Rates'[Day_Duration]> 720, \"(24 mos) 0ver 721 days\", ",
              "BLANK())"
            ]
          },
          {
            "type": "calculated",
            "name": "New Reserve Rate",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "SWITCH(TRUE(),",
              "\tRELATED('Product'[Lifecycle Status])=\"New\" ,0,\t",
              "\tRELATED('Product'[Lifecycle Status])=\"CarryOver\" ,0,",
              "\tIF(RELATED('Product'[Lifecycle Status])=\"Phase Out\" && Related('Product'[DiscoDate Aging])=\"0-6 months\",TRUE(),FALSE()),0,",
              "\tIF(RELATED('Product'[Lifecycle Status])=\"Phase Out\" && Related('Product'[DiscoDate Aging])=\"6-12 months\",TRUE(),FALSE()),[Obsolete_Rate]*0.5,\t",
              "\tIF(RELATED('Product'[Lifecycle Status])=\"Phase Out\" && Related('Product'[DiscoDate Aging])=\"12-18 months\",TRUE(),FALSE()),[Obsolete_Rate],",
              "\tIF(RELATED('Product'[Lifecycle Status])=\"Phase Out\" && Related('Product'[DiscoDate Aging])=\"Over 18 months\",TRUE(),FALSE()),[Obsolete_Rate],\t",
              "\tIF(RELATED('Product'[Lifecycle Status])=\"Obsolete\" && Related('Product'[DiscoDate Aging])=\"12-18 months\",TRUE(),FALSE()),[Obsolete_Rate],\t\t",
              "\tIF(RELATED('Product'[Lifecycle Status])=\"Obsolete\" && Related('Product'[DiscoDate Aging])=\"Over 18 months\",TRUE(),FALSE()),1,\t",
              "\tBlank()",
              "\t)"
            ],
            "formatString": "0%;-0%;0%"
          },
          {
            "type": "calculated",
            "name": "New Reserve Units",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "'Reserve Rates'[units] * 'Reserve Rates'[New Reserve Rate]"
            ]
          },
          {
            "type": "calculated",
            "name": "New Reserve Dollars",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": "'Reserve Rates'[dollars] * 'Reserve Rates'[New Reserve Rate]"
          },
          {
            "type": "calculated",
            "name": "New Reserve Packages",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "'Reserve Rates'[packages] * 'Reserve Rates'[New Reserve Rate]"
            ]
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = Value.NativeQuery(#\"SQL Server HBIDW\", \"SELECT",
                "\ta.[Dim_Item_id]",
                "\t, a.Dim_Item_SCD_id",
                "\t, a.[Dim_Facility_id]",
                "\t, a.[Business_Segment_Hierarchy_id]",
                "\t, a.As_of_Date_int",
                "\t, a.Currency",
                "\t, DATEDIFF(DAY, scd.Start_date, IIF(scd.End_date > w.As_of_Date, w.As_of_Date, scd.End_date)) AS Day_Duration",
                "\t, SUM([Units]) AS units",
                "\t, SUM([Packages]) AS packages",
                "\t, SUM(a.local_dollars * c.PegRate) AS dollars",
                "\t, lr.OBS AS Obsolete_Rate",
                "\t, CASE",
                "\t\tWHEN scd.LCA_Class_Code_3 = '6' /* no make*/",
                "\t\t\tAND DATEDIFF(DAY, scd.Start_date, IIF(scd.End_date > w.As_of_Date, w.As_of_Date, scd.End_date)) >= 360 THEN 1.0 * lr.OBS",
                "\t\tWHEN scd.LCA_Class_Code_3 = '6' /* no make*/",
                "\t\t\tAND DATEDIFF(DAY, scd.Start_date, IIF(scd.End_date > w.As_of_Date, w.As_of_Date, scd.End_date)) >= 180 THEN 0.5 * lr.OBS",
                "\t\tWHEN scd.LCA_Class_Code_3 = '6' /* no make*/",
                "\t\t\tAND DATEDIFF(DAY, scd.Start_date, IIF(scd.End_date > w.As_of_Date, w.As_of_Date, scd.End_date)) < 180 THEN 0.0 * lr.OBS",
                "\t\tWHEN scd.LCA_Class_Code_3 = '4' /* obsolete*/",
                "\t\t\tAND DATEDIFF(DAY, scd.Start_date, IIF(scd.End_date > w.As_of_Date, w.As_of_Date, scd.End_date)) >= 180 THEN 1",
                "\t\tWHEN scd.LCA_Class_Code_3 = '4' /* obsolete*/",
                "\t\t\tAND DATEDIFF(DAY, scd.Start_date, IIF(scd.End_date > w.As_of_Date, w.As_of_Date, scd.End_date)) < 180 THEN 1.0 * lr.OBS",
                "\tEND AS Reserve_Rate",
                "\t, SUM(a.local_dollars * c.PegRate) * (CASE",
                "\t\t\t\t\t\t\t\t\t\t\tWHEN scd.LCA_Class_Code_3 = '6' /* no make*/",
                "\t\t\t\t\t\t\t\t\t\t\t\tAND DATEDIFF(DAY, scd.Start_date, IIF(scd.End_date > w.As_of_Date, w.As_of_Date, scd.End_date)) >= 360 THEN 1.0 * lr.OBS",
                "\t\t\t\t\t\t\t\t\t\t\tWHEN scd.LCA_Class_Code_3 = '6' /* no make*/",
                "\t\t\t\t\t\t\t\t\t\t\t\tAND DATEDIFF(DAY, scd.Start_date, IIF(scd.End_date > w.As_of_Date, w.As_of_Date, scd.End_date)) >= 180 THEN 0.5 * lr.OBS",
                "\t\t\t\t\t\t\t\t\t\t\tWHEN scd.LCA_Class_Code_3 = '6' /* no make*/",
                "\t\t\t\t\t\t\t\t\t\t\t\tAND DATEDIFF(DAY, scd.Start_date, IIF(scd.End_date > w.As_of_Date, w.As_of_Date, scd.End_date)) < 180 THEN 0.0 * lr.OBS",
                "\t\t\t\t\t\t\t\t\t\t\tWHEN scd.LCA_Class_Code_3 = '4' /* obsolete*/",
                "\t\t\t\t\t\t\t\t\t\t\t\tAND DATEDIFF(DAY, scd.Start_date, IIF(scd.End_date > w.As_of_Date, w.As_of_Date, scd.End_date)) >= 180 THEN 1",
                "\t\t\t\t\t\t\t\t\t\t\tWHEN scd.LCA_Class_Code_3 = '4' /* obsolete*/",
                "\t\t\t\t\t\t\t\t\t\t\t\tAND DATEDIFF(DAY, scd.Start_date, IIF(scd.End_date > w.As_of_Date, w.As_of_Date, scd.End_date)) < 180 THEN 1.0 * lr.OBS",
                "\t\t\t\t\t\t\t\t\t\tEND",
                "\t\t\t\t\t\t\t\t\t\t)\tAS Reserve_Dollars",
                "\t, SUM(a.Units) * (CASE",
                "\t\t\t\t\t\tWHEN scd.LCA_Class_Code_3 = '6' /* no make*/",
                "\t\t\t\t\t\t\tAND DATEDIFF(DAY, scd.Start_date, IIF(scd.End_date > w.As_of_Date, w.As_of_Date, scd.End_date)) >= 360 THEN 1.0 * lr.OBS",
                "\t\t\t\t\t\tWHEN scd.LCA_Class_Code_3 = '6' /* no make*/",
                "\t\t\t\t\t\t\tAND DATEDIFF(DAY, scd.Start_date, IIF(scd.End_date > w.As_of_Date, w.As_of_Date, scd.End_date)) >= 180 THEN 0.5 * lr.OBS",
                "\t\t\t\t\t\tWHEN scd.LCA_Class_Code_3 = '6' /* no make*/",
                "\t\t\t\t\t\t\tAND DATEDIFF(DAY, scd.Start_date, IIF(scd.End_date > w.As_of_Date, w.As_of_Date, scd.End_date)) < 180 THEN 0.0 * lr.OBS",
                "\t\t\t\t\t\tWHEN scd.LCA_Class_Code_3 = '4' /* obsolete*/",
                "\t\t\t\t\t\t\tAND DATEDIFF(DAY, scd.Start_date, IIF(scd.End_date > w.As_of_Date, w.As_of_Date, scd.End_date)) >= 180 THEN 1",
                "\t\t\t\t\t\tWHEN scd.LCA_Class_Code_3 = '4' /* obsolete*/",
                "\t\t\t\t\t\t\tAND DATEDIFF(DAY, scd.Start_date, IIF(scd.End_date > w.As_of_Date, w.As_of_Date, scd.End_date)) < 180 THEN 1.0 * lr.OBS",
                "\t\t\t\t\tEND",
                "\t\t\t\t\t)\tAS Reserve_Units",
                "\t, SUM(a.Packages) * (CASE",
                "\t\t\t\t\t\t\tWHEN scd.LCA_Class_Code_3 = '6' /* no make*/",
                "\t\t\t\t\t\t\t\tAND DATEDIFF(DAY, scd.Start_date, IIF(scd.End_date > w.As_of_Date, w.As_of_Date, scd.End_date)) >= 360 THEN 1.0 * lr.OBS",
                "\t\t\t\t\t\t\tWHEN scd.LCA_Class_Code_3 = '6' /* no make*/",
                "\t\t\t\t\t\t\t\tAND DATEDIFF(DAY, scd.Start_date, IIF(scd.End_date > w.As_of_Date, w.As_of_Date, scd.End_date)) >= 180 THEN 0.5 * lr.OBS",
                "\t\t\t\t\t\t\tWHEN scd.LCA_Class_Code_3 = '6' /* no make*/",
                "\t\t\t\t\t\t\t\tAND DATEDIFF(DAY, scd.Start_date, IIF(scd.End_date > w.As_of_Date, w.As_of_Date, scd.End_date)) < 180 THEN 0.0 * lr.OBS",
                "\t\t\t\t\t\t\tWHEN scd.LCA_Class_Code_3 = '4' /* obsolete*/",
                "\t\t\t\t\t\t\t\tAND DATEDIFF(DAY, scd.Start_date, IIF(scd.End_date > w.As_of_Date, w.As_of_Date, scd.End_date)) >= 180 THEN 1",
                "\t\t\t\t\t\t\tWHEN scd.LCA_Class_Code_3 = '4' /* obsolete*/",
                "\t\t\t\t\t\t\t\tAND DATEDIFF(DAY, scd.Start_date, IIF(scd.End_date > w.As_of_Date, w.As_of_Date, scd.End_date)) < 180 THEN 1.0 * lr.OBS",
                "\t\t\t\t\t\tEND",
                "\t\t\t\t\t\t)\tAS Reserve_Packages",
                "FROM\t[dbo].[Fact_Inventory_DIV_vw] a",
                "\tLEFT JOIN",
                "\t(",
                "\t\tSELECT",
                "\t\t\t*",
                "\t\tFROM\tEDM.dbo.Peg_Rate",
                "\t\tWHERE",
                "\t\t\tYear =",
                "\t\t(",
                "\t\t\tSELECT MIN(Fiscal_Yr)FROM HBIDW.dbo.Dim_Week WHERE Curr_Wk_Ind = 'Y'",
                "\t\t)",
                "\t) c ON a.Currency\t\t\t\t\t\t\t\t= c.Currency",
                "\tJOIN HBIDW.dbo.product_view p ON a.Dim_Item_id\t\t\t= p.Dim_Item_id",
                "\tJOIN HBIDW.dbo.Dim_Facility f ON a.Dim_Facility_id\t\t= f.Dim_Facility_ID",
                "\tJOIN HBIDW.dbo.Dim_Item_SCD scd ON a.Dim_Item_SCD_id = scd.Dim_Item_SCD_id",
                "\t\t\t\t\t\t\t\t\t\tAND scd.LCA_Class_Code_3 IN (",
                "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'6'",
                "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\t'4'",
                "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)",
                "\tJOIN HBIDW.dbo.Dim_Week w ON a.As_of_Date_int\t\t\t= w.AS_of_Date_INT",
                "\tJOIN Reserves.dbo.LossRate lr ON lr.brand_name\t\t\t= p.Brand_Name",
                "\t\t\t\t\t\t\t\t\tAND lr.sbu_desc\t\t\t= p.Sbu_Desc",
                "\t\t\t\t\t\t\t\t\tAND lr.Month\t\t\t= w.Fiscal_Mth",
                "WHERE",
                "",
                "\t---------------------------",
                "\t-- Note: Reserve logic is new",
                "\t-- for FY2022, does not",
                "\t-- apply to previous years",
                "",
                "\ta.[As_of_Date_int] BETWEEN 20220102",
                "\t\t\t\t\tAND\t\tFORMAT(GETDATE(), 'yyyyMMdd')",
                "\tAND Dim_measure_id IN (",
                "\t\t\t\t\t\t21100",
                "\t\t\t\t\t\t\t, 21200",
                "\t\t\t\t\t\t\t, 21300",
                "\t\t\t\t\t\t\t, 21400",
                "\t\t\t\t\t\t)",
                "GROUP BY",
                "\t  a.[Dim_Item_id]",
                "\t, a.Dim_Item_SCD_id",
                "\t, a.[Dim_Facility_id]",
                "\t, a.[Business_Segment_Hierarchy_id]",
                "\t, a.[As_of_Date_int]",
                "\t, lr.OBS",
                "\t, a.Currency",
                "\t, scd.LCA_Class_Code_3",
                "\t, DATEDIFF(DAY, scd.Start_date, CASE",
                "\t\t\t\t\t\t\t\t\t\tWHEN scd.End_date > w.As_of_Date THEN w.As_of_Date",
                "\t\t\t\t\t\t\t\t\t\tELSE scd.End_date",
                "\t\t\t\t\t\t\t\t\tEND",
                "\t\t\t);",
                "",
                "\")",
                "in",
                "    Source"
              ]
            }
          }
        ],
        "measures": [
          {
            "name": "Reserve Packages",
            "expression": [
              " ",
              "VAR MaxWeekEnd = MAX('Reserve Rates'[As_of_Date_int])",
              "RETURN",
              "CALCULATE(sum('Reserve Rates'[Reserve_Packages]), 'Reserve Rates'[As_of_Date_int] = MaxWeekEnd)"
            ],
            "formatString": "#,0"
          },
          {
            "name": "Reserve Units",
            "expression": [
              " ",
              "VAR MaxWeekEnd = MAX('Reserve Rates'[As_of_Date_int])",
              "RETURN",
              "CALCULATE(sum('Reserve Rates'[Reserve_Units]), 'Reserve Rates'[As_of_Date_int] = MaxWeekEnd)"
            ],
            "formatString": "#,0"
          },
          {
            "name": "Reserve Dollars",
            "expression": [
              " ",
              "VAR MaxWeekEnd = MAX('Reserve Rates'[As_of_Date_int])",
              "RETURN",
              "CALCULATE(sum('Reserve Rates'[Reserve_Dollars]), 'Reserve Rates'[As_of_Date_int] = MaxWeekEnd)",
              "",
              ""
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "Reserve Rate Summarized",
            "expression": [
              "",
              "SELECTEDVALUE(",
              "    'Reserve Rates'[Reserve_Rate],",
              "    CONCATENATEX(SUMMARIZE('Reserve Rates','Reserve Rates'[Reserve_Rate]), 'Reserve Rates'[Reserve_Rate], \", \",'Reserve Rates'[Reserve_Rate],ASC)",
              ")"
            ]
          },
          {
            "name": "Obsolete Rate Summarized",
            "expression": [
              "",
              "SELECTEDVALUE(",
              "    'Reserve Rates'[Obsolete_Rate],",
              "    CONCATENATEX(SUMMARIZE('Reserve Rates','Reserve Rates'[Obsolete_Rate]), 'Reserve Rates'[Obsolete_Rate], \", \",'Reserve Rates'[Obsolete_Rate],ASC)",
              ")"
            ]
          },
          {
            "name": "Reserves Day Duration Summarized",
            "expression": [
              "",
              "SELECTEDVALUE(",
              "    'Reserve Rates'[Day_Duration],",
              "    CONCATENATEX(SUMMARIZE('Reserve Rates','Reserve Rates'[Day_Duration]), 'Reserve Rates'[Day_Duration], \", \",'Reserve Rates'[Day_Duration],ASC)",
              ")"
            ]
          },
          {
            "name": "Dollars Pre-Reserves",
            "expression": [
              "",
              "",
              "SUM('Reserve Rates'[dollars])"
            ],
            "formatString": "#,0"
          },
          {
            "name": "Units Pre-Reserves",
            "expression": [
              "",
              "",
              "SUM('Reserve Rates'[units])"
            ],
            "formatString": "#,0"
          },
          {
            "name": "Packages Pre-Reserves",
            "expression": [
              "",
              "",
              "SUM('Reserve Rates'[packages])"
            ],
            "formatString": "#,0"
          },
          {
            "name": "New ReserveRate Dollars",
            "expression": [
              " ",
              "VAR MaxWeekEnd = MAX('Reserve Rates'[As_of_Date_int])",
              "RETURN",
              "CALCULATE(sum('Reserve Rates'[New Reserve Dollars]), 'Reserve Rates'[As_of_Date_int] = MaxWeekEnd)"
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "New ReserveRate Units",
            "expression": [
              " ",
              "VAR MaxWeekEnd = MAX('Reserve Rates'[As_of_Date_int])",
              "RETURN",
              "CALCULATE(sum('Reserve Rates'[New Reserve Units]), 'Reserve Rates'[As_of_Date_int] = MaxWeekEnd)"
            ],
            "formatString": "#,0"
          },
          {
            "name": "New ReserveRate Packages",
            "expression": [
              " ",
              "VAR MaxWeekEnd = MAX('Reserve Rates'[As_of_Date_int])",
              "RETURN",
              "CALCULATE(sum('Reserve Rates'[New Reserve Packages]), 'Reserve Rates'[As_of_Date_int] = MaxWeekEnd)"
            ],
            "formatString": "#,0"
          }
        ]
      },
      {
        "name": "SCAGlobal",
        "columns": [
          {
            "name": "SCAGlobal",
            "dataType": "string",
            "sourceColumn": "SCAGlobal"
          },
          {
            "name": "min_Dim_Item_id",
            "dataType": "double",
            "sourceColumn": "min_Dim_Item_id"
          },
          {
            "name": "min_Business_Segment_Hierarchy_id",
            "dataType": "int64",
            "sourceColumn": "min_Business_Segment_Hierarchy_id"
          },
          {
            "name": "min_Class_Code_LV3",
            "dataType": "int64",
            "sourceColumn": "min_Class_Code_LV3"
          },
          {
            "name": "min_Category_Desc",
            "dataType": "string",
            "sourceColumn": "min_Category_Desc"
          },
          {
            "name": "min_Marketing_Resp_3",
            "dataType": "string",
            "sourceColumn": "min_Marketing_Resp_3"
          },
          {
            "name": "min_Product_Group_Desc",
            "dataType": "string",
            "sourceColumn": "min_Product_Group_Desc"
          },
          {
            "name": "min_Gender_Age_Desc",
            "dataType": "string",
            "sourceColumn": "min_Gender_Age_Desc"
          },
          {
            "name": "min_Color_Name",
            "dataType": "string",
            "sourceColumn": "min_Color_Name"
          },
          {
            "type": "calculated",
            "name": "max_WP_Flag",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "MAXX(",
              "    RELATEDTABLE('Product'),",
              "    'Product'[Winning Portfolio Flag]",
              ")"
            ]
          },
          {
            "type": "calculated",
            "name": "SCA First Ship Date",
            "dataType": "dateTime",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "MINX(",
              "    RELATEDTABLE('Product'),",
              "    'Product'[SCA First Ship Date]",
              ")"
            ]
          },
          {
            "type": "calculated",
            "name": "SCA Last Ship Date",
            "dataType": "dateTime",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "MINX(",
              "    RELATEDTABLE('Product'),",
              "    'Product'[SCA Last Ship Date]",
              ")"
            ]
          },
          {
            "type": "calculated",
            "name": "SCA First Inventory Date",
            "dataType": "dateTime",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "MINX(",
              "    RELATEDTABLE('Product'),",
              "    'Product'[SCA First Inventory Date]",
              ")"
            ]
          },
          {
            "type": "calculated",
            "name": "SCA Last Inventory Date",
            "dataType": "dateTime",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "MINX(",
              "    RELATEDTABLE('Product'),",
              "    'Product'[SCA Last Inventory Date]",
              ")"
            ]
          },
          {
            "type": "calculated",
            "name": "SCA Division Decile",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "VAR SCAPrimaryBusiness = SCAGlobal[SCAGlobal_Bus_Id]",
              "VAR DivisionDecile =",
              "CALCULATE(",
              "    MINX(",
              "        RELATEDTABLE('SCA Customer'),",
              "        'SCA Customer'[SCA Division Decile Sales]",
              "    ),",
              "    'SCA Customer'[SCAGlobal_Bus_Id] = SCAPrimaryBusiness",
              ")",
              "",
              "RETURN",
              "SWITCH(TRUE(),",
              "    AND(ISBLANK( DivisionDecile ), DATEDIFF(SCAGlobal[SCA First Inventory Date],NOW(),DAY) < 181), \"No Sales & New\",",
              "    ISBLANK( DivisionDecile ), \"No Sales & Established\",",
              "    DivisionDecile",
              ")"
            ],
            "sortByColumn": "SCA Division Decile Sort"
          },
          {
            "type": "calculated",
            "name": "min_Class_Code_LV3_Desc",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "LOOKUPVALUE('Historical Classifications'[Class_Code_LV3_Desc], 'Historical Classifications'[Class_Code_LV3], SCAGlobal[min_Class_Code_LV3])",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "SCA Division Decile Sort",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "isHidden": true,
            "expression": [
              "",
              "VAR SCAPrimaryBusiness = SCAGlobal[SCAGlobal_Bus_Id]",
              "VAR DivisionDecile =",
              "CALCULATE(",
              "    MINX(",
              "        RELATEDTABLE('SCA Customer'),",
              "        'SCA Customer'[SCA Division Decile Sales Sort]",
              "    ),",
              "    'SCA Customer'[SCAGlobal_Bus_Id] = SCAPrimaryBusiness",
              ")",
              "",
              "RETURN",
              "SWITCH(TRUE(),",
              "    AND(ISBLANK( DivisionDecile ), DATEDIFF(SCAGlobal[SCA First Inventory Date],NOW(),DAY) < 181), 12,",
              "    ISBLANK( DivisionDecile ), 11,",
              "    DivisionDecile",
              ")"
            ]
          },
          {
            "type": "calculated",
            "name": "Top 5 Customers",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "VAR topcustomers = 5",
              "VAR summarizedTopCustomers = ",
              "    SUMMARIZE(",
              "        FILTER(",
              "            RELATEDTABLE('SCA Customer'),",
              "            'SCA Customer'[CustomerRank] <= topcustomers",
              "        ),",
              "        'SCA Customer'[Group_Desc],",
              "        'SCA Customer'[CustomerRank]        ",
              "    )",
              "RETURN",
              "CONCATENATEX(",
              "    summarizedTopCustomers,        ",
              "    'SCA Customer'[Group_Desc],",
              "    \", \",",
              "    'SCA Customer'[CustomerRank],",
              "    ASC",
              ")"
            ]
          },
          {
            "type": "calculated",
            "name": "Customer Count",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "COUNTROWS(",
              "    SUMMARIZE(",
              "            RELATEDTABLE('SCA Customer'),",
              "            'SCA Customer'[Group_Desc]",
              "    )",
              ")"
            ]
          },
          {
            "name": "min_Style_Group",
            "dataType": "string",
            "sourceColumn": "min_Style_Group"
          },
          {
            "name": "min_Sbu_Desc",
            "dataType": "string",
            "sourceColumn": "min_Sbu_Desc"
          },
          {
            "type": "calculated",
            "name": "SCAGlobal_Bus_Id",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "'SCAGlobal'[SCAGlobal] & \"_\" &  'SCAGlobal'[min_Business_Segment_Hierarchy_id]",
              ""
            ]
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = Value.NativeQuery(#\"SQL Server HBIDW\", \"SELECT",
                "\t    CASE ",
                "\t\t\tWHEN product.Sbu_Desc = 'Socks' THEN CONCAT(product.Selling_Style , '_' , product.UPC_Code)",
                "\t\t\tWHEN product.Sbu_Desc IN ('HA Apparel', 'HA Sheridan', 'HA Bras N Things') THEN CONCAT(product.Division_Desc, product.Style_Num , '_' , product.Color_Code , '_' , product.Attribution_Code ) --HAA can have the same EAN between business units, so we use division desc to mimic how SKU count takes a count for each EAN in each BU; thus we only strip out size",
                "\t\t\tWHEN product.Sbu_Desc = 'Champion Europe' THEN CONCAT(product.Representative_Style_Num, '_', product.Color_Code) --rep style matches the style in the S3 SKU, which is the field used in SKU Count",
                "\t\t\tELSE CONCAT(product.Style_Num , '_' , product.Color_Code , '_' , product.Attribution_Code )",
                "\t    END AS SCAGlobal",
                "",
                "      , MIN(product.Dim_Item_id) as min_Dim_Item_id",
                "\t  , MIN(product.Business_Segment_Hierarchy_id) as min_Business_Segment_Hierarchy_id",
                "\t  , MIN(product.Sbu_Desc) as min_Sbu_Desc",
                "      , MIN(product.Class_Code_LV3) as min_Class_Code_LV3",
                "\t  , MIN(product.category_Desc) as min_Category_Desc",
                "\t  , MIN(product.Marketing_Resp_3) as min_Marketing_Resp_3",
                "\t  , MIN(product.Product_Group_Desc) as min_Product_Group_Desc",
                "\t  , MIN(product.Gender_Age_Desc) as min_Gender_Age_Desc",
                "\t  , MIN(product.Color_Name) as min_Color_Name",
                "\t  , MIN(product.Style_Group) as min_Style_Group",
                "",
                "FROM\t\t\tHBIDW.dbo.product_view\t\tproduct",
                "WHERE ",
                "\t\t\t\t( ",
                "\t\t\t\t     Exists (SELECT Null FROM dbo.Fact_Inventory x WHERE x.As_of_Date_int>=(20210102) And x.Dim_Item_id = product.Dim_Item_id)",
                "\t\t\t\t or  Exists (SELECT Null FROM dbo.fact_sales_sku x WHERE x.As_of_Date_int>=(20210102) And x.Dim_Item_id = product.Dim_Item_id)",
                "\t\t\t\t )",
                "\t\t\t\t and product.Sbu_Desc not in ('HA Apparel', 'HA Sheridan', 'HA Bras N Things','Champion Europe','HEI-Germany','HEI-UK','HEI-Benelux','HEI-COO','HEI-Italy','HEI-France','HEI-Czech Republic','HEI-Hungary','HEI-Spain','HEI-Slovakia','MFB Europe') --removing businesses without sales to improve report performance\t\t\t\t  ",
                "GROUP BY ",
                "\t\tCASE ",
                "\t\t\tWHEN product.Sbu_Desc = 'Socks' THEN CONCAT(product.Selling_Style , '_' , product.UPC_Code)",
                "\t\t\tWHEN product.Sbu_Desc IN ('HA Apparel', 'HA Sheridan', 'HA Bras N Things') THEN CONCAT(product.Division_Desc, product.Style_Num , '_' , product.Color_Code , '_' , product.Attribution_Code ) --HAA can have the same EAN between business units, so we use division desc to mimic how SKU count takes a count for each EAN in each BU; thus we only strip out size",
                "\t\t\tWHEN product.Sbu_Desc = 'Champion Europe' THEN CONCAT(product.Representative_Style_Num, '_', product.Color_Code) --rep style matches the style in the S3 SKU, which is the field used in SKU Count",
                "\t\t\tELSE CONCAT(product.Style_Num , '_' , product.Color_Code , '_' , product.Attribution_Code )",
                "\t    END",
                "",
                "",
                "\")",
                "in",
                "    Source"
              ]
            }
          }
        ]
      },
      {
        "name": "Customer",
        "columns": [
          {
            "name": "Dim_Customer_ID",
            "dataType": "int64",
            "sourceColumn": "Dim_Customer_ID"
          },
          {
            "name": "Ts_Div_Code",
            "dataType": "string",
            "sourceColumn": "Ts_Div_Code"
          },
          {
            "name": "Ts_Cust_Acct_Code",
            "dataType": "string",
            "sourceColumn": "Ts_Cust_Acct_Code"
          },
          {
            "name": "Group_Code",
            "dataType": "string",
            "sourceColumn": "Group_Code"
          },
          {
            "name": "Group_Desc",
            "dataType": "string",
            "sourceColumn": "Group_Desc"
          },
          {
            "name": "Parent_Account",
            "dataType": "string",
            "sourceColumn": "Parent_Account"
          },
          {
            "name": "Account",
            "dataType": "string",
            "sourceColumn": "Account"
          },
          {
            "name": "Soldto",
            "dataType": "string",
            "sourceColumn": "Soldto"
          },
          {
            "name": "Xrf_Account",
            "dataType": "string",
            "sourceColumn": "Xrf_Account"
          },
          {
            "name": "Customer_Seq_Num",
            "dataType": "double",
            "sourceColumn": "Customer_Seq_Num"
          },
          {
            "name": "Cust_Rank",
            "dataType": "int64",
            "sourceColumn": "Cust_Rank"
          },
          {
            "name": "Cust_Rank_Desc",
            "dataType": "string",
            "sourceColumn": "Cust_Rank_Desc"
          },
          {
            "name": "Cust_Rank_Group",
            "dataType": "string",
            "sourceColumn": "Cust_Rank_Group"
          },
          {
            "name": "Segment_Desc",
            "dataType": "string",
            "sourceColumn": "Segment_Desc"
          },
          {
            "name": "Channel_Desc",
            "dataType": "string",
            "sourceColumn": "Channel_Desc"
          },
          {
            "name": "Channel_Group_Desc",
            "dataType": "string",
            "sourceColumn": "Channel_Group_Desc"
          },
          {
            "name": "Zone_Desc",
            "dataType": "string",
            "sourceColumn": "Zone_Desc"
          },
          {
            "name": "Sales_Resp_Name_1",
            "dataType": "string",
            "sourceColumn": "Sales_Resp_Name_1"
          },
          {
            "name": "Sales_Resp_Name_2",
            "dataType": "string",
            "sourceColumn": "Sales_Resp_Name_2"
          },
          {
            "name": "Sales_Resp_Name_3",
            "dataType": "string",
            "sourceColumn": "Sales_Resp_Name_3"
          },
          {
            "name": "Country_Code",
            "dataType": "string",
            "sourceColumn": "Country_Code"
          },
          {
            "name": "Chain_Account_Desc",
            "dataType": "string",
            "sourceColumn": "Chain_Account_Desc"
          },
          {
            "name": "Active_Soldto",
            "dataType": "string",
            "sourceColumn": "Active_Soldto"
          },
          {
            "name": "Trade_Group",
            "dataType": "string",
            "sourceColumn": "Trade_Group"
          },
          {
            "name": "Soldto_Acct",
            "dataType": "string",
            "sourceColumn": "Soldto_Acct"
          },
          {
            "name": "InterNational",
            "dataType": "string",
            "sourceColumn": "InterNational"
          },
          {
            "name": "National",
            "dataType": "string",
            "sourceColumn": "National"
          },
          {
            "name": "Sub_National",
            "dataType": "string",
            "sourceColumn": "Sub_National"
          },
          {
            "name": "Regional",
            "dataType": "string",
            "sourceColumn": "Regional"
          },
          {
            "type": "calculated",
            "name": "CPG",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "SWITCH(TRUE(),",
              "    Customer[Parent_Account] = BLANK(), Customer[Chain_Account_Desc],",
              "    Customer[Parent_Account]",
              ")"
            ]
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = #\"SQL Server HBIDW\",",
                "    dbo_Dim_Customer = Source{[Schema=\"dbo\",Item=\"Dim_Customer\"]}[Data]",
                "in",
                "    dbo_Dim_Customer"
              ]
            }
          }
        ]
      },
      {
        "name": "SCA Customer",
        "columns": [
          {
            "name": "SCAGlobal",
            "dataType": "string",
            "sourceColumn": "SCAGlobal"
          },
          {
            "name": "Dim_Customer_id",
            "dataType": "int64",
            "sourceColumn": "Dim_Customer_id"
          },
          {
            "name": "CustomerRank",
            "dataType": "int64",
            "sourceColumn": "CustomerRank"
          },
          {
            "name": "Group_Desc",
            "dataType": "string",
            "sourceColumn": "Group_Desc"
          },
          {
            "name": "Chain_Account_Desc",
            "dataType": "string",
            "sourceColumn": "Chain_Account_Desc"
          },
          {
            "type": "calculated",
            "name": "Chain Account Quad",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "SWITCH(TRUE(),",
              "    ISBLANK(RELATED('Customer Decile'[NetGrossMarginCumulativePercentage])), \"UNMAPPED\",",
              "    RELATED('Customer Decile'[NetGrossMarginCumulativePercentage]) <= .8, \"T\",",
              "    \"B\"",
              ")"
            ]
          },
          {
            "name": "Business_Segment_Hierarchy_id",
            "dataType": "int64",
            "sourceColumn": "Business_Segment_Hierarchy_id"
          },
          {
            "name": "Chain_Account_Desc_Bus_Id",
            "dataType": "string",
            "sourceColumn": "Chain_Account_Desc_Bus_Id"
          },
          {
            "type": "calculated",
            "name": "SCAGlobal Quad",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "SWITCH(TRUE(),",
              "    ISBLANK('SCA Customer'[SCA Division Decile Gross Margin]), \"UNMAPPED\",                 //Unmapped SCAs will fall here",
              "    'SCA Customer'[SCA Division Decile Gross Margin] = \"No Sales & Established\", \"B\",      //Jacquie instructed to put these in the bottom 20% -Nathan on 4/6/22",
              "    'SCA Customer'[SCA Division Decile Gross Margin] = \"No Sales & New\", \"B\",              //Jacquie instructed to put these in the bottom 20% -Nathan on 4/6/22",
              "    VALUE('SCA Customer'[SCA Division Decile Gross Margin]) <= 8, \"T\",                     //This is for the top 80, based on the decile integer",
              "    \"B\"                                                                                    //this is for the ninth and tenth decile",
              ")"
            ]
          },
          {
            "type": "calculated",
            "name": "SCAGlobal Chain Account Distribution",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "VAR CountNumAccountTypes = ",
              "COUNTROWS(",
              "    CALCULATETABLE(",
              "        VALUES('SCA Customer'[Chain Account Quad]),",
              "        ALLEXCEPT('SCA Customer', 'SCA Customer'[SCAGlobal_Bus_Id])",
              "    )",
              ")",
              "",
              "RETURN",
              "IF(CountNumAccountTypes = 2, \"T & B\", 'SCA Customer'[Chain Account Quad])"
            ]
          },
          {
            "name": "SCAGlobal_Bus_Id",
            "dataType": "string",
            "sourceColumn": "SCAGlobal_Bus_Id"
          },
          {
            "type": "calculated",
            "name": "SCA Division ABC Class Sales",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "SWITCH(TRUE(), ",
              "    RELATED('Business Hierarchy'[Division]) IN {\"HA Apparel\", \"HA Bras N Things\", \"HA Sheridan\",\"Champion Europe\", \"MFB Europe\"}, BLANK(),",
              "    RELATED('Business Hierarchy'[Division_Group]) = \"Hanes Europe\", BLANK(),",
              "    AND(ISBLANK( RELATED( 'SCA Statistics'[NetSalesCumulativePercentage] ) ), DATEDIFF(RELATED('SCAGlobal'[SCA First Inventory Date]),NOW(),DAY) < 181), \"No Sales & New\",",
              "    ISBLANK( RELATED( 'SCA Statistics'[NetSalesCumulativePercentage] ) ), \"No Sales & Established\",",
              "    RELATED( 'SCA Statistics'[NetSalesCumulativePercentage] ) <.7, \"A\",",
              "    RELATED( 'SCA Statistics'[NetSalesCumulativePercentage] ) <.9, \"B\",",
              "    \"C\"",
              ")"
            ]
          },
          {
            "type": "calculated",
            "name": "SCA Division Decile Sales",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "SWITCH(TRUE(),",
              "    RELATED('Business Hierarchy'[Division]) IN {\"HA Apparel\", \"HA Bras N Things\", \"HA Sheridan\",\"Champion Europe\", \"MFB Europe\"}, BLANK(),",
              "    RELATED('Business Hierarchy'[Division_Group]) = \"Hanes Europe\", BLANK(),",
              "    AND(ISBLANK( RELATED( 'SCA Statistics'[NetSalesCumulativePercentage] ) ), DATEDIFF(RELATED('SCAGlobal'[SCA First Inventory Date]),NOW(),DAY) < 181), \"No Sales & New\",",
              "    ISBLANK( RELATED( 'SCA Statistics'[NetSalesCumulativePercentage] ) ), \"No Sales & Established\",",
              "    RELATED( 'SCA Statistics'[NetSalesCumulativePercentage] ) > .9, \"10\",",
              "    RELATED( 'SCA Statistics'[NetSalesCumulativePercentage] ) > .8, \"9\",",
              "    RELATED( 'SCA Statistics'[NetSalesCumulativePercentage] ) > .7, \"8\",",
              "    RELATED( 'SCA Statistics'[NetSalesCumulativePercentage] ) > .6, \"7\",",
              "    RELATED( 'SCA Statistics'[NetSalesCumulativePercentage] ) > .5, \"6\",",
              "    RELATED( 'SCA Statistics'[NetSalesCumulativePercentage] ) > .4, \"5\",",
              "    RELATED( 'SCA Statistics'[NetSalesCumulativePercentage] ) > .3, \"4\",",
              "    RELATED( 'SCA Statistics'[NetSalesCumulativePercentage] ) > .2, \"3\",",
              "    RELATED( 'SCA Statistics'[NetSalesCumulativePercentage] ) > .1, \"2\",",
              "\"1\"",
              ")"
            ],
            "sortByColumn": "SCA Division Decile Sales Sort"
          },
          {
            "type": "calculated",
            "name": "SCA Division Decile Sales Sort",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "isHidden": true,
            "expression": [
              "",
              "SWITCH(TRUE(),",
              "    RELATED('Business Hierarchy'[Division]) IN {\"HA Apparel\", \"HA Bras N Things\", \"HA Sheridan\",\"Champion Europe\", \"MFB Europe\"}, BLANK(),",
              "    RELATED('Business Hierarchy'[Division_Group]) = \"Hanes Europe\", BLANK(),",
              "    AND(ISBLANK( RELATED( 'SCA Statistics'[NetSalesCumulativePercentage] ) ), DATEDIFF(RELATED('SCAGlobal'[SCA First Inventory Date]),NOW(),DAY) < 181), 12,",
              "    ISBLANK( RELATED( 'SCA Statistics'[NetSalesCumulativePercentage] ) ), 11,",
              "    RELATED( 'SCA Statistics'[NetSalesCumulativePercentage] ) > .9, 10,",
              "    RELATED( 'SCA Statistics'[NetSalesCumulativePercentage] ) > .8, 9,",
              "    RELATED( 'SCA Statistics'[NetSalesCumulativePercentage] ) > .7, 8,",
              "    RELATED( 'SCA Statistics'[NetSalesCumulativePercentage] ) > .6, 7,",
              "    RELATED( 'SCA Statistics'[NetSalesCumulativePercentage] ) > .5, 6,",
              "    RELATED( 'SCA Statistics'[NetSalesCumulativePercentage] ) > .4, 5,",
              "    RELATED( 'SCA Statistics'[NetSalesCumulativePercentage] ) > .3, 4,",
              "    RELATED( 'SCA Statistics'[NetSalesCumulativePercentage] ) > .2, 3,",
              "    RELATED( 'SCA Statistics'[NetSalesCumulativePercentage] ) > .1, 2,",
              "1",
              ")"
            ]
          },
          {
            "type": "calculated",
            "name": "SCA Division Rank Sales",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "SWITCH(TRUE(),",
              "    RELATED('Business Hierarchy'[Division]) IN {\"HA Apparel\", \"HA Bras N Things\", \"HA Sheridan\",\"Champion Europe\", \"MFB Europe\"}, BLANK(),",
              "    RELATED('Business Hierarchy'[Division_Group]) = \"Hanes Europe\", BLANK(),",
              "    ISBLANK(RELATED( 'SCA Statistics'[NetSalesRank] )), -1,",
              "    RELATED( 'SCA Statistics'[NetSalesRank] )",
              ")"
            ]
          },
          {
            "type": "calculated",
            "name": "SCA Division ABC Class Gross Margin",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "SWITCH(TRUE(), ",
              "    RELATED('Business Hierarchy'[Division]) IN {\"HA Apparel\", \"HA Bras N Things\", \"HA Sheridan\",\"Champion Europe\", \"MFB Europe\"}, BLANK(),",
              "    RELATED('Business Hierarchy'[Division_Group]) = \"Hanes Europe\", BLANK(),",
              "    AND(ISBLANK( RELATED( 'SCA Statistics'[NetGrossMarginCumulativePercentage] ) ), DATEDIFF(RELATED('SCAGlobal'[SCA First Inventory Date]),NOW(),DAY) < 181), \"No Sales & New\",",
              "    ISBLANK( RELATED( 'SCA Statistics'[NetGrossMarginCumulativePercentage] ) ), \"No Sales & Established\",",
              "    RELATED( 'SCA Statistics'[NetGrossMarginCumulativePercentage] ) <.7, \"A\",",
              "    RELATED( 'SCA Statistics'[NetGrossMarginCumulativePercentage] ) <.9, \"B\",",
              "    \"C\"",
              ")"
            ]
          },
          {
            "type": "calculated",
            "name": "SCA Division Decile Gross Margin",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "SWITCH(TRUE(),",
              "    RELATED('Business Hierarchy'[Division]) IN {\"HA Apparel\", \"HA Bras N Things\", \"HA Sheridan\",\"Champion Europe\", \"MFB Europe\"}, BLANK(),",
              "    RELATED('Business Hierarchy'[Division_Group]) = \"Hanes Europe\", BLANK(),",
              "    AND(ISBLANK( RELATED( 'SCA Statistics'[NetGrossMarginCumulativePercentage] ) ), DATEDIFF(RELATED('SCAGlobal'[SCA First Inventory Date]),NOW(),DAY) < 181), \"No Sales & New\",",
              "    ISBLANK( RELATED( 'SCA Statistics'[NetGrossMarginCumulativePercentage] ) ), \"No Sales & Established\",",
              "    RELATED( 'SCA Statistics'[NetGrossMarginCumulativePercentage] ) > .9, \"10\",",
              "    RELATED( 'SCA Statistics'[NetGrossMarginCumulativePercentage] ) > .8, \"9\",",
              "    RELATED( 'SCA Statistics'[NetGrossMarginCumulativePercentage] ) > .7, \"8\",",
              "    RELATED( 'SCA Statistics'[NetGrossMarginCumulativePercentage] ) > .6, \"7\",",
              "    RELATED( 'SCA Statistics'[NetGrossMarginCumulativePercentage] ) > .5, \"6\",",
              "    RELATED( 'SCA Statistics'[NetGrossMarginCumulativePercentage] ) > .4, \"5\",",
              "    RELATED( 'SCA Statistics'[NetGrossMarginCumulativePercentage] ) > .3, \"4\",",
              "    RELATED( 'SCA Statistics'[NetGrossMarginCumulativePercentage] ) > .2, \"3\",",
              "    RELATED( 'SCA Statistics'[NetGrossMarginCumulativePercentage] ) > .1, \"2\",",
              "\"1\"",
              ")"
            ],
            "sortByColumn": "SCA Division Decile Sort Gross Margin"
          },
          {
            "type": "calculated",
            "name": "SCA Division Decile Sort Gross Margin",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "isHidden": true,
            "expression": [
              "",
              "SWITCH(TRUE(),",
              "    RELATED('Business Hierarchy'[Division]) IN {\"HA Apparel\", \"HA Bras N Things\", \"HA Sheridan\",\"Champion Europe\", \"MFB Europe\"}, BLANK(),",
              "    RELATED('Business Hierarchy'[Division_Group]) = \"Hanes Europe\", BLANK(),",
              "    AND(ISBLANK( RELATED( 'SCA Statistics'[NetGrossMarginCumulativePercentage] ) ), DATEDIFF(RELATED('SCAGlobal'[SCA First Inventory Date]),NOW(),DAY) < 181), 12,",
              "    ISBLANK( RELATED( 'SCA Statistics'[NetGrossMarginCumulativePercentage] ) ), 11,",
              "    RELATED( 'SCA Statistics'[NetGrossMarginCumulativePercentage] ) > .9, 10,",
              "    RELATED( 'SCA Statistics'[NetGrossMarginCumulativePercentage] ) > .8, 9,",
              "    RELATED( 'SCA Statistics'[NetGrossMarginCumulativePercentage] ) > .7, 8,",
              "    RELATED( 'SCA Statistics'[NetGrossMarginCumulativePercentage] ) > .6, 7,",
              "    RELATED( 'SCA Statistics'[NetGrossMarginCumulativePercentage] ) > .5, 6,",
              "    RELATED( 'SCA Statistics'[NetGrossMarginCumulativePercentage] ) > .4, 5,",
              "    RELATED( 'SCA Statistics'[NetGrossMarginCumulativePercentage] ) > .3, 4,",
              "    RELATED( 'SCA Statistics'[NetGrossMarginCumulativePercentage] ) > .2, 3,",
              "    RELATED( 'SCA Statistics'[NetGrossMarginCumulativePercentage] ) > .1, 2,",
              "1",
              ")"
            ]
          },
          {
            "type": "calculated",
            "name": "SCA Division Rank Gross Margin",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "SWITCH(TRUE(),",
              "    RELATED('Business Hierarchy'[Division]) IN {\"HA Apparel\", \"HA Bras N Things\", \"HA Sheridan\",\"Champion Europe\", \"MFB Europe\"}, BLANK(),",
              "    RELATED('Business Hierarchy'[Division_Group]) = \"Hanes Europe\", BLANK(),",
              "    ISBLANK(RELATED( 'SCA Statistics'[NetGrossMarginRank] )), -1,",
              "    RELATED( 'SCA Statistics'[NetGrossMarginRank] )",
              ")"
            ]
          },
          {
            "type": "calculated",
            "name": "Chain Account SCAGlobal Distribution",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "VAR CountNumAccountTypes = ",
              "COUNTROWS(",
              "    CALCULATETABLE(",
              "        VALUES('SCA Customer'[SCAGlobal Quad]),",
              "        ALLEXCEPT('SCA Customer', 'SCA Customer'[Chain_Account_Desc_Bus_Id])",
              "    )",
              ")",
              "",
              "RETURN",
              "IF(CountNumAccountTypes = 2, \"T & B\", 'SCA Customer'[SCAGlobal Quad])"
            ]
          },
          {
            "name": "NetSalesDollars",
            "dataType": "double",
            "sourceColumn": "NetSalesDollars"
          },
          {
            "name": "NetGrossMarginDollars",
            "dataType": "double",
            "sourceColumn": "NetGrossMarginDollars"
          },
          {
            "type": "calculated",
            "name": "Chain Account Decile Gross Margin",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "SWITCH(TRUE(),",
              "    RELATED('Business Hierarchy'[Division]) IN {\"HA Apparel\", \"HA Bras N Things\", \"HA Sheridan\",\"Champion Europe\", \"MFB Europe\"}, BLANK(),",
              "    RELATED('Business Hierarchy'[Division_Group]) = \"Hanes Europe\", BLANK(),",
              "    ISBLANK( RELATED( 'Customer Decile'[NetGrossMarginCumulativePercentage] ) ), \"No Sales\",",
              "    RELATED( 'Customer Decile'[NetGrossMarginCumulativePercentage] ) > .9, \"10\",",
              "    RELATED( 'Customer Decile'[NetGrossMarginCumulativePercentage] ) > .8, \"9\",",
              "    RELATED( 'Customer Decile'[NetGrossMarginCumulativePercentage] ) > .7, \"8\",",
              "    RELATED( 'Customer Decile'[NetGrossMarginCumulativePercentage] ) > .6, \"7\",",
              "    RELATED( 'Customer Decile'[NetGrossMarginCumulativePercentage] ) > .5, \"6\",",
              "    RELATED( 'Customer Decile'[NetGrossMarginCumulativePercentage] ) > .4, \"5\",",
              "    RELATED( 'Customer Decile'[NetGrossMarginCumulativePercentage] ) > .3, \"4\",",
              "    RELATED( 'Customer Decile'[NetGrossMarginCumulativePercentage] ) > .2, \"3\",",
              "    RELATED( 'Customer Decile'[NetGrossMarginCumulativePercentage] ) > .1, \"2\",",
              "\"1\"",
              ")"
            ],
            "sortByColumn": "Chain Account Decile Sort Gross Margin"
          },
          {
            "type": "calculated",
            "name": "Chain Account Decile Sort Gross Margin",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "isHidden": true,
            "expression": [
              "",
              "SWITCH(TRUE(),",
              "    RELATED('Business Hierarchy'[Division]) IN {\"HA Apparel\", \"HA Bras N Things\", \"HA Sheridan\",\"Champion Europe\", \"MFB Europe\"}, BLANK(),",
              "    RELATED('Business Hierarchy'[Division_Group]) = \"Hanes Europe\", BLANK(),",
              "    ISBLANK( RELATED( 'Customer Decile'[NetGrossMarginCumulativePercentage] ) ), 11,",
              "    RELATED( 'Customer Decile'[NetGrossMarginCumulativePercentage] ) > .9, 10,",
              "    RELATED( 'Customer Decile'[NetGrossMarginCumulativePercentage] ) > .8, 9,",
              "    RELATED( 'Customer Decile'[NetGrossMarginCumulativePercentage] ) > .7, 8,",
              "    RELATED( 'Customer Decile'[NetGrossMarginCumulativePercentage] ) > .6, 7,",
              "    RELATED( 'Customer Decile'[NetGrossMarginCumulativePercentage] ) > .5, 6,",
              "    RELATED( 'Customer Decile'[NetGrossMarginCumulativePercentage] ) > .4, 5,",
              "    RELATED( 'Customer Decile'[NetGrossMarginCumulativePercentage] ) > .3, 4,",
              "    RELATED( 'Customer Decile'[NetGrossMarginCumulativePercentage] ) > .2, 3,",
              "    RELATED( 'Customer Decile'[NetGrossMarginCumulativePercentage] ) > .1, 2,",
              "1",
              ")"
            ]
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = Value.NativeQuery(#\"SQL Server HBIDW\", \"",
                "",
                ";With as_of_date_range As (",
                "\tSelect\td.AS_of_Date_INT",
                "\tFrom",
                "\t\t\t(",
                "\t\t\t\tSelect",
                "\t\t\t\t\t  w.AS_of_Date_INT",
                "\t\t\t\t\t, Row_Number() Over (Order By AS_of_Date_INT Desc) As w",
                "\t\t\t\tFrom",
                "\t\t\t\t\tHBIDW.dbo.Dim_Week w",
                "\t\t\t\tWhere",
                "\t\t\t\t\tw.AS_of_Date_INT <=",
                "\t\t\t\t(",
                "\t\t\t\t\tSelect\t\tMin(AS_of_Date_INT)",
                "\t\t\t\t\t\tFrom",
                "\t\t\t\t\t\t\t\tHBIDW.dbo.Dim_Week",
                "\t\t\t\t\t\tWhere",
                "\t\t\t\t\t\t\t\tCurr_Wk_Ind = 'Y'",
                "\t\t\t\t)",
                "\t\t\t) d",
                "\tWhere",
                "\t\t\tw <= 52",
                ")",
                "\t, scaGlobal As (",
                "\tSelect",
                "\t\t  product.Item_id",
                "\t\t, Case",
                "\t\t\tWhen product.Sbu_Desc = 'Socks' Then Concat(product.Selling_Style, '_', product.UPC_Code)",
                "\t\t\tWhen product.Sbu_Desc In ( 'HA Apparel', 'HA Sheridan', 'HA Bras N Things' ) Then Concat(product.Division_Desc, product.Style_Num, '_', product.Color_Code, '_', product.Attribution_Code) --HAA can have the same EAN between business units, so we use division desc to mimic how SKU count takes a count for each EAN in each BU; thus we only strip out size",
                "\t\t\tWhen product.Sbu_Desc = 'Champion Europe' Then Concat(product.Representative_Style_Num, '_', product.Color_Code)\t\t\t\t\t\t\t\t\t\t\t--rep style matches the style in the S3 SKU, which is the field used in SKU Count",
                "\t\t\tElse Concat(product.Style_Num, '_', product.Color_Code, '_', product.Attribution_Code)",
                "\t\tEnd As SCAGlobal",
                "\tFrom",
                "\t\tdbo.product_view product",
                ")",
                "\t, SCACustomer As (",
                "\tSelect",
                "\t\t\t\t  sca.SCAGlobal",
                "\t\t\t\t, sales.Dim_Customer_id",
                "\t\t\t\t, Case",
                "\t\t\t\t\t\tWhen Not profitcenter.profit_center Is Null Then profitcenter.business_seg_hierarchy_id",
                "\t\t\t\t\t\tElse IsNull(product.Business_Segment_Hierarchy_id, -2)",
                "\t\t\t\t\tEnd\t\t\t\t\t\t\t\t\t\t\t\t\t\tAs Business_Segment_Hierarchy_id",
                "\t\t\t\t, LTrim(RTrim(Coalesce(customer.Group_Desc, 'UNMAPPED')))\t\t\tAs Group_Desc",
                "\t\t\t\t, LTrim(RTrim(Coalesce(customer.Chain_Account_Desc, 'UNMAPPED')))\tAs Chain_Account_Desc",
                "\t\t\t\t, Sum(\tCase",
                "\t\t\t\t\t\t\tWhen sales.Dim_Measure_ID In (\t",
                "\t\t\t\t\t\t\t\t\t\t\t\t\t\t/*gross gross sales*/\t\t\t 22 ",
                "\t\t\t\t\t\t\t\t\t\t\t\t\t\t/*gross sales*/\t\t\t\t\t,2210 ,2220 ,2230 ,2240 ,2250",
                "\t\t\t\t\t\t\t\t\t\t\t\t\t\t/*adj to gross sales*/\t\t\t,23 ,24 ,25 ,26 ,2250 ,2310",
                "\t\t\t\t\t\t\t\t\t\t\t\t\t\t/*sales incentives*/\t\t\t,27 ,2713 ,2714 ,2801 ,2813 ,2814 ,2815 ,29 ,2901 ,30 ,3012 ,31 ,3112 ,3114 ,3116 ,3132 ,32 ,3201\t",
                "\t\t\t\t\t\t\t\t\t\t\t\t\t\t--not included /*royalty income*/\t\t\t,34 ",
                "\t\t\t\t\t\t\t\t\t\t\t\t\t\t--not included /*intercompany net sales*/\t,35 ",
                "\t\t\t\t\t\t\t\t\t\t\t\t\t\t) Then sales.local_dollars * currency.PegRate --Net Sales less royalty and intercompany",
                "\t\t\t\t\t\tEnd",
                "\t\t\t\t\t)\t\t\t\t\t\t\t\t\t\t\tAs NetSalesDollars",
                "\t\t\t\t, Sum(\tCase",
                "\t\t\t\t\t\t\tWhen sales.Dim_Measure_ID In (\t",
                "\t\t\t\t\t\t\t\t\t\t\t\t\t\t/*gross gross sales*/\t\t\t 22 ",
                "\t\t\t\t\t\t\t\t\t\t\t\t\t\t/*gross sales*/\t\t\t\t\t,2210 ,2220 ,2230 ,2240 ,2250",
                "\t\t\t\t\t\t\t\t\t\t\t\t\t\t/*adj to gross sales*/\t\t\t,23 ,24 ,25 ,26 ,2250 ,2310",
                "\t\t\t\t\t\t\t\t\t\t\t\t\t\t/*sales incentives*/\t\t\t,27 ,2713 ,2714 ,2801 ,2813 ,2814 ,2815 ,29 ,2901 ,30 ,3012 ,31 ,3112 ,3114 ,3116 ,3132 ,32 ,3201\t",
                "\t\t\t\t\t\t\t\t\t\t\t\t\t\t--not included /*royalty income*/\t\t\t,34 ",
                "\t\t\t\t\t\t\t\t\t\t\t\t\t\t--not included /*intercompany net sales*/\t,35 ",
                "\t\t\t\t\t\t\t\t\t\t\t\t\t",
                "\t\t\t\t\t\t\t\t\t\t\t\t\t) Then sales.local_dollars * currency.PegRate --Net Sales less royalty and intercompany",
                "",
                "\t\t\t\t\t\t\tWhen sales.Dim_Measure_ID In (\t",
                "\t\t\t\t\t\t\t\t\t\t\t\t\t\t/*OS COGS*/\t\t\t\t\t\t 38 ",
                "\t\t\t\t\t\t\t\t\t\t\t\t\t\t/*Adj to OS COGS*/\t\t\t\t,40 ,41 ,47",
                "\t\t\t\t\t\t\t\t\t\t\t\t\t\t/*adj to gross sales*/\t\t\t,23 ,24 ,25 ,26 ,2250 ,2310",
                "\t\t\t\t\t\t\t\t\t\t\t\t\t\t/*sales incentives cost*/\t\t,45",
                "\t\t\t\t\t\t\t\t\t\t\t\t\t\t--not included /*royalty expense*/\t\t,48",
                "\t\t\t\t\t\t\t\t\t\t\t\t\t\t--not included /*intercompany SCOGS*/\t,39",
                "\t\t\t\t\t\t\t\t\t\t\t\t\t\t--not included /*Reserve*/\t\t\t\t,42 ",
                "\t\t\t\t\t\t\t\t\t\t\t\t\t",
                "\t\t\t\t\t\t\t\t\t\t\t\t\t) Then (sales.local_dollars * currency.PegRate) * -1 --SCOGS less royalty and intercompany",
                "\t\t\t\t\t\tEnd",
                "\t\t\t\t\t)\t\t\t\t\t\t\t\t\t\t\tAs NetGrossMarginDollars",
                "",
                "\tFrom",
                "\t\t\t\t\t\tHBIDW.dbo.fact_sales_sku\tsales",
                "\t\tJoin\t\t\tscaGlobal\t\t\t\t\tsca\t\t\t\t\t\tOn sca.Item_id\t\t\t\t\t\t= sales.Dim_item_id",
                "\t\tJoin\t\t\tHBIDW.dbo.Dim_Customer\t\tcustomer\t\t\t\tOn customer.Dim_Customer_ID\t\t\t= sales.Dim_Customer_id",
                "\t\tLeft Outer Join dbo.product_view\t\t\tproduct With (NoExpand)\tOn sales.Dim_item_id\t\t\t\t= product.Dim_Item_id",
                "\t\tLeft Outer Join EDM.dbo.profit_center\t\tprofitcenter\t\t\tOn Cast(sales.Profit_Center As Int)\t= profitcenter.profit_center",
                "\t\tLeft Join",
                "\t\t\t\t(",
                "\t\t\t\t\tSelect\t*",
                "\t\t\t\t\tFrom",
                "\t\t\t\t\t\t\tEDM.dbo.Peg_Rate",
                "\t\t\t\t\tWhere",
                "\t\t\t\t\t\t\tYear =",
                "\t\t\t\t\t(",
                "\t\t\t\t\t\tSelect\t\tMin(Fiscal_Yr)From HBIDW.dbo.Dim_Week Where Curr_Wk_Ind = 'Y'",
                "\t\t\t\t\t)",
                "\t\t\t\t)\t\t\t\t\t\t\tcurrency\tOn sales.Currency\t\t\t\t= currency.Currency",
                "",
                "\tWhere",
                "\t\tExists ( Select Null From as_of_date_range rng Where rng.AS_of_Date_INT = sales.As_of_Date_int )",
                "\t\tAnd sales.Dim_Measure_ID In ( 22 ,2210 ,2220 ,2230 ,2240 ,2250 ,23 ,24 ,25 ,26 ,2250 ,2310 ,27 ,2713 ,2714 ,2801 ,2813 ,2814 ,2815 ,29 ,2901 ,30 ,3012 ,31 ,3112 ,3114 ,3116 ,3132 ,32 ,3201 ,38 ,40 ,41 ,47 ,23 ,24 ,25 ,26 ,2250 ,2310 ,45 )",
                "",
                "\tGroup By",
                "\t\t\t\t  sca.SCAGlobal",
                "\t\t\t\t, sales.Dim_Customer_id",
                "\t\t\t\t, Case",
                "\t\t\t\t\t\tWhen Not profitcenter.profit_center Is Null Then profitcenter.business_seg_hierarchy_id",
                "\t\t\t\t\t\tElse IsNull(product.Business_Segment_Hierarchy_id, -2)",
                "\t\t\t\t\tEnd\t",
                "\t\t\t\t, LTrim(RTrim(Coalesce(customer.Group_Desc, 'UNMAPPED')))",
                "\t\t\t\t, LTrim(RTrim(Coalesce(customer.Chain_Account_Desc, 'UNMAPPED')))",
                "",
                ")",
                "\t, ParentAccountRank As (",
                "\tSelect",
                "\t\t  scacustomer.Group_Desc",
                "\t\t, scacustomer.SCAGlobal",
                "\t\t, Rank() Over (Partition By scacustomer.SCAGlobal",
                "\t\t\t\t\tOrder By",
                "\t\t\t\t\t\tSum(scacustomer.NetSalesDollars) Desc",
                "\t\t\t\t\t) As CustomerRank",
                "\tFrom",
                "\t\tSCACustomer scacustomer",
                "\tGroup By",
                "\t\t  scacustomer.Group_Desc",
                "\t\t, scacustomer.SCAGlobal",
                ")",
                "",
                "Select",
                "\t\t\t\t  scacustomer.SCAGlobal",
                "\t\t\t\t, scacustomer.Dim_Customer_id",
                "\t\t\t\t, scacustomer.Business_Segment_Hierarchy_id",
                "\t\t\t\t, scacustomer.Group_Desc",
                "\t\t\t\t, scacustomer.Chain_Account_Desc",
                "\t\t\t\t, Concat(scacustomer.Chain_Account_Desc, '_', scacustomer.Business_Segment_Hierarchy_id) As Chain_Account_Desc_Bus_Id",
                "\t\t\t\t, Concat(scacustomer.SCAGlobal, '_', scacustomer.Business_Segment_Hierarchy_id) As SCAGlobal_Bus_Id",
                "\t\t\t\t, rnk.CustomerRank",
                "\t\t\t\t, scacustomer.NetSalesDollars",
                "\t\t\t\t, scacustomer.NetGrossMarginDollars",
                "",
                "From",
                "\t\t\t\tSCACustomer\t\t\tscacustomer",
                "\tLeft Join\tParentAccountRank\trnk On rnk.SCAGlobal\t\t= scacustomer.SCAGlobal",
                "\t\t\t\t\t\t\t\t\t\t\tAnd rnk.Group_Desc\t= scacustomer.Group_Desc;",
                "",
                "",
                "",
                "",
                "",
                "",
                "\")",
                "in",
                "    Source"
              ]
            }
          }
        ],
        "measures": [
          {
            "name": "SCA Customer Net Sales Dollars",
            "expression": " SUM('SCA Customer'[NetSalesDollars])",
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "SCA Customer Net Gross Margin Dollars",
            "expression": " SUM('SCA Customer'[NetGrossMarginDollars])",
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "SCA Customer SCA Count",
            "expression": [
              " ",
              "DISTINCTCOUNT('SCA Customer'[SCAGlobal])"
            ],
            "formatString": "#,0"
          },
          {
            "name": "SCA TT Net Gross Margin $",
            "expression": [
              " ",
              " CALCULATE(",
              "        [SCA Customer Net Gross Margin Dollars],",
              "        'SCA Customer'[Chain Account Quad] = \"T\",",
              "        'SCA Customer'[SCAGlobal Quad] = \"T\"",
              "    )"
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "SCA TB Net Gross Margin $",
            "expression": [
              " ",
              " CALCULATE(",
              "        [SCA Customer Net Gross Margin Dollars],",
              "        'SCA Customer'[Chain Account Quad] = \"T\",",
              "        'SCA Customer'[SCAGlobal Quad] = \"B\"",
              "    )"
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "SCA BT Net Gross Margin $",
            "expression": [
              " ",
              " CALCULATE(",
              "        [SCA Customer Net Gross Margin Dollars],",
              "        'SCA Customer'[Chain Account Quad] = \"B\",",
              "        'SCA Customer'[SCAGlobal Quad] = \"T\"",
              "    )"
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "SCA BB Net Gross Margin $",
            "expression": [
              " ",
              " CALCULATE(",
              "        [SCA Customer Net Gross Margin Dollars],",
              "        'SCA Customer'[Chain Account Quad] = \"B\",",
              "        'SCA Customer'[SCAGlobal Quad] = \"B\"",
              "    )"
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "SCA TT Net Gross Margin %",
            "expression": [
              " ",
              "DIVIDE([SCA TT Net Gross Margin $], [SCA Customer Net Gross Margin Dollars])"
            ],
            "formatString": "0%;-0%;0%"
          },
          {
            "name": "SCA TB Net Gross Margin %",
            "expression": [
              " ",
              "DIVIDE([SCA TB Net Gross Margin $], [SCA Customer Net Gross Margin Dollars])"
            ],
            "formatString": "0%;-0%;0%"
          },
          {
            "name": "SCA BT Net Gross Margin %",
            "expression": [
              " ",
              "DIVIDE([SCA BT Net Gross Margin $], [SCA Customer Net Gross Margin Dollars])"
            ],
            "formatString": "0%;-0%;0%"
          },
          {
            "name": "SCA BB Net Gross Margin %",
            "expression": [
              " ",
              "DIVIDE([SCA BB Net Gross Margin $], [SCA Customer Net Gross Margin Dollars])"
            ],
            "formatString": "0%;-0%;0%"
          },
          {
            "name": "SCA TT Net Sales $",
            "expression": [
              " ",
              " CALCULATE(",
              "        [SCA Customer Net Sales Dollars],",
              "        'SCA Customer'[Chain Account Quad] = \"T\",",
              "        'SCA Customer'[SCAGlobal Quad] = \"T\"",
              "    )"
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "SCA TB Net Sales $",
            "expression": [
              " ",
              " CALCULATE(",
              "        [SCA Customer Net Sales Dollars],",
              "        'SCA Customer'[Chain Account Quad] = \"T\",",
              "        'SCA Customer'[SCAGlobal Quad] = \"B\"",
              "    )"
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "SCA BT Net Sales $",
            "expression": [
              " ",
              " CALCULATE(",
              "        [SCA Customer Net Sales Dollars],",
              "        'SCA Customer'[Chain Account Quad] = \"B\",",
              "        'SCA Customer'[SCAGlobal Quad] = \"T\"",
              "    )"
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "SCA BB Net Sales $",
            "expression": [
              " ",
              " CALCULATE(",
              "        [SCA Customer Net Sales Dollars],",
              "        'SCA Customer'[Chain Account Quad] = \"B\",",
              "        'SCA Customer'[SCAGlobal Quad] = \"B\"",
              "    )"
            ],
            "formatString": "\\$#,0;(\\$#,0);\\$#,0",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"Currency\"><Currency LCID=\"1033\" DisplayName=\"$ English (United States)\" Symbol=\"$\" PositivePattern=\"0\" NegativePattern=\"0\" /></Format>"
              }
            ]
          },
          {
            "name": "SCA TT Net Sales %",
            "expression": [
              " ",
              "DIVIDE([SCA TT Net Sales $], [SCA Customer Net Sales Dollars])"
            ],
            "formatString": "0%;-0%;0%"
          },
          {
            "name": "SCA TB Net Sales %",
            "expression": [
              " ",
              "DIVIDE([SCA TB Net Sales $], [SCA Customer Net Sales Dollars])"
            ],
            "formatString": "0%;-0%;0%"
          },
          {
            "name": "SCA BT Net Sales %",
            "expression": [
              " ",
              "DIVIDE([SCA BT Net Sales $], [SCA Customer Net Sales Dollars])"
            ],
            "formatString": "0%;-0%;0%"
          },
          {
            "name": "SCA BB Net Sales %",
            "expression": [
              " ",
              "DIVIDE([SCA BB Net Sales $], [SCA Customer Net Sales Dollars])"
            ],
            "formatString": "0%;-0%;0%"
          },
          {
            "name": "SCA TT SCA Count",
            "expression": [
              " ",
              " CALCULATE(",
              "        [SCA Customer SCA Count],",
              "        'SCA Customer'[SCAGlobal Chain Account Distribution] = \"T\",",
              "        'SCA Customer'[SCAGlobal Quad] = \"T\"",
              "    )"
            ],
            "formatString": "#,0"
          },
          {
            "name": "SCA TB SCA Count",
            "expression": [
              " ",
              " CALCULATE(",
              "        [SCA Customer SCA Count],",
              "        'SCA Customer'[SCAGlobal Chain Account Distribution] = \"T\",",
              "        'SCA Customer'[SCAGlobal Quad] = \"B\"",
              "    )"
            ],
            "formatString": "#,0"
          },
          {
            "name": "SCA BT SCA Count",
            "expression": [
              " ",
              " CALCULATE(",
              "        [SCA Customer SCA Count],",
              "        'SCA Customer'[SCAGlobal Chain Account Distribution] = \"B\",",
              "        'SCA Customer'[SCAGlobal Quad] = \"T\"",
              "    )"
            ],
            "formatString": "#,0"
          },
          {
            "name": "SCA BB SCA Count",
            "expression": [
              " ",
              " CALCULATE(",
              "        [SCA Customer SCA Count],",
              "        'SCA Customer'[SCAGlobal Chain Account Distribution] = \"B\",",
              "        'SCA Customer'[SCAGlobal Quad] = \"B\"",
              "    )"
            ],
            "formatString": "#,0"
          },
          {
            "name": "SCA TT SCA Count %",
            "expression": [
              " ",
              "DIVIDE('SCA Customer'[SCA TT SCA Count], 'SCA Customer'[SCA Customer SCA Count])"
            ],
            "formatString": "0%;-0%;0%"
          },
          {
            "name": "SCA TB SCA Count %",
            "expression": [
              " ",
              "DIVIDE('SCA Customer'[SCA TB SCA Count], 'SCA Customer'[SCA Customer SCA Count])"
            ],
            "formatString": "0%;-0%;0%"
          },
          {
            "name": "SCA BT SCA Count %",
            "expression": [
              " ",
              "DIVIDE('SCA Customer'[SCA BT SCA Count], 'SCA Customer'[SCA Customer SCA Count])"
            ],
            "formatString": "0%;-0%;0%"
          },
          {
            "name": "SCA BB SCA Count %",
            "expression": [
              " ",
              "DIVIDE('SCA Customer'[SCA BB SCA Count], 'SCA Customer'[SCA Customer SCA Count])"
            ],
            "formatString": "0%;-0%;0%"
          },
          {
            "name": "SCA T&B T SCA Count",
            "expression": [
              " ",
              " CALCULATE(",
              "        [SCA Customer SCA Count],",
              "        'SCA Customer'[SCAGlobal Chain Account Distribution] = \"T & B\",",
              "        'SCA Customer'[SCAGlobal Quad] = \"T\"",
              "    )"
            ],
            "formatString": "#,0"
          },
          {
            "name": "SCA T&B B SCA Count",
            "expression": [
              " ",
              " CALCULATE(",
              "        [SCA Customer SCA Count],",
              "        'SCA Customer'[SCAGlobal Chain Account Distribution] = \"T & B\",",
              "        'SCA Customer'[SCAGlobal Quad] = \"B\"",
              "    )"
            ],
            "formatString": "#,0"
          },
          {
            "name": "SCA T&B T SCA Count %",
            "expression": [
              " ",
              "DIVIDE('SCA Customer'[SCA T&B T SCA Count], 'SCA Customer'[SCA Customer SCA Count])"
            ],
            "formatString": "0%;-0%;0%"
          },
          {
            "name": "SCA T&B B SCA Count %",
            "expression": [
              " ",
              "DIVIDE('SCA Customer'[SCA T&B B SCA Count], 'SCA Customer'[SCA Customer SCA Count])"
            ],
            "formatString": "0%;-0%;0%"
          },
          {
            "name": "SCA Customer Chain Account Count",
            "expression": [
              " ",
              "DISTINCTCOUNT('SCA Customer'[Chain_Account_Desc])"
            ],
            "formatString": "#,0"
          },
          {
            "name": "SCA TT Chain Account Count",
            "expression": [
              " ",
              " CALCULATE(",
              "        [SCA Customer Chain Account Count],",
              "        'SCA Customer'[Chain Account SCAGlobal Distribution] = \"T\",",
              "        'SCA Customer'[Chain Account Quad] = \"T\"",
              "    )"
            ],
            "formatString": "#,0"
          },
          {
            "name": "SCA TT Chain Account Count %",
            "expression": [
              " ",
              "DIVIDE('SCA Customer'[SCA TT Chain Account Count], 'SCA Customer'[SCA Customer Chain Account Count])\t"
            ],
            "formatString": "0.00%;-0.00%;0.00%"
          },
          {
            "name": "SCA TB Chain Account Count",
            "expression": [
              " ",
              " CALCULATE(",
              "        [SCA Customer Chain Account Count],",
              "        'SCA Customer'[Chain Account SCAGlobal Distribution] = \"T\",",
              "        'SCA Customer'[Chain Account Quad] = \"B\"",
              "    )"
            ],
            "formatString": "#,0"
          },
          {
            "name": "SCA TB Chain Account Count %",
            "expression": [
              " ",
              "DIVIDE('SCA Customer'[SCA TB Chain Account Count], 'SCA Customer'[SCA Customer Chain Account Count])"
            ],
            "formatString": "0.00%;-0.00%;0.00%"
          },
          {
            "name": "SCA BT Chain Account Count",
            "expression": [
              " ",
              " CALCULATE(",
              "        [SCA Customer Chain Account Count],",
              "        'SCA Customer'[Chain Account SCAGlobal Distribution] = \"B\",",
              "        'SCA Customer'[Chain Account Quad] = \"T\"",
              "    )"
            ],
            "formatString": "#,0"
          },
          {
            "name": "SCA BT Chain Account Count %",
            "expression": [
              " ",
              "DIVIDE('SCA Customer'[SCA BT Chain Account Count], 'SCA Customer'[SCA Customer Chain Account Count])"
            ],
            "formatString": "0.00%;-0.00%;0.00%"
          },
          {
            "name": "SCA BB Chain Account Count",
            "expression": [
              " ",
              " CALCULATE(",
              "        [SCA Customer Chain Account Count],",
              "        'SCA Customer'[Chain Account SCAGlobal Distribution] = \"B\",",
              "        'SCA Customer'[Chain Account Quad] = \"B\"",
              "    )"
            ],
            "formatString": "#,0"
          },
          {
            "name": "SCA BB Chain Account Count %",
            "expression": [
              " ",
              "DIVIDE('SCA Customer'[SCA BB Chain Account Count], 'SCA Customer'[SCA Customer Chain Account Count])"
            ],
            "formatString": "0.00%;-0.00%;0.00%"
          },
          {
            "name": "SCA T&B B Chain Account Count",
            "expression": [
              " ",
              " CALCULATE(",
              "        [SCA Customer Chain Account Count],",
              "        'SCA Customer'[Chain Account SCAGlobal Distribution] = \"T & B\",",
              "        'SCA Customer'[Chain Account Quad] = \"B\"",
              "    )"
            ],
            "formatString": "#,0"
          },
          {
            "name": "SCA T&B B Chain Account Count %",
            "expression": [
              " ",
              "DIVIDE('SCA Customer'[SCA T&B B Chain Account Count], 'SCA Customer'[SCA Customer Chain Account Count])"
            ],
            "formatString": "0.00%;-0.00%;0.00%"
          },
          {
            "name": "SCA T&B T Chain Account Count",
            "expression": [
              " ",
              " CALCULATE(",
              "        [SCA Customer Chain Account Count],",
              "        'SCA Customer'[Chain Account SCAGlobal Distribution] = \"T & B\",",
              "        'SCA Customer'[Chain Account Quad] = \"T\"",
              "    )"
            ],
            "formatString": "#,0"
          },
          {
            "name": "SCA T&B T Chain Account Count %",
            "expression": [
              " ",
              "DIVIDE('SCA Customer'[SCA T&B T Chain Account Count], 'SCA Customer'[SCA Customer Chain Account Count])"
            ],
            "formatString": "0.00%;-0.00%;0.00%"
          }
        ]
      },
      {
        "name": "Customer Decile",
        "columns": [
          {
            "name": "Chain_Account_Desc_Bus_Id",
            "dataType": "string",
            "sourceColumn": "Chain_Account_Desc_Bus_Id"
          },
          {
            "name": "Chain_Account_Desc",
            "dataType": "string",
            "sourceColumn": "Chain_Account_Desc"
          },
          {
            "name": "Business_Segment_Hierarchy_id",
            "dataType": "int64",
            "sourceColumn": "Business_Segment_Hierarchy_id"
          },
          {
            "name": "RawNetSalesDollars",
            "dataType": "double",
            "sourceColumn": "RawNetSalesDollars"
          },
          {
            "name": "NetSalesDollars",
            "dataType": "double",
            "sourceColumn": "NetSalesDollars"
          },
          {
            "name": "NetSalesCumulative",
            "dataType": "double",
            "sourceColumn": "NetSalesCumulative"
          },
          {
            "name": "NetSalesTotal",
            "dataType": "double",
            "sourceColumn": "NetSalesTotal"
          },
          {
            "name": "NetSalesCumulativePercentage",
            "dataType": "double",
            "sourceColumn": "NetSalesCumulativePercentage"
          },
          {
            "name": "NetSalesRank",
            "dataType": "int64",
            "sourceColumn": "NetSalesRank"
          },
          {
            "name": "RawNetGrossMarginDollars",
            "dataType": "double",
            "sourceColumn": "RawNetGrossMarginDollars"
          },
          {
            "name": "NetGrossMarginDollars",
            "dataType": "double",
            "sourceColumn": "NetGrossMarginDollars"
          },
          {
            "name": "NetGrossMarginCumulative",
            "dataType": "double",
            "sourceColumn": "NetGrossMarginCumulative"
          },
          {
            "name": "NetGrossMarginTotal",
            "dataType": "double",
            "sourceColumn": "NetGrossMarginTotal"
          },
          {
            "name": "NetGrossMarginCumulativePercentage",
            "dataType": "double",
            "sourceColumn": "NetGrossMarginCumulativePercentage"
          },
          {
            "name": "NetGrossMarginRank",
            "dataType": "int64",
            "sourceColumn": "NetGrossMarginRank"
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = Value.NativeQuery(#\"SQL Server HBIDW\", \"",
                "",
                "",
                ";With as_of_date_range As (",
                "\tSelect\td.AS_of_Date_INT",
                "\tFrom",
                "\t\t\t(",
                "\t\t\t\tSelect",
                "\t\t\t\t\tw.AS_of_Date_INT",
                "\t\t\t\t\t, Row_Number() Over (Order By AS_of_Date_INT Desc) As w",
                "\t\t\t\tFrom",
                "\t\t\t\t\tHBIDW.dbo.Dim_Week w",
                "\t\t\t\tWhere",
                "\t\t\t\t\tw.AS_of_Date_INT <=",
                "\t\t\t\t(",
                "\t\t\t\t\tSelect\t\tMin(AS_of_Date_INT)",
                "\t\t\t\t\t\tFrom",
                "\t\t\t\t\t\t\t\tHBIDW.dbo.Dim_Week",
                "\t\t\t\t\t\tWhere",
                "\t\t\t\t\t\t\t\tCurr_Wk_Ind = 'Y'",
                "\t\t\t\t)",
                "\t\t\t) d",
                "\tWhere",
                "\t\t\tw <= 52",
                ")",
                "",
                "\t, CustomerDivisionSales As (",
                "\tSelect",
                "\t\t\t\t  LTrim(RTrim(Coalesce(customer.Chain_Account_Desc, 'UNMAPPED'))) As Chain_Account_Desc",
                "\t\t\t\t, Case --using the logic for fact_sales_div_vw without sacrificing the poor performance of the view",
                "\t\t\t\t\t\tWhen Not pc.profit_center Is Null Then pc.business_seg_hierarchy_id",
                "\t\t\t\t\t\tElse st.Business_Segment_Hierarchy_id",
                "\t\t\t\t\tEnd\t\t\t\t\t\t\tAs Business_Segment_Hierarchy_id",
                "\t\t\t\t, Sum(\tCase",
                "\t\t\t\t\t\t\tWhen sales.Dim_Measure_ID In (\t",
                "\t\t\t\t\t\t\t\t\t\t\t\t\t\t/*gross gross sales*/\t\t\t 22 ",
                "\t\t\t\t\t\t\t\t\t\t\t\t\t\t/*gross sales*/\t\t\t\t\t,2210 ,2220 ,2230 ,2240 ,2250",
                "\t\t\t\t\t\t\t\t\t\t\t\t\t\t/*adj to gross sales*/\t\t\t,23 ,24 ,25 ,26 ,2250 ,2310",
                "\t\t\t\t\t\t\t\t\t\t\t\t\t\t/*sales incentives*/\t\t\t,27 ,2713 ,2714 ,2801 ,2813 ,2814 ,2815 ,29 ,2901 ,30 ,3012 ,31 ,3112 ,3114 ,3116 ,3132 ,32 ,3201\t",
                "\t\t\t\t\t\t\t\t\t\t\t\t\t\t--not included /*royalty income*/\t\t\t,34 ",
                "\t\t\t\t\t\t\t\t\t\t\t\t\t\t--not included /*intercompany net sales*/\t,35 ",
                "\t\t\t\t\t\t\t\t\t\t\t\t\t\t) Then sales.Amount --Net Sales less royalty and intercompany",
                "\t\t\t\t\t\tEnd",
                "\t\t\t\t\t)\t\t\t\t\t\t\t\t\t\t\tAs NetSalesDollars",
                "\t\t\t\t, Sum(\tCase",
                "\t\t\t\t\t\t\tWhen sales.Dim_Measure_ID In (\t",
                "\t\t\t\t\t\t\t\t\t\t\t\t\t\t/*gross gross sales*/\t\t\t 22 ",
                "\t\t\t\t\t\t\t\t\t\t\t\t\t\t/*gross sales*/\t\t\t\t\t,2210 ,2220 ,2230 ,2240 ,2250",
                "\t\t\t\t\t\t\t\t\t\t\t\t\t\t/*adj to gross sales*/\t\t\t,23 ,24 ,25 ,26 ,2250 ,2310",
                "\t\t\t\t\t\t\t\t\t\t\t\t\t\t/*sales incentives*/\t\t\t,27 ,2713 ,2714 ,2801 ,2813 ,2814 ,2815 ,29 ,2901 ,30 ,3012 ,31 ,3112 ,3114 ,3116 ,3132 ,32 ,3201\t",
                "\t\t\t\t\t\t\t\t\t\t\t\t\t\t--not included /*royalty income*/\t\t\t,34 ",
                "\t\t\t\t\t\t\t\t\t\t\t\t\t\t--not included /*intercompany net sales*/\t,35 ",
                "\t\t\t\t\t\t\t\t\t\t\t\t\t",
                "\t\t\t\t\t\t\t\t\t\t\t\t\t) Then sales.Amount --Net Sales less royalty and intercompany",
                "",
                "\t\t\t\t\t\t\tWhen sales.Dim_Measure_ID In (\t",
                "\t\t\t\t\t\t\t\t\t\t\t\t\t\t/*OS COGS*/\t\t\t\t\t\t 38 ",
                "\t\t\t\t\t\t\t\t\t\t\t\t\t\t/*Adj to OS COGS*/\t\t\t\t,40 ,41 ,47",
                "\t\t\t\t\t\t\t\t\t\t\t\t\t\t/*adj to gross sales*/\t\t\t,23 ,24 ,25 ,26 ,2250 ,2310",
                "\t\t\t\t\t\t\t\t\t\t\t\t\t\t/*sales incentives cost*/\t\t,45",
                "\t\t\t\t\t\t\t\t\t\t\t\t\t\t--not included /*royalty expense*/\t\t,48",
                "\t\t\t\t\t\t\t\t\t\t\t\t\t\t--not included /*intercompany SCOGS*/\t,39",
                "\t\t\t\t\t\t\t\t\t\t\t\t\t\t--not included /*Reserve*/\t\t\t\t,42 ",
                "\t\t\t\t\t\t\t\t\t\t\t\t\t",
                "\t\t\t\t\t\t\t\t\t\t\t\t\t) Then (sales.Amount) * -1 --SCOGS less royalty and intercompany",
                "\t\t\t\t\t\tEnd",
                "\t\t\t\t\t)\t\t\t\t\t\t\t\t\t\t\tAs NetGrossMarginDollars",
                "",
                "",
                "\tFrom",
                "\t\t\t\t\t\t\tSamba.fact_sales\t\t\t\t\t\t\tsales",
                "\t\tJoin\t\t\t\tHBIDW.dbo.Dim_Customer\t\t\t\t\t\tcustomer\tOn customer.Dim_Customer_ID\t\t\t\t\t= sales.Dim_Customer_ID",
                "\t\tJoin\t\t\t\tEDM.dbo.Business_Seg_Hierarchy_Samba_DIV_vw business\tOn business.business_seg_hierarchy_id\t\t= sales.Business_Segment_Hierarchy_id",
                "\t\tLeft Outer Join\t\tdbo.Dim_Style\t\t\t\t\t\t\t\tst\t\t\tOn sales.Dim_Style_ID\t\t\t\t\t\t= st.Dim_Style_Id",
                "\t\tLeft Outer Join\t\tEDM.dbo.profit_center\t\t\t\t\t\tpc\t\t\tOn Cast(sales.Profit_Center_Code As Int)\t= pc.profit_center",
                "",
                "\tWhere",
                "\t\tExists\t( Select Null From as_of_date_range rng Where rng.AS_of_Date_INT = sales.As_of_Date_INT\t)",
                "\t\tAnd sales.Dim_Measure_ID In ( 22 ,2210 ,2220 ,2230 ,2240 ,2250 ,23 ,24 ,25 ,26 ,2250 ,2310 ,27 ,2713 ,2714 ,2801 ,2813 ,2814 ,2815 ,29 ,2901 ,30 ,3012 ,31 ,3112 ,3114 ,3116 ,3132 ,32 ,3201 ,38 ,40 ,41 ,47 ,23 ,24 ,25 ,26 ,2250 ,2310 ,45 )",
                "",
                "",
                "",
                "\tGroup By",
                "\t\t\t\t  LTrim(RTrim(Coalesce(customer.Chain_Account_Desc, 'UNMAPPED')))",
                "\t\t\t\t, Case",
                "\t\t\t\t\t\tWhen Not pc.profit_center Is Null Then pc.business_seg_hierarchy_id",
                "\t\t\t\t\t\tElse st.Business_Segment_Hierarchy_id",
                "\t\t\t\t\tEnd",
                "",
                ")",
                "\t, CustomerDivisionSalesNoNegatives As (",
                "\tSelect",
                "\t\t  Cust.NetSalesDollars\tAs RawNetSalesDollars",
                "\t\t, cust.NetGrossMarginDollars As RawNetGrossMarginDollars",
                "\t\t, Cust.Chain_Account_Desc",
                "\t\t, Cust.Business_Segment_Hierarchy_id",
                "\t\t, Case",
                "\t\t\tWhen IsNull(Cust.NetSalesDollars, 0) < 0 Then 0",
                "\t\t\tElse Cust.NetSalesDollars",
                "\t\tEnd\t\t\t\tAs NetSalesDollars",
                "\t\t, Case",
                "\t\t\tWhen IsNull(Cust.NetGrossMarginDollars, 0) < 0 Then 0",
                "\t\t\tElse Cust.NetGrossMarginDollars",
                "\t\tEnd\t\t\t\tAs NetGrossMarginDollars",
                "",
                "\tFrom",
                "\t\tCustomerDivisionSales Cust",
                ")",
                "",
                "Select",
                "\t  Concat(final.Chain_Account_Desc, '_', final.Business_Segment_Hierarchy_id) As Chain_Account_Desc_Bus_Id",
                "\t, final.Chain_Account_Desc",
                "\t, final.Business_Segment_Hierarchy_id",
                "\t",
                "\t/*Net Sales*/",
                "\t, final.RawNetSalesDollars",
                "\t, final.NetSalesDollars",
                "\t, Sum(final.NetSalesDollars) Over (Partition By final.Business_Segment_Hierarchy_id Order By final.NetSalesDollars Desc )\t\t\t\tAs NetSalesCumulative",
                "\t, Sum(final.RawNetSalesDollars) Over (Partition By final.Business_Segment_Hierarchy_id)\t\t\t\t\t\t\t\t\t\t\t\t\tAs NetSalesTotal",
                "\t, Case",
                "\t\tWhen Sum(final.NetSalesDollars) = 0 Then 1 --set percentile to 100 for negative sales/margin",
                "\t\tWhen Sum(final.NetSalesDollars) Over (Partition By final.Business_Segment_Hierarchy_id) = 0 Then 1 --set percentile to 100 for businesses with negative sales/margin",
                "\t\tElse Sum(final.NetSalesDollars) Over (Partition By final.Business_Segment_Hierarchy_id Order By final.NetSalesDollars Desc) / Sum(final.RawNetSalesDollars) Over (Partition By final.Business_Segment_Hierarchy_id) --change denominator to raw net sales -Nathan on 4/18/22",
                "\tEnd\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAs NetSalesCumulativePercentage",
                "\t, Rank() Over (Partition By final.Business_Segment_Hierarchy_id Order By final.NetSalesDollars Desc)\t\t\t\t\t\t\t\t\tAs NetSalesRank",
                "",
                "\t/*Net Gross Margin*/",
                "\t, final.RawNetGrossMarginDollars",
                "\t, final.NetGrossMarginDollars",
                "\t, Sum(final.NetGrossMarginDollars) Over (Partition By final.Business_Segment_Hierarchy_id Order By final.NetGrossMarginDollars Desc )\tAs NetGrossMarginCumulative",
                "\t, Sum(final.RawNetGrossMarginDollars) Over (Partition By final.Business_Segment_Hierarchy_id)\t\t\t\t\t\t\t\t\t\t\t\tAs NetGrossMarginTotal",
                "\t, Case",
                "\t\tWhen Sum(final.NetGrossMarginDollars) = 0 Then 1 --set percentile to 100 for negative sales/margin",
                "\t\tWhen Sum(final.NetGrossMarginDollars) Over (Partition By final.Business_Segment_Hierarchy_id) = 0 Then 1 --set percentile to 100 for businesses with negative sales/margin",
                "\t\tElse Sum(final.NetGrossMarginDollars) Over (Partition By final.Business_Segment_Hierarchy_id Order By final.NetGrossMarginDollars Desc) / Sum(final.RawNetGrossMarginDollars) Over (Partition By final.Business_Segment_Hierarchy_id) --change denominator to raw net sales -Nathan on 4/18/22",
                "\tEnd\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAs NetGrossMarginCumulativePercentage",
                "\t, Rank() Over (Partition By final.Business_Segment_Hierarchy_id Order By final.NetGrossMarginDollars Desc)\t\t\t\t\t\t\t\tAs NetGrossMarginRank",
                "",
                "From",
                "\tCustomerDivisionSalesNoNegatives final",
                "",
                "Group By",
                "\t  Concat(final.Chain_Account_Desc, '_', final.Business_Segment_Hierarchy_id)",
                "\t, final.Chain_Account_Desc",
                "\t, final.Business_Segment_Hierarchy_id",
                "\t, final.RawNetSalesDollars",
                "\t, final.NetSalesDollars",
                "\t, final.RawNetGrossMarginDollars",
                "\t, final.NetGrossMarginDollars",
                "",
                "",
                "",
                "\")",
                "in",
                "    Source"
              ]
            }
          }
        ]
      },
      {
        "name": "SCA Strategy",
        "isHidden": true,
        "columns": [
          {
            "name": "SBU",
            "dataType": "string",
            "sourceColumn": "SBU"
          },
          {
            "name": "SCAGlobal",
            "dataType": "string",
            "sourceColumn": "SCAGlobal"
          },
          {
            "name": "InventoryStrategy",
            "dataType": "string",
            "sourceColumn": "InventoryStrategy"
          },
          {
            "name": "SCAStrategyKey",
            "dataType": "string",
            "sourceColumn": "SCAStrategyKey"
          },
          {
            "name": "CreatedOn",
            "dataType": "dateTime",
            "sourceColumn": "CreatedOn"
          },
          {
            "name": "UpdatedOn",
            "dataType": "dateTime",
            "sourceColumn": "UpdatedOn"
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = #\"Azure Synapse\",",
                "    Common_DimSCAStrategy = Source{[Schema=\"Common\",Item=\"DimSCAStrategy\"]}[Data]",
                "in",
                "    Common_DimSCAStrategy"
              ]
            }
          }
        ]
      }
    ],
    "relationships": [
      {
        "name": "c9a8ebc2-bd80-448b-8d94-83cd7b52b4d6",
        "fromTable": "Inventory",
        "fromColumn": "Dim_Facility_id",
        "toTable": "Facility",
        "toColumn": "Dim_Facility_ID"
      },
      {
        "name": "e52f1baf-785d-4fff-b5eb-b4aad7e96034",
        "fromTable": "Inventory",
        "fromColumn": "business_segment_hierarchy_id",
        "toTable": "Business Hierarchy",
        "toColumn": "business_seg_hierarchy_id"
      },
      {
        "name": "2c9bf45f-4f17-433d-b109-8677790d5cb7",
        "fromTable": "Inventory",
        "fromColumn": "As_of_Date_int",
        "toTable": "Calendar",
        "toColumn": "Day Date INT"
      },
      {
        "name": "e8be991f-f798-4062-bbdc-77903ae11630",
        "fromTable": "Product",
        "fromColumn": "Marketing_Resp_3",
        "toTable": "Marketing Resp",
        "toColumn": "Marketing_Resp_4"
      },
      {
        "name": "f69aae06-b9a5-4b33-bc96-38c96c29a103",
        "fromCardinality": "one",
        "fromTable": "Business Hierarchy",
        "fromColumn": "strategic_business_unit_desc",
        "toTable": "SKUCount Goals",
        "toColumn": "SBU",
        "crossFilteringBehavior": "bothDirections"
      },
      {
        "name": "c91a499f-d436-4263-9288-b1d4700a03dc",
        "fromTable": "Self Reported KPIs",
        "fromColumn": "Facility_ID",
        "toTable": "Facility",
        "toColumn": "Dim_Facility_ID"
      },
      {
        "name": "3b736412-0739-41e2-8db5-83de6d445bf4",
        "fromTable": "Self Reported KPIs",
        "fromColumn": "AsOfDateInt",
        "toTable": "Calendar",
        "toColumn": "Day Date INT"
      },
      {
        "name": "9231f05b-5946-4eca-baf1-99a663c3007c",
        "fromTable": "Self Reported KPIs",
        "fromColumn": "Dim_Item_ID",
        "toTable": "Product",
        "toColumn": "Dim_Item_id"
      },
      {
        "name": "71581322-f60c-4a7e-95d9-76b1ff8451c0",
        "fromTable": "Self Reported KPIs",
        "fromColumn": "business_seg_hierarchy_id",
        "toTable": "Business Hierarchy",
        "toColumn": "business_seg_hierarchy_id"
      },
      {
        "name": "3fba1108-fd5a-4830-9313-bb74a3d6cc19",
        "fromTable": "Item Changes",
        "fromColumn": "Historical_Class_Code_3",
        "toTable": "Historical Classifications",
        "toColumn": "Class_Code_LV3"
      },
      {
        "name": "9bb3ab9d-5f23-4027-95ae-627cf1abdc4a",
        "fromTable": "Inventory",
        "fromColumn": "Dim_Item_SCD_id",
        "toTable": "Item Changes",
        "toColumn": "Dim_Item_SCD_id"
      },
      {
        "name": "ead858cf-60fd-4a8f-87b5-9f657347068d",
        "fromTable": "Sales",
        "fromColumn": "Dim_Item_id",
        "toTable": "Product",
        "toColumn": "Dim_Item_id"
      },
      {
        "name": "18fe5799-728b-4d77-9d26-a2219d9b4b21",
        "fromTable": "Sales",
        "fromColumn": "Dim_Facility_id",
        "toTable": "Facility",
        "toColumn": "Dim_Facility_ID"
      },
      {
        "name": "df7eed2c-a7fa-4a58-8a68-06c750ee55e0",
        "fromTable": "Sales",
        "fromColumn": "business_segment_hierarchy_id",
        "toTable": "Business Hierarchy",
        "toColumn": "business_seg_hierarchy_id"
      },
      {
        "name": "84e0876c-a4cf-4953-a8fa-a6b1c8ca0a7a",
        "fromTable": "Sales",
        "fromColumn": "As_of_Date_int",
        "toTable": "Calendar",
        "toColumn": "Day Date INT"
      },
      {
        "name": "72dfc45a-a58c-4df6-90b6-298f6d8dddee",
        "fromTable": "Inventory",
        "fromColumn": "Dim_Item_id",
        "toTable": "Product",
        "toColumn": "Dim_Item_id"
      },
      {
        "name": "1f455d22-9295-48f9-9756-10f640d9a4aa",
        "fromTable": "Product",
        "fromColumn": "SKUGlobal",
        "toTable": "Disposal SKU",
        "toColumn": "SKU_Final_Temp"
      },
      {
        "name": "5e105ed5-6f5e-40fa-b024-f1e714b7d82a",
        "fromTable": "Inventory",
        "fromColumn": "Aging Buckets",
        "toTable": "Aging Bucket",
        "toColumn": "Detailed Aging Buckets"
      },
      {
        "name": "1f791069-f256-43d8-8a03-f1918454def4",
        "fromTable": "Product",
        "fromColumn": "SKUGlobal",
        "toTable": "SellingType",
        "toColumn": "SKU"
      },
      {
        "name": "caca3e99-e60a-4f41-bb33-472ec65a61d5",
        "fromTable": "Product",
        "fromColumn": "Dim_Item_id",
        "toTable": "LCA",
        "toColumn": "ITEM_ID"
      },
      {
        "name": "61732812-060a-48c1-bc58-f3e303daa25e",
        "fromTable": "Product",
        "fromColumn": "SKUGlobal",
        "toTable": "SKU Statistics",
        "toColumn": "SKUGlobal"
      },
      {
        "name": "e8d951eb-8f89-40de-95a4-d59be59ce7f5",
        "fromTable": "Inventory Plan",
        "fromColumn": "Dim_Item_id",
        "toTable": "Product",
        "toColumn": "Dim_Item_id"
      },
      {
        "name": "b0e616a6-0972-4dc9-a947-9d612597ea70",
        "fromTable": "Inventory Plan",
        "fromColumn": "BusKey",
        "toTable": "Business Hierarchy",
        "toColumn": "BusKey"
      },
      {
        "name": "c3bd48ad-c1c5-4c78-9ac6-33783fb2e6c0",
        "fromTable": "Inventory Plan",
        "fromColumn": "Dim_Item_SCD_id",
        "toTable": "Item Changes",
        "toColumn": "Dim_Item_SCD_id"
      },
      {
        "name": "a6341795-11cf-48b0-adb4-92e3f9eaa186",
        "fromTable": "Inventory Plan",
        "fromColumn": "Dim_Facility_id",
        "toTable": "Facility",
        "toColumn": "Dim_Facility_ID"
      },
      {
        "name": "c0c05c53-b85c-45a4-9db0-e5d06f5a0a27",
        "fromTable": "Inventory Plan",
        "fromColumn": "As_of_Date_int",
        "toTable": "Calendar",
        "toColumn": "Day Date INT"
      },
      {
        "name": "6a811aad-94cb-45a1-8335-4f6125b40285",
        "fromTable": "Product",
        "fromColumn": "SKUGlobal",
        "toTable": "SKU Creates",
        "toColumn": "SKUGlobal"
      },
      {
        "name": "a6850543-df89-4f3a-b4ea-9f9a39d23c94",
        "fromTable": "Product",
        "fromColumn": "SKUGlobal",
        "toTable": "WP SKU List",
        "toColumn": "SKUGlobal"
      },
      {
        "name": "31c9d570-3ecf-4fb0-aef4-58c00c1bf23d",
        "fromTable": "Product",
        "fromColumn": "Dim_Item_id",
        "toTable": "SKU Dates",
        "toColumn": "Dim_Item_id"
      },
      {
        "name": "6d0442ba-0a05-4a5f-a86b-8e1149581cd4",
        "fromTable": "Reserve Rates",
        "fromColumn": "Dim_Item_id",
        "toTable": "Product",
        "toColumn": "Dim_Item_id"
      },
      {
        "name": "bd145ecc-224a-4c30-9c20-b28a98cd0a0b",
        "fromTable": "Reserve Rates",
        "fromColumn": "Dim_Facility_id",
        "toTable": "Facility",
        "toColumn": "Dim_Facility_ID"
      },
      {
        "name": "03880cc4-b05e-4eb3-a9ee-5d57c25f05c4",
        "fromTable": "Reserve Rates",
        "fromColumn": "Business_Segment_Hierarchy_id",
        "toTable": "Business Hierarchy",
        "toColumn": "business_seg_hierarchy_id"
      },
      {
        "name": "ef3650b1-1d92-44eb-a4e7-a6661169ca98",
        "fromTable": "Reserve Rates",
        "fromColumn": "As_of_Date_int",
        "toTable": "Calendar",
        "toColumn": "Day Date INT"
      },
      {
        "name": "f552e997-ba8d-4feb-9989-7fdb282c13a2",
        "fromTable": "Reserve Rates",
        "fromColumn": "Dim_Item_SCD_id",
        "toTable": "Item Changes",
        "toColumn": "Dim_Item_SCD_id"
      },
      {
        "name": "e6676978-b033-4e91-a832-b6f750c8a776",
        "fromTable": "Reserve Rates",
        "fromColumn": "Aging Buckets",
        "toTable": "Aging Bucket",
        "toColumn": "Detailed Aging Buckets"
      },
      {
        "name": "f2cefd35-767a-4134-8550-a617dc0201aa",
        "fromTable": "Product",
        "fromColumn": "SCAGlobal",
        "toTable": "SCAGlobal",
        "toColumn": "SCAGlobal"
      },
      {
        "name": "832153bb-665a-4847-8886-0fe6a6caba8c",
        "fromTable": "SCA Customer",
        "fromColumn": "SCAGlobal",
        "toTable": "SCAGlobal",
        "toColumn": "SCAGlobal"
      },
      {
        "name": "621a5ddf-f7e0-44d8-9022-f511213eeb2a",
        "fromTable": "SCA Customer",
        "fromColumn": "Dim_Customer_id",
        "toTable": "Customer",
        "toColumn": "Dim_Customer_ID"
      },
      {
        "name": "25ca6869-1c4f-4300-970d-7c940763885a",
        "fromTable": "SCA Customer",
        "fromColumn": "Chain_Account_Desc_Bus_Id",
        "toTable": "Customer Decile",
        "toColumn": "Chain_Account_Desc_Bus_Id"
      },
      {
        "name": "2610e62d-bdd9-4448-90f4-0294a9793ebe",
        "fromTable": "SCA Customer",
        "fromColumn": "Business_Segment_Hierarchy_id",
        "toTable": "Business Hierarchy",
        "toColumn": "business_seg_hierarchy_id"
      },
      {
        "name": "e955725f-cae5-42e2-b402-4316196888a8",
        "fromTable": "SCA Customer",
        "fromColumn": "SCAGlobal_Bus_Id",
        "toTable": "SCA Statistics",
        "toColumn": "SCAGlobal_Bus_Id"
      },
      {
        "name": "5e19f9f1-2c9c-4da5-931b-ea6dfb8e223f",
        "fromTable": "Product",
        "fromColumn": "SCAGlobal",
        "toTable": "SCA Strategy",
        "toColumn": "SCAGlobal"
      }
    ],
    "roles": [
      {
        "name": "Read",
        "modelPermission": "read",
        "members": [
          {
            "memberName": "obj:c07d2f43-d789-44c3-b369-1c487822e793@333b3fe4-69f0-4013-a0eb-5bcb97f52644",
            "memberId": "obj:c07d2f43-d789-44c3-b369-1c487822e793@333b3fe4-69f0-4013-a0eb-5bcb97f52644",
            "identityProvider": "AzureAD"
          }
        ]
      },
      {
        "name": "Admin",
        "modelPermission": "administrator",
        "members": [
          {
            "memberName": "obj:a0309aad-8744-440d-ab49-65299a2f4e7a@333b3fe4-69f0-4013-a0eb-5bcb97f52644",
            "memberId": "obj:a0309aad-8744-440d-ab49-65299a2f4e7a@333b3fe4-69f0-4013-a0eb-5bcb97f52644",
            "identityProvider": "AzureAD"
          }
        ]
      }
    ],
    "annotations": [
      {
        "name": "ClientCompatibilityLevel",
        "value": "600"
      }
    ]
  },
  "id": "SemanticModel"
}